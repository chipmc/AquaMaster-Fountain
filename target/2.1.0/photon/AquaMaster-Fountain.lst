
/Users/chipmc/Documents/Maker/Particle/Projects/AquaMaster-Fountain/target/2.1.0/photon/AquaMaster-Fountain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005090  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a50b0  080a50b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a50b8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000144  20000000  080a50bc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000614  20000148  20000148  00040148  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a5200  080a5200  00035200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a5228  080a5228  00035228  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00107e90  00000000  00000000  0003522c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00013cce  00000000  00000000  0013d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001bb5e  00000000  00000000  00150d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000021d8  00000000  00000000  0016c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005560  00000000  00000000  0016eac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002606f  00000000  00000000  00174020  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002ce7a  00000000  00000000  0019a08f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b41d8  00000000  00000000  001c6f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00005cf4  00000000  00000000  0027b0e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 ff7b 	bl	80a3f2c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 ff83 	bl	80a3f48 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a50bc 	.word	0x080a50bc
 80a0050:	20000144 	.word	0x20000144
 80a0054:	20000148 	.word	0x20000148
 80a0058:	20000759 	.word	0x20000759
 80a005c:	20000759 	.word	0x20000759

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fc95 	bl	80a2990 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a5088 	.word	0x080a5088
 80a0084:	080a50a8 	.word	0x080a50a8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bee2 	b.w	80a0e50 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa79 	bl	80a0584 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f002 bc3d 	b.w	80a2914 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f001 bab9 	b.w	80a1610 <malloc>

080a009e <_Znaj>:
 80a009e:	f001 bab7 	b.w	80a1610 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f001 babd 	b.w	80a1620 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z11watchdogISRv>:
  watchdogFlag = false;
}

// Here is were we will put the timer and other ISRs
void watchdogISR() {
  watchdogFlag = true;
 80a00b8:	2201      	movs	r2, #1
 80a00ba:	4b01      	ldr	r3, [pc, #4]	; (80a00c0 <_Z11watchdogISRv+0x8>)
 80a00bc:	701a      	strb	r2, [r3, #0]
}
 80a00be:	4770      	bx	lr
 80a00c0:	20000205 	.word	0x20000205

080a00c4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00c4:	b510      	push	{r4, lr}
 80a00c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a00c8:	6800      	ldr	r0, [r0, #0]
 80a00ca:	b108      	cbz	r0, 80a00d0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a00cc:	f001 faa8 	bl	80a1620 <free>
class SystemClass {
 80a00d0:	4620      	mov	r0, r4
 80a00d2:	bd10      	pop	{r4, pc}

080a00d4 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
 80a00d4:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a00d6:	f001 fa13 	bl	80a1500 <spark_cloud_flag_connected>
        if (!connected()) {
 80a00da:	b120      	cbz	r0, 80a00e6 <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
 80a00dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
 80a00e0:	2000      	movs	r0, #0
 80a00e2:	f001 ba1d 	b.w	80a1520 <spark_sync_time>
    }
 80a00e6:	bd08      	pop	{r3, pc}

080a00e8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80a00e8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a00ea:	2000      	movs	r0, #0
 80a00ec:	f001 fa20 	bl	80a1530 <spark_sync_time_pending>
 80a00f0:	b128      	cbz	r0, 80a00fe <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a00f2:	f001 fa05 	bl	80a1500 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a00f6:	f080 0001 	eor.w	r0, r0, #1
 80a00fa:	b2c0      	uxtb	r0, r0
    }
 80a00fc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a00fe:	2001      	movs	r0, #1
 80a0100:	e7fc      	b.n	80a00fc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a0102 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a0102:	2300      	movs	r3, #0
 80a0104:	2202      	movs	r2, #2
 80a0106:	f001 b9e3 	b.w	80a14d0 <spark_variable>

080a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80a010a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a010c:	4604      	mov	r4, r0
 80a010e:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
 80a0112:	431d      	orrs	r5, r3
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0114:	f88d 5000 	strb.w	r5, [sp]
 80a0118:	233c      	movs	r3, #60	; 0x3c
 80a011a:	f001 fc47 	bl	80a19ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
 80a011e:	4620      	mov	r0, r4
 80a0120:	b003      	add	sp, #12
 80a0122:	bd30      	pop	{r4, r5, pc}

080a0124 <_Z17getSignalStrengthv>:
void getSignalStrength() {
 80a0124:	b510      	push	{r4, lr}
 80a0126:	b08e      	sub	sp, #56	; 0x38
  WiFiSignal sig = WiFi.RSSI();
 80a0128:	490d      	ldr	r1, [pc, #52]	; (80a0160 <_Z17getSignalStrengthv+0x3c>)
 80a012a:	a805      	add	r0, sp, #20
 80a012c:	f002 fb80 	bl	80a2830 <_ZN5spark9WiFiClass4RSSIEv>
  snprintf(SignalString,sizeof(SignalString), "WiFi Quality: %.02f%% Strength: %.02f%%", sig.getQuality(), sig.getStrength());
 80a0130:	a805      	add	r0, sp, #20
 80a0132:	f002 fb33 	bl	80a279c <_ZNK10WiFiSignal10getQualityEv>
 80a0136:	4604      	mov	r4, r0
 80a0138:	a805      	add	r0, sp, #20
 80a013a:	f002 fb05 	bl	80a2748 <_ZNK10WiFiSignal11getStrengthEv>
 80a013e:	f002 fed5 	bl	80a2eec <__aeabi_f2d>
 80a0142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a0146:	4620      	mov	r0, r4
 80a0148:	f002 fed0 	bl	80a2eec <__aeabi_f2d>
 80a014c:	4a05      	ldr	r2, [pc, #20]	; (80a0164 <_Z17getSignalStrengthv+0x40>)
 80a014e:	e9cd 0100 	strd	r0, r1, [sp]
 80a0152:	2140      	movs	r1, #64	; 0x40
 80a0154:	4804      	ldr	r0, [pc, #16]	; (80a0168 <_Z17getSignalStrengthv+0x44>)
 80a0156:	f001 fa83 	bl	80a1660 <snprintf>
}
 80a015a:	b00e      	add	sp, #56	; 0x38
 80a015c:	bd10      	pop	{r4, pc}
 80a015e:	bf00      	nop
 80a0160:	200006cc 	.word	0x200006cc
 80a0164:	080a499c 	.word	0x080a499c
 80a0168:	2000014c 	.word	0x2000014c

080a016c <_Z11petWatchdogv>:
void petWatchdog() {
 80a016c:	b508      	push	{r3, lr}
  digitalWrite(donePin, HIGH);                                          // Pet the watchdog
 80a016e:	2101      	movs	r1, #1
 80a0170:	2006      	movs	r0, #6
 80a0172:	f002 fc9e 	bl	80a2ab2 <digitalWrite>
  digitalWrite(donePin, LOW);
 80a0176:	2100      	movs	r1, #0
 80a0178:	2006      	movs	r0, #6
 80a017a:	f002 fc9a 	bl	80a2ab2 <digitalWrite>
  watchdogFlag = false;
 80a017e:	2200      	movs	r2, #0
 80a0180:	4b01      	ldr	r3, [pc, #4]	; (80a0188 <_Z11petWatchdogv+0x1c>)
 80a0182:	701a      	strb	r2, [r3, #0]
}
 80a0184:	bd08      	pop	{r3, pc}
 80a0186:	bf00      	nop
 80a0188:	20000205 	.word	0x20000205

080a018c <_Z20meterParticlePublishv>:


bool meterParticlePublish(void)
{
 80a018c:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a018e:	f000 ffff 	bl	80a1190 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {
 80a0192:	4c06      	ldr	r4, [pc, #24]	; (80a01ac <_Z20meterParticlePublishv+0x20>)
 80a0194:	6823      	ldr	r3, [r4, #0]
 80a0196:	1ac0      	subs	r0, r0, r3
 80a0198:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a019c:	d304      	bcc.n	80a01a8 <_Z20meterParticlePublishv+0x1c>
 80a019e:	f000 fff7 	bl	80a1190 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a01a2:	6020      	str	r0, [r4, #0]
 80a01a4:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
 80a01a6:	bd10      	pop	{r4, pc}
  else return 0;
 80a01a8:	2000      	movs	r0, #0
 80a01aa:	e7fc      	b.n	80a01a6 <_Z20meterParticlePublishv+0x1a>
 80a01ac:	200001a4 	.word	0x200001a4

080a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
 80a01b0:	b508      	push	{r3, lr}
      waitUntil(meterParticlePublish);
 80a01b2:	f7ff ffeb 	bl	80a018c <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
 80a01b6:	b910      	cbnz	r0, 80a01be <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0+0xe>
            spark_process();
 80a01b8:	f001 f99a 	bl	80a14f0 <spark_process>
        while (_while() && !_condition()) {
 80a01bc:	e7f9      	b.n	80a01b2 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0+0x2>
        }
        return _condition();
    }
 80a01be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a01c2:	f7ff bfe3 	b.w	80a018c <_Z20meterParticlePublishv>
	...

080a01c8 <_Z17checkSystemValuesv>:
  sysStatus.timezone = -5;                                              // Default is East Coast Time
  sysStatus.dstOffset = 1;
  EEPROM.put(EEPROMaddr::systemStatusAddr,sysStatus);                   // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                              // Checks to ensure that all system values are in reasonable range
 80a01c8:	b538      	push	{r3, r4, r5, lr}
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
 80a01ca:	4c22      	ldr	r4, [pc, #136]	; (80a0254 <_Z17checkSystemValuesv+0x8c>)
 80a01cc:	78e3      	ldrb	r3, [r4, #3]
 80a01ce:	2b01      	cmp	r3, #1
 80a01d0:	bf84      	itt	hi
 80a01d2:	2300      	movhi	r3, #0
 80a01d4:	70e3      	strbhi	r3, [r4, #3]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
 80a01d6:	6863      	ldr	r3, [r4, #4]
 80a01d8:	2bff      	cmp	r3, #255	; 0xff
 80a01da:	d901      	bls.n	80a01e0 <_Z17checkSystemValuesv+0x18>
 80a01dc:	2300      	movs	r3, #0
 80a01de:	6063      	str	r3, [r4, #4]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
 80a01e0:	68a5      	ldr	r5, [r4, #8]
 80a01e2:	491d      	ldr	r1, [pc, #116]	; (80a0258 <_Z17checkSystemValuesv+0x90>)
 80a01e4:	4628      	mov	r0, r5
 80a01e6:	f003 fbb7 	bl	80a3958 <__aeabi_fcmplt>
 80a01ea:	b920      	cbnz	r0, 80a01f6 <_Z17checkSystemValuesv+0x2e>
 80a01ec:	4628      	mov	r0, r5
 80a01ee:	491b      	ldr	r1, [pc, #108]	; (80a025c <_Z17checkSystemValuesv+0x94>)
 80a01f0:	f003 fbd0 	bl	80a3994 <__aeabi_fcmpgt>
 80a01f4:	b108      	cbz	r0, 80a01fa <_Z17checkSystemValuesv+0x32>
 80a01f6:	4b1a      	ldr	r3, [pc, #104]	; (80a0260 <_Z17checkSystemValuesv+0x98>)
 80a01f8:	60a3      	str	r3, [r4, #8]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
 80a01fa:	68e5      	ldr	r5, [r4, #12]
 80a01fc:	2100      	movs	r1, #0
 80a01fe:	4628      	mov	r0, r5
 80a0200:	f003 fbaa 	bl	80a3958 <__aeabi_fcmplt>
 80a0204:	b928      	cbnz	r0, 80a0212 <_Z17checkSystemValuesv+0x4a>
 80a0206:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a020a:	4628      	mov	r0, r5
 80a020c:	f003 fbc2 	bl	80a3994 <__aeabi_fcmpgt>
 80a0210:	b110      	cbz	r0, 80a0218 <_Z17checkSystemValuesv+0x50>
 80a0212:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80a0216:	60e3      	str	r3, [r4, #12]
  if (sysStatus.pumpOnHour < 0 || sysStatus.pumpOnHour > 24) sysStatus.pumpOnHour = 12;
 80a0218:	6923      	ldr	r3, [r4, #16]
  if (sysStatus.ledOnHour < 0 || sysStatus.ledOnHour > 24) sysStatus.ledOnHour = 18;
  if (sysStatus.powerOffHour < 0 || sysStatus.powerOffHour > 24) sysStatus.powerOffHour = 20;
  if (sysStatus.weekdayOffHour < 0 || sysStatus.weekdayOffHour > 24) sysStatus.weekdayOffHour = 20;
  if (sysStatus.weekendOffHour < 0 || sysStatus.weekendOffHour > 24) sysStatus.weekendOffHour = 23;
  // None for lastHookResponse
  systemStatusWriteNeeded = true;
 80a021a:	2201      	movs	r2, #1
  if (sysStatus.pumpOnHour < 0 || sysStatus.pumpOnHour > 24) sysStatus.pumpOnHour = 12;
 80a021c:	2b18      	cmp	r3, #24
 80a021e:	bf84      	itt	hi
 80a0220:	230c      	movhi	r3, #12
 80a0222:	6123      	strhi	r3, [r4, #16]
  if (sysStatus.ledOnHour < 0 || sysStatus.ledOnHour > 24) sysStatus.ledOnHour = 18;
 80a0224:	6963      	ldr	r3, [r4, #20]
 80a0226:	2b18      	cmp	r3, #24
 80a0228:	bf84      	itt	hi
 80a022a:	2312      	movhi	r3, #18
 80a022c:	6163      	strhi	r3, [r4, #20]
  if (sysStatus.powerOffHour < 0 || sysStatus.powerOffHour > 24) sysStatus.powerOffHour = 20;
 80a022e:	69a3      	ldr	r3, [r4, #24]
 80a0230:	2b18      	cmp	r3, #24
 80a0232:	bf84      	itt	hi
 80a0234:	2314      	movhi	r3, #20
 80a0236:	61a3      	strhi	r3, [r4, #24]
  if (sysStatus.weekdayOffHour < 0 || sysStatus.weekdayOffHour > 24) sysStatus.weekdayOffHour = 20;
 80a0238:	6a23      	ldr	r3, [r4, #32]
 80a023a:	2b18      	cmp	r3, #24
 80a023c:	bf84      	itt	hi
 80a023e:	2314      	movhi	r3, #20
 80a0240:	6223      	strhi	r3, [r4, #32]
  if (sysStatus.weekendOffHour < 0 || sysStatus.weekendOffHour > 24) sysStatus.weekendOffHour = 23;
 80a0242:	69e3      	ldr	r3, [r4, #28]
 80a0244:	2b18      	cmp	r3, #24
 80a0246:	bf84      	itt	hi
 80a0248:	2317      	movhi	r3, #23
 80a024a:	61e3      	strhi	r3, [r4, #28]
  systemStatusWriteNeeded = true;
 80a024c:	4b05      	ldr	r3, [pc, #20]	; (80a0264 <_Z17checkSystemValuesv+0x9c>)
 80a024e:	701a      	strb	r2, [r3, #0]
}
 80a0250:	bd38      	pop	{r3, r4, r5, pc}
 80a0252:	bf00      	nop
 80a0254:	200001d4 	.word	0x200001d4
 80a0258:	c1400000 	.word	0xc1400000
 80a025c:	41400000 	.word	0x41400000
 80a0260:	c0a00000 	.word	0xc0a00000
 80a0264:	20000204 	.word	0x20000204

080a0268 <_Z8isDSTusav>:
  state = CONTROL_STATE;
  return 1;
}


bool isDSTusa() {
 80a0268:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
 80a026a:	f002 f893 	bl	80a2394 <_ZN9TimeClass3dayEv>
 80a026e:	4605      	mov	r5, r0
  int month = Time.month();
 80a0270:	f002 f8a4 	bl	80a23bc <_ZN9TimeClass5monthEv>
 80a0274:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 80a0276:	f002 f899 	bl	80a23ac <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
 80a027a:	1f23      	subs	r3, r4, #4
 80a027c:	2b06      	cmp	r3, #6
 80a027e:	d90e      	bls.n	80a029e <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
 80a0280:	1ee3      	subs	r3, r4, #3
 80a0282:	2b08      	cmp	r3, #8
 80a0284:	d80d      	bhi.n	80a02a2 <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 80a0286:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
 80a0288:	1a2d      	subs	r5, r5, r0
 80a028a:	d504      	bpl.n	80a0296 <_Z8isDSTusav+0x2e>
 80a028c:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 80a028e:	bf14      	ite	ne
 80a0290:	2000      	movne	r0, #0
 80a0292:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
 80a0294:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
 80a0296:	2d07      	cmp	r5, #7
 80a0298:	dd03      	ble.n	80a02a2 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 80a029a:	2c03      	cmp	r4, #3
 80a029c:	e7f7      	b.n	80a028e <_Z8isDSTusav+0x26>
    return true;
 80a029e:	2001      	movs	r0, #1
 80a02a0:	e7f8      	b.n	80a0294 <_Z8isDSTusav+0x2c>
    return false;
 80a02a2:	2000      	movs	r0, #0
 80a02a4:	e7f6      	b.n	80a0294 <_Z8isDSTusav+0x2c>

080a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a02a6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a02a8:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a02aa:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a02ac:	b17c      	cbz	r4, 80a02ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a02ae:	6863      	ldr	r3, [r4, #4]
 80a02b0:	3b01      	subs	r3, #1
 80a02b2:	6063      	str	r3, [r4, #4]
 80a02b4:	b95b      	cbnz	r3, 80a02ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a02b6:	6823      	ldr	r3, [r4, #0]
 80a02b8:	4620      	mov	r0, r4
 80a02ba:	689b      	ldr	r3, [r3, #8]
 80a02bc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a02be:	68a3      	ldr	r3, [r4, #8]
 80a02c0:	3b01      	subs	r3, #1
 80a02c2:	60a3      	str	r3, [r4, #8]
 80a02c4:	b91b      	cbnz	r3, 80a02ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a02c6:	6823      	ldr	r3, [r4, #0]
 80a02c8:	4620      	mov	r0, r4
 80a02ca:	68db      	ldr	r3, [r3, #12]
 80a02cc:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a02ce:	4628      	mov	r0, r5
 80a02d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a02d4 <_Z14setVerboseMode6String>:
{
 80a02d4:	b530      	push	{r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a02d6:	491a      	ldr	r1, [pc, #104]	; (80a0340 <_Z14setVerboseMode6String+0x6c>)
 80a02d8:	b085      	sub	sp, #20
 80a02da:	4605      	mov	r5, r0
 80a02dc:	f001 ff00 	bl	80a20e0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80a02e0:	4604      	mov	r4, r0
 80a02e2:	b1c8      	cbz	r0, 80a0318 <_Z14setVerboseMode6String+0x44>
    sysStatus.verboseMode = true;
 80a02e4:	2201      	movs	r2, #1
 80a02e6:	4b17      	ldr	r3, [pc, #92]	; (80a0344 <_Z14setVerboseMode6String+0x70>)
 80a02e8:	70da      	strb	r2, [r3, #3]

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
 80a02ea:	f7ff ff61 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a02ee:	f001 f907 	bl	80a1500 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 80a02f2:	b160      	cbz	r0, 80a030e <_Z14setVerboseMode6String+0x3a>
 80a02f4:	2300      	movs	r3, #0
 80a02f6:	f88d 3000 	strb.w	r3, [sp]
 80a02fa:	4b13      	ldr	r3, [pc, #76]	; (80a0348 <_Z14setVerboseMode6String+0x74>)
 80a02fc:	4a13      	ldr	r2, [pc, #76]	; (80a034c <_Z14setVerboseMode6String+0x78>)
 80a02fe:	781b      	ldrb	r3, [r3, #0]
 80a0300:	a802      	add	r0, sp, #8
 80a0302:	4913      	ldr	r1, [pc, #76]	; (80a0350 <_Z14setVerboseMode6String+0x7c>)
 80a0304:	f7ff ff01 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0308:	a803      	add	r0, sp, #12
 80a030a:	f7ff ffcc 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    systemStatusWriteNeeded = true;
 80a030e:	2001      	movs	r0, #1
 80a0310:	4b10      	ldr	r3, [pc, #64]	; (80a0354 <_Z14setVerboseMode6String+0x80>)
 80a0312:	7018      	strb	r0, [r3, #0]
}
 80a0314:	b005      	add	sp, #20
 80a0316:	bd30      	pop	{r4, r5, pc}
 80a0318:	4628      	mov	r0, r5
 80a031a:	490f      	ldr	r1, [pc, #60]	; (80a0358 <_Z14setVerboseMode6String+0x84>)
 80a031c:	f001 fee0 	bl	80a20e0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
 80a0320:	2800      	cmp	r0, #0
 80a0322:	d0f7      	beq.n	80a0314 <_Z14setVerboseMode6String+0x40>
    sysStatus.verboseMode = false;
 80a0324:	4b07      	ldr	r3, [pc, #28]	; (80a0344 <_Z14setVerboseMode6String+0x70>)
 80a0326:	70dc      	strb	r4, [r3, #3]
 80a0328:	f7ff ff42 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a032c:	f001 f8e8 	bl	80a1500 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80a0330:	2800      	cmp	r0, #0
 80a0332:	d0ec      	beq.n	80a030e <_Z14setVerboseMode6String+0x3a>
 80a0334:	4b04      	ldr	r3, [pc, #16]	; (80a0348 <_Z14setVerboseMode6String+0x74>)
 80a0336:	f88d 4000 	strb.w	r4, [sp]
 80a033a:	781b      	ldrb	r3, [r3, #0]
 80a033c:	4a07      	ldr	r2, [pc, #28]	; (80a035c <_Z14setVerboseMode6String+0x88>)
 80a033e:	e7df      	b.n	80a0300 <_Z14setVerboseMode6String+0x2c>
 80a0340:	080a49c4 	.word	0x080a49c4
 80a0344:	200001d4 	.word	0x200001d4
 80a0348:	2000019c 	.word	0x2000019c
 80a034c:	080a49c6 	.word	0x080a49c6
 80a0350:	080a49e9 	.word	0x080a49e9
 80a0354:	20000204 	.word	0x20000204
 80a0358:	080a49d7 	.word	0x080a49d7
 80a035c:	080a49d9 	.word	0x080a49d9

080a0360 <_Z12setPumpState6String>:
{
 80a0360:	b530      	push	{r4, r5, lr}
 80a0362:	4929      	ldr	r1, [pc, #164]	; (80a0408 <_Z12setPumpState6String+0xa8>)
 80a0364:	b085      	sub	sp, #20
 80a0366:	4605      	mov	r5, r0
 80a0368:	f001 feba 	bl	80a20e0 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80a036c:	4604      	mov	r4, r0
 80a036e:	b388      	cbz	r0, 80a03d4 <_Z12setPumpState6String+0x74>
    current.pumpPower = true;
 80a0370:	2401      	movs	r4, #1
 80a0372:	4d26      	ldr	r5, [pc, #152]	; (80a040c <_Z12setPumpState6String+0xac>)
 80a0374:	706c      	strb	r4, [r5, #1]
    if (Time.hour() >= sysStatus.ledOnHour) {
 80a0376:	f002 f801 	bl	80a237c <_ZN9TimeClass4hourEv>
 80a037a:	4b25      	ldr	r3, [pc, #148]	; (80a0410 <_Z12setPumpState6String+0xb0>)
 80a037c:	695b      	ldr	r3, [r3, #20]
 80a037e:	4298      	cmp	r0, r3
 80a0380:	db09      	blt.n	80a0396 <_Z12setPumpState6String+0x36>
      digitalWrite(ledPowerPin,HIGH);
 80a0382:	4621      	mov	r1, r4
 80a0384:	2007      	movs	r0, #7
 80a0386:	f002 fb94 	bl	80a2ab2 <digitalWrite>
      strncpy(ledPowerStr,"Led On",sizeof(ledPowerStr));
 80a038a:	2210      	movs	r2, #16
 80a038c:	4921      	ldr	r1, [pc, #132]	; (80a0414 <_Z12setPumpState6String+0xb4>)
 80a038e:	4822      	ldr	r0, [pc, #136]	; (80a0418 <_Z12setPumpState6String+0xb8>)
      current.ledPower = true;
 80a0390:	702c      	strb	r4, [r5, #0]
      strncpy(ledPowerStr,"Led On",sizeof(ledPowerStr));
 80a0392:	f003 fe4c 	bl	80a402e <strncpy>
    digitalWrite(pumpPowerPin,HIGH);
 80a0396:	2101      	movs	r1, #1
 80a0398:	2002      	movs	r0, #2
 80a039a:	f002 fb8a 	bl	80a2ab2 <digitalWrite>
    strncpy(pumpPowerStr, "Pump On", sizeof(pumpPowerStr));
 80a039e:	2210      	movs	r2, #16
 80a03a0:	491e      	ldr	r1, [pc, #120]	; (80a041c <_Z12setPumpState6String+0xbc>)
 80a03a2:	481f      	ldr	r0, [pc, #124]	; (80a0420 <_Z12setPumpState6String+0xc0>)
 80a03a4:	f003 fe43 	bl	80a402e <strncpy>
 80a03a8:	f7ff ff02 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a03ac:	f001 f8a8 	bl	80a1500 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Pump control", pumpPowerStr,PRIVATE);
 80a03b0:	b910      	cbnz	r0, 80a03b8 <_Z12setPumpState6String+0x58>
    return 1;
 80a03b2:	2001      	movs	r0, #1
}
 80a03b4:	b005      	add	sp, #20
 80a03b6:	bd30      	pop	{r4, r5, pc}
    if (Particle.connected()) Particle.publish("Pump control", pumpPowerStr,PRIVATE);
 80a03b8:	2300      	movs	r3, #0
 80a03ba:	f88d 3000 	strb.w	r3, [sp]
    if (Particle.connected()) Particle.publish("Pump control", pumpPowerStr,PRIVATE);
 80a03be:	4b19      	ldr	r3, [pc, #100]	; (80a0424 <_Z12setPumpState6String+0xc4>)
 80a03c0:	a802      	add	r0, sp, #8
 80a03c2:	781b      	ldrb	r3, [r3, #0]
 80a03c4:	4a16      	ldr	r2, [pc, #88]	; (80a0420 <_Z12setPumpState6String+0xc0>)
 80a03c6:	4918      	ldr	r1, [pc, #96]	; (80a0428 <_Z12setPumpState6String+0xc8>)
 80a03c8:	f7ff fe9f 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a03cc:	a803      	add	r0, sp, #12
 80a03ce:	f7ff ff6a 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a03d2:	e7ee      	b.n	80a03b2 <_Z12setPumpState6String+0x52>
 80a03d4:	4628      	mov	r0, r5
 80a03d6:	4915      	ldr	r1, [pc, #84]	; (80a042c <_Z12setPumpState6String+0xcc>)
 80a03d8:	f001 fe82 	bl	80a20e0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
 80a03dc:	2800      	cmp	r0, #0
 80a03de:	d0e9      	beq.n	80a03b4 <_Z12setPumpState6String+0x54>
    current.pumpPower = false;
 80a03e0:	4b0a      	ldr	r3, [pc, #40]	; (80a040c <_Z12setPumpState6String+0xac>)
    digitalWrite(pumpPowerPin,LOW);
 80a03e2:	4621      	mov	r1, r4
 80a03e4:	2002      	movs	r0, #2
    current.pumpPower = false;
 80a03e6:	705c      	strb	r4, [r3, #1]
    digitalWrite(pumpPowerPin,LOW);
 80a03e8:	f002 fb63 	bl	80a2ab2 <digitalWrite>
    strncpy(pumpPowerStr, "Pump Off", sizeof(pumpPowerStr));
 80a03ec:	2210      	movs	r2, #16
 80a03ee:	4910      	ldr	r1, [pc, #64]	; (80a0430 <_Z12setPumpState6String+0xd0>)
 80a03f0:	480b      	ldr	r0, [pc, #44]	; (80a0420 <_Z12setPumpState6String+0xc0>)
 80a03f2:	f003 fe1c 	bl	80a402e <strncpy>
 80a03f6:	f7ff fedb 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a03fa:	f001 f881 	bl	80a1500 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Pump control", pumpPowerStr,PRIVATE);
 80a03fe:	2800      	cmp	r0, #0
 80a0400:	d0d7      	beq.n	80a03b2 <_Z12setPumpState6String+0x52>
 80a0402:	f88d 4000 	strb.w	r4, [sp]
 80a0406:	e7da      	b.n	80a03be <_Z12setPumpState6String+0x5e>
 80a0408:	080a49c4 	.word	0x080a49c4
 80a040c:	200001a8 	.word	0x200001a8
 80a0410:	200001d4 	.word	0x200001d4
 80a0414:	080a49ee 	.word	0x080a49ee
 80a0418:	20000000 	.word	0x20000000
 80a041c:	080a49f5 	.word	0x080a49f5
 80a0420:	20000010 	.word	0x20000010
 80a0424:	2000019c 	.word	0x2000019c
 80a0428:	080a49fd 	.word	0x080a49fd
 80a042c:	080a49d7 	.word	0x080a49d7
 80a0430:	080a4a0a 	.word	0x080a4a0a

080a0434 <_Z12dailyCleanupv>:
void dailyCleanup() {                                                   // Called from Reporting State ONLY - clean house at the end of the day
 80a0434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static int currentDay = Time.day();
 80a0438:	4c2e      	ldr	r4, [pc, #184]	; (80a04f4 <_Z12dailyCleanupv+0xc0>)
 80a043a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80a050c <_Z12dailyCleanupv+0xd8>
 80a043e:	7823      	ldrb	r3, [r4, #0]
void dailyCleanup() {                                                   // Called from Reporting State ONLY - clean house at the end of the day
 80a0440:	b085      	sub	sp, #20
  static int currentDay = Time.day();
 80a0442:	f013 0f01 	tst.w	r3, #1
 80a0446:	f3bf 8f5b 	dmb	ish
 80a044a:	d10a      	bne.n	80a0462 <_Z12dailyCleanupv+0x2e>
 80a044c:	4620      	mov	r0, r4
 80a044e:	f7ff fe2a 	bl	80a00a6 <__cxa_guard_acquire>
 80a0452:	b130      	cbz	r0, 80a0462 <_Z12dailyCleanupv+0x2e>
 80a0454:	f001 ff9e 	bl	80a2394 <_ZN9TimeClass3dayEv>
 80a0458:	f8ca 0000 	str.w	r0, [sl]
 80a045c:	4620      	mov	r0, r4
 80a045e:	f7ff fe27 	bl	80a00b0 <__cxa_guard_release>
  if (Time.day() != currentDay) {
 80a0462:	f001 ff97 	bl	80a2394 <_ZN9TimeClass3dayEv>
 80a0466:	f8da 3000 	ldr.w	r3, [sl]
 80a046a:	4298      	cmp	r0, r3
 80a046c:	d03e      	beq.n	80a04ec <_Z12dailyCleanupv+0xb8>
 80a046e:	f7ff fe9f 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a0472:	f001 f845 	bl	80a1500 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
 80a0476:	b160      	cbz	r0, 80a0492 <_Z12dailyCleanupv+0x5e>
 80a0478:	2300      	movs	r3, #0
 80a047a:	f88d 3000 	strb.w	r3, [sp]
 80a047e:	4b1e      	ldr	r3, [pc, #120]	; (80a04f8 <_Z12dailyCleanupv+0xc4>)
 80a0480:	a802      	add	r0, sp, #8
 80a0482:	781b      	ldrb	r3, [r3, #0]
 80a0484:	4a1d      	ldr	r2, [pc, #116]	; (80a04fc <_Z12dailyCleanupv+0xc8>)
 80a0486:	491e      	ldr	r1, [pc, #120]	; (80a0500 <_Z12dailyCleanupv+0xcc>)
 80a0488:	f7ff fe3f 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a048c:	a803      	add	r0, sp, #12
 80a048e:	f7ff ff0a 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    sysStatus.verboseMode = false;
 80a0492:	2500      	movs	r5, #0
 80a0494:	4c1b      	ldr	r4, [pc, #108]	; (80a0504 <_Z12dailyCleanupv+0xd0>)
        while (_while() && !_condition()) {
 80a0496:	f247 582f 	movw	r8, #29999	; 0x752f
 80a049a:	70e5      	strb	r5, [r4, #3]
    sysStatus.resetCount = 0;
 80a049c:	6065      	str	r5, [r4, #4]
    Particle.syncTime();                                                // Set the clock each day
 80a049e:	f7ff fe19 	bl	80a00d4 <_ZN10CloudClass8syncTimeEv.isra.0>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a04a2:	4628      	mov	r0, r5
 80a04a4:	f000 fe9c 	bl	80a11e0 <hal_timer_millis>
        while (_while() && !_condition()) {
 80a04a8:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
 80a04ac:	4683      	mov	fp, r0
 80a04ae:	2000      	movs	r0, #0
 80a04b0:	f000 fe96 	bl	80a11e0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80a04b4:	ebb0 060b 	subs.w	r6, r0, fp
 80a04b8:	eb61 0705 	sbc.w	r7, r1, r5
        while (_while() && !_condition()) {
 80a04bc:	45b9      	cmp	r9, r7
 80a04be:	bf08      	it	eq
 80a04c0:	45b0      	cmpeq	r8, r6
 80a04c2:	d305      	bcc.n	80a04d0 <_Z12dailyCleanupv+0x9c>
    waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
 80a04c4:	f7ff fe10 	bl	80a00e8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
 80a04c8:	b910      	cbnz	r0, 80a04d0 <_Z12dailyCleanupv+0x9c>
            spark_process();
 80a04ca:	f001 f811 	bl	80a14f0 <spark_process>
        while (_while() && !_condition()) {
 80a04ce:	e7ee      	b.n	80a04ae <_Z12dailyCleanupv+0x7a>
 80a04d0:	f7ff fe0a 	bl	80a00e8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
    systemStatusWriteNeeded = true;
 80a04d4:	2201      	movs	r2, #1
 80a04d6:	4b0c      	ldr	r3, [pc, #48]	; (80a0508 <_Z12dailyCleanupv+0xd4>)
 80a04d8:	701a      	strb	r2, [r3, #0]
    currentDay = Time.day();
 80a04da:	f001 ff5b 	bl	80a2394 <_ZN9TimeClass3dayEv>
    if (currentDay >= 6) {                                              // Weekend!
 80a04de:	2805      	cmp	r0, #5
      sysStatus.powerOffHour = sysStatus.weekendOffHour;                // Set for weekend off hour
 80a04e0:	bfcc      	ite	gt
 80a04e2:	69e3      	ldrgt	r3, [r4, #28]
    else sysStatus.powerOffHour = sysStatus.weekdayOffHour;             // Set for weekday off hour
 80a04e4:	6a23      	ldrle	r3, [r4, #32]
    currentDay = Time.day();
 80a04e6:	f8ca 0000 	str.w	r0, [sl]
    else sysStatus.powerOffHour = sysStatus.weekdayOffHour;             // Set for weekday off hour
 80a04ea:	61a3      	str	r3, [r4, #24]
}
 80a04ec:	b005      	add	sp, #20
 80a04ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a04f2:	bf00      	nop
 80a04f4:	20000198 	.word	0x20000198
 80a04f8:	2000019c 	.word	0x2000019c
 80a04fc:	080a4a13 	.word	0x080a4a13
 80a0500:	080a4a1b 	.word	0x080a4a1b
 80a0504:	200001d4 	.word	0x200001d4
 80a0508:	20000204 	.word	0x20000204
 80a050c:	200001a0 	.word	0x200001a0

080a0510 <_Z22publishStateTransitionv>:
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80a0510:	230e      	movs	r3, #14
{
 80a0512:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80a0514:	4d14      	ldr	r5, [pc, #80]	; (80a0568 <_Z22publishStateTransitionv+0x58>)
 80a0516:	4915      	ldr	r1, [pc, #84]	; (80a056c <_Z22publishStateTransitionv+0x5c>)
 80a0518:	782a      	ldrb	r2, [r5, #0]
 80a051a:	4c15      	ldr	r4, [pc, #84]	; (80a0570 <_Z22publishStateTransitionv+0x60>)
 80a051c:	fb03 1202 	mla	r2, r3, r2, r1
 80a0520:	7820      	ldrb	r0, [r4, #0]
{
 80a0522:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80a0524:	fb03 1300 	mla	r3, r3, r0, r1
 80a0528:	9200      	str	r2, [sp, #0]
 80a052a:	2128      	movs	r1, #40	; 0x28
 80a052c:	4a11      	ldr	r2, [pc, #68]	; (80a0574 <_Z22publishStateTransitionv+0x64>)
 80a052e:	a804      	add	r0, sp, #16
 80a0530:	f001 f896 	bl	80a1660 <snprintf>
  oldState = state;
 80a0534:	782b      	ldrb	r3, [r5, #0]
 80a0536:	7023      	strb	r3, [r4, #0]
        return waitConditionWhile(_condition, []{ return true; });
 80a0538:	f7ff fe3a 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
  if (sysStatus.verboseMode) if (Particle.connected()) Particle.publish("State Transition",stateTransitionString,PRIVATE);
 80a053c:	4b0e      	ldr	r3, [pc, #56]	; (80a0578 <_Z22publishStateTransitionv+0x68>)
 80a053e:	78db      	ldrb	r3, [r3, #3]
 80a0540:	b17b      	cbz	r3, 80a0562 <_Z22publishStateTransitionv+0x52>
 80a0542:	f000 ffdd 	bl	80a1500 <spark_cloud_flag_connected>
 80a0546:	b160      	cbz	r0, 80a0562 <_Z22publishStateTransitionv+0x52>
 80a0548:	2300      	movs	r3, #0
 80a054a:	f88d 3000 	strb.w	r3, [sp]
 80a054e:	4b0b      	ldr	r3, [pc, #44]	; (80a057c <_Z22publishStateTransitionv+0x6c>)
 80a0550:	a802      	add	r0, sp, #8
 80a0552:	781b      	ldrb	r3, [r3, #0]
 80a0554:	490a      	ldr	r1, [pc, #40]	; (80a0580 <_Z22publishStateTransitionv+0x70>)
 80a0556:	aa04      	add	r2, sp, #16
 80a0558:	f7ff fdd7 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a055c:	a803      	add	r0, sp, #12
 80a055e:	f7ff fea2 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0562:	b00f      	add	sp, #60	; 0x3c
 80a0564:	bd30      	pop	{r4, r5, pc}
 80a0566:	bf00      	nop
 80a0568:	200001d0 	.word	0x200001d0
 80a056c:	20000024 	.word	0x20000024
 80a0570:	200001ca 	.word	0x200001ca
 80a0574:	080a4a29 	.word	0x080a4a29
 80a0578:	200001d4 	.word	0x200001d4
 80a057c:	2000019c 	.word	0x2000019c
 80a0580:	080a4a37 	.word	0x080a4a37

080a0584 <loop>:
{
 80a0584:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
 80a0586:	4da1      	ldr	r5, [pc, #644]	; (80a080c <loop+0x288>)
{
 80a0588:	b085      	sub	sp, #20
  switch(state) {
 80a058a:	782b      	ldrb	r3, [r5, #0]
 80a058c:	2b02      	cmp	r3, #2
 80a058e:	d032      	beq.n	80a05f6 <loop+0x72>
 80a0590:	2b03      	cmp	r3, #3
 80a0592:	d054      	beq.n	80a063e <loop+0xba>
 80a0594:	2b01      	cmp	r3, #1
 80a0596:	d13f      	bne.n	80a0618 <loop+0x94>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 80a0598:	4c9d      	ldr	r4, [pc, #628]	; (80a0810 <loop+0x28c>)
 80a059a:	78e2      	ldrb	r2, [r4, #3]
 80a059c:	b12a      	cbz	r2, 80a05aa <loop+0x26>
 80a059e:	4b9d      	ldr	r3, [pc, #628]	; (80a0814 <loop+0x290>)
 80a05a0:	781b      	ldrb	r3, [r3, #0]
 80a05a2:	2b01      	cmp	r3, #1
 80a05a4:	d001      	beq.n	80a05aa <loop+0x26>
 80a05a6:	f7ff ffb3 	bl	80a0510 <_Z22publishStateTransitionv>
 80a05aa:	f000 fdf1 	bl	80a1190 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
 80a05ae:	4b9a      	ldr	r3, [pc, #616]	; (80a0818 <loop+0x294>)
 80a05b0:	4a9a      	ldr	r2, [pc, #616]	; (80a081c <loop+0x298>)
 80a05b2:	681b      	ldr	r3, [r3, #0]
 80a05b4:	6812      	ldr	r2, [r2, #0]
 80a05b6:	4413      	add	r3, r2
 80a05b8:	4283      	cmp	r3, r0
 80a05ba:	d22d      	bcs.n	80a0618 <loop+0x94>
      if (sysStatus.resetCount <= 3) {                                  // First try simple reset
 80a05bc:	6863      	ldr	r3, [r4, #4]
 80a05be:	2b03      	cmp	r3, #3
 80a05c0:	f300 810f 	bgt.w	80a07e2 <loop+0x25e>
 80a05c4:	f7ff fdf4 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a05c8:	f000 ff9a 	bl	80a1500 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 80a05cc:	b160      	cbz	r0, 80a05e8 <loop+0x64>
 80a05ce:	2300      	movs	r3, #0
 80a05d0:	f88d 3000 	strb.w	r3, [sp]
 80a05d4:	4b92      	ldr	r3, [pc, #584]	; (80a0820 <loop+0x29c>)
 80a05d6:	4a93      	ldr	r2, [pc, #588]	; (80a0824 <loop+0x2a0>)
 80a05d8:	781b      	ldrb	r3, [r3, #0]
 80a05da:	a802      	add	r0, sp, #8
 80a05dc:	4992      	ldr	r1, [pc, #584]	; (80a0828 <loop+0x2a4>)
 80a05de:	f7ff fd94 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a05e2:	a803      	add	r0, sp, #12
 80a05e4:	f7ff fe5f 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 80a05e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a05ec:	f001 f858 	bl	80a16a0 <delay>
        System.reset();                                                 // Full Modem reset and reboots
 80a05f0:	f001 fd98 	bl	80a2124 <_ZN11SystemClass5resetEv>
 80a05f4:	e010      	b.n	80a0618 <loop+0x94>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 80a05f6:	4b86      	ldr	r3, [pc, #536]	; (80a0810 <loop+0x28c>)
 80a05f8:	78db      	ldrb	r3, [r3, #3]
 80a05fa:	b12b      	cbz	r3, 80a0608 <loop+0x84>
 80a05fc:	4b85      	ldr	r3, [pc, #532]	; (80a0814 <loop+0x290>)
 80a05fe:	781b      	ldrb	r3, [r3, #0]
 80a0600:	2b02      	cmp	r3, #2
 80a0602:	d001      	beq.n	80a0608 <loop+0x84>
 80a0604:	f7ff ff84 	bl	80a0510 <_Z22publishStateTransitionv>
    if (Time.hour() != currentHourlyPeriod) state = CONTROL_STATE;    // We want to report on the hour
 80a0608:	f001 feb8 	bl	80a237c <_ZN9TimeClass4hourEv>
 80a060c:	4b87      	ldr	r3, [pc, #540]	; (80a082c <loop+0x2a8>)
 80a060e:	681b      	ldr	r3, [r3, #0]
 80a0610:	4298      	cmp	r0, r3
 80a0612:	d001      	beq.n	80a0618 <loop+0x94>
 80a0614:	2303      	movs	r3, #3
    state = IDLE_STATE;
 80a0616:	702b      	strb	r3, [r5, #0]
  if (watchdogFlag) petWatchdog();                                      // Pet the watchdog if needed
 80a0618:	4b85      	ldr	r3, [pc, #532]	; (80a0830 <loop+0x2ac>)
 80a061a:	781b      	ldrb	r3, [r3, #0]
 80a061c:	b10b      	cbz	r3, 80a0622 <loop+0x9e>
 80a061e:	f7ff fda5 	bl	80a016c <_Z11petWatchdogv>
  if (systemStatusWriteNeeded) {                                        // Batch write updates to FRAM
 80a0622:	4c84      	ldr	r4, [pc, #528]	; (80a0834 <loop+0x2b0>)
 80a0624:	7823      	ldrb	r3, [r4, #0]
 80a0626:	b143      	cbz	r3, 80a063a <loop+0xb6>
    EEPROM.put(EEPROMaddr::systemStatusAddr,sysStatus);
 80a0628:	f002 fa82 	bl	80a2b30 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a062c:	2230      	movs	r2, #48	; 0x30
 80a062e:	2001      	movs	r0, #1
 80a0630:	4977      	ldr	r1, [pc, #476]	; (80a0810 <loop+0x28c>)
 80a0632:	f000 fdc5 	bl	80a11c0 <HAL_EEPROM_Put>
    systemStatusWriteNeeded = false;
 80a0636:	2300      	movs	r3, #0
 80a0638:	7023      	strb	r3, [r4, #0]
}
 80a063a:	b005      	add	sp, #20
 80a063c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 80a063e:	4c74      	ldr	r4, [pc, #464]	; (80a0810 <loop+0x28c>)
 80a0640:	78e3      	ldrb	r3, [r4, #3]
 80a0642:	b12b      	cbz	r3, 80a0650 <loop+0xcc>
 80a0644:	4b73      	ldr	r3, [pc, #460]	; (80a0814 <loop+0x290>)
 80a0646:	781b      	ldrb	r3, [r3, #0]
 80a0648:	2b03      	cmp	r3, #3
 80a064a:	d001      	beq.n	80a0650 <loop+0xcc>
 80a064c:	f7ff ff60 	bl	80a0510 <_Z22publishStateTransitionv>
 80a0650:	f000 ff56 	bl	80a1500 <spark_cloud_flag_connected>
    if (Particle.connected()) {
 80a0654:	2800      	cmp	r0, #0
 80a0656:	d031      	beq.n	80a06bc <loop+0x138>
      if (Time.hour() == 0) dailyCleanup();                             // Once a day, clean house
 80a0658:	f001 fe90 	bl	80a237c <_ZN9TimeClass4hourEv>
 80a065c:	b908      	cbnz	r0, 80a0662 <loop+0xde>
 80a065e:	f7ff fee9 	bl	80a0434 <_Z12dailyCleanupv>
  getSignalStrength();                                                  // Test signal strength if the cellular modem is on and ready
 80a0662:	f7ff fd5f 	bl	80a0124 <_Z17getSignalStrengthv>
      state = IDLE_STATE;                                               // Wait for Response
 80a0666:	2302      	movs	r3, #2
    if (sysStatus.fountainEnabled == 0) {
 80a0668:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80a066a:	4e73      	ldr	r6, [pc, #460]	; (80a0838 <loop+0x2b4>)
      state = ERROR_STATE;
 80a066c:	702b      	strb	r3, [r5, #0]
    if (sysStatus.fountainEnabled == 0) {
 80a066e:	bb5f      	cbnz	r7, 80a06c8 <loop+0x144>
      digitalWrite(pumpPowerPin,LOW);
 80a0670:	4639      	mov	r1, r7
 80a0672:	2002      	movs	r0, #2
      current.pumpPower = current.ledPower = false;
 80a0674:	8037      	strh	r7, [r6, #0]
      digitalWrite(pumpPowerPin,LOW);
 80a0676:	f002 fa1c 	bl	80a2ab2 <digitalWrite>
      strncpy(pumpPowerStr, "Pump Off", sizeof(pumpPowerStr));
 80a067a:	2210      	movs	r2, #16
 80a067c:	496f      	ldr	r1, [pc, #444]	; (80a083c <loop+0x2b8>)
 80a067e:	4870      	ldr	r0, [pc, #448]	; (80a0840 <loop+0x2bc>)
 80a0680:	f003 fcd5 	bl	80a402e <strncpy>
      digitalWrite(ledPowerPin, LOW);
 80a0684:	4639      	mov	r1, r7
 80a0686:	2007      	movs	r0, #7
 80a0688:	f002 fa13 	bl	80a2ab2 <digitalWrite>
      strncpy(ledPowerStr , "Led Off", sizeof(pumpPowerStr));
 80a068c:	2210      	movs	r2, #16
 80a068e:	496d      	ldr	r1, [pc, #436]	; (80a0844 <loop+0x2c0>)
 80a0690:	486d      	ldr	r0, [pc, #436]	; (80a0848 <loop+0x2c4>)
 80a0692:	f003 fccc 	bl	80a402e <strncpy>
 80a0696:	f7ff fd8b 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a069a:	f000 ff31 	bl	80a1500 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("Control","Fountain Not Enabled Turned Everything Off",PRIVATE);
 80a069e:	2800      	cmp	r0, #0
 80a06a0:	d043      	beq.n	80a072a <loop+0x1a6>
 80a06a2:	4b5f      	ldr	r3, [pc, #380]	; (80a0820 <loop+0x29c>)
 80a06a4:	f88d 7000 	strb.w	r7, [sp]
 80a06a8:	781b      	ldrb	r3, [r3, #0]
 80a06aa:	4a68      	ldr	r2, [pc, #416]	; (80a084c <loop+0x2c8>)
          if (Particle.connected()) Particle.publish("Control", "Turned on the Leds",PRIVATE);
 80a06ac:	a802      	add	r0, sp, #8
 80a06ae:	4968      	ldr	r1, [pc, #416]	; (80a0850 <loop+0x2cc>)
 80a06b0:	f7ff fd2b 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a06b4:	a803      	add	r0, sp, #12
 80a06b6:	f7ff fdf6 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a06ba:	e036      	b.n	80a072a <loop+0x1a6>
 80a06bc:	f000 fd68 	bl	80a1190 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80a06c0:	4b55      	ldr	r3, [pc, #340]	; (80a0818 <loop+0x294>)
 80a06c2:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;
 80a06c4:	2301      	movs	r3, #1
 80a06c6:	e7cf      	b.n	80a0668 <loop+0xe4>
      if (current.pumpPower) {                                            // The pump is on - check if any changes needed
 80a06c8:	7877      	ldrb	r7, [r6, #1]
 80a06ca:	2f00      	cmp	r7, #0
 80a06cc:	d04c      	beq.n	80a0768 <loop+0x1e4>
        if (Time.hour() >= sysStatus.powerOffHour || Time.hour() < sysStatus.pumpOnHour) {       // Everything should be off - outside hours
 80a06ce:	f001 fe55 	bl	80a237c <_ZN9TimeClass4hourEv>
 80a06d2:	69a3      	ldr	r3, [r4, #24]
 80a06d4:	4298      	cmp	r0, r3
 80a06d6:	db1e      	blt.n	80a0716 <loop+0x192>
          current.pumpPower = current.ledPower = false;
 80a06d8:	2400      	movs	r4, #0
          digitalWrite(pumpPowerPin,LOW);
 80a06da:	2002      	movs	r0, #2
 80a06dc:	4621      	mov	r1, r4
          current.pumpPower = current.ledPower = false;
 80a06de:	8034      	strh	r4, [r6, #0]
          digitalWrite(pumpPowerPin,LOW);
 80a06e0:	f002 f9e7 	bl	80a2ab2 <digitalWrite>
          strncpy(pumpPowerStr, "Pump Off", sizeof(pumpPowerStr));
 80a06e4:	2210      	movs	r2, #16
 80a06e6:	4955      	ldr	r1, [pc, #340]	; (80a083c <loop+0x2b8>)
 80a06e8:	4855      	ldr	r0, [pc, #340]	; (80a0840 <loop+0x2bc>)
 80a06ea:	f003 fca0 	bl	80a402e <strncpy>
          digitalWrite(ledPowerPin, LOW);
 80a06ee:	4621      	mov	r1, r4
 80a06f0:	2007      	movs	r0, #7
 80a06f2:	f002 f9de 	bl	80a2ab2 <digitalWrite>
          strncpy(ledPowerStr , "Led Off", sizeof(pumpPowerStr));
 80a06f6:	2210      	movs	r2, #16
 80a06f8:	4952      	ldr	r1, [pc, #328]	; (80a0844 <loop+0x2c0>)
 80a06fa:	4853      	ldr	r0, [pc, #332]	; (80a0848 <loop+0x2c4>)
 80a06fc:	f003 fc97 	bl	80a402e <strncpy>
 80a0700:	f7ff fd56 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a0704:	f000 fefc 	bl	80a1500 <spark_cloud_flag_connected>
          if (Particle.connected()) Particle.publish("Control","Turned everything off",PRIVATE);
 80a0708:	b178      	cbz	r0, 80a072a <loop+0x1a6>
 80a070a:	4b45      	ldr	r3, [pc, #276]	; (80a0820 <loop+0x29c>)
 80a070c:	f88d 4000 	strb.w	r4, [sp]
 80a0710:	781b      	ldrb	r3, [r3, #0]
 80a0712:	4a50      	ldr	r2, [pc, #320]	; (80a0854 <loop+0x2d0>)
 80a0714:	e7ca      	b.n	80a06ac <loop+0x128>
        if (Time.hour() >= sysStatus.powerOffHour || Time.hour() < sysStatus.pumpOnHour) {       // Everything should be off - outside hours
 80a0716:	f001 fe31 	bl	80a237c <_ZN9TimeClass4hourEv>
 80a071a:	6923      	ldr	r3, [r4, #16]
 80a071c:	4298      	cmp	r0, r3
 80a071e:	dbdb      	blt.n	80a06d8 <loop+0x154>
        else if (Time.hour() >= sysStatus.ledOnHour && !current.ledPower) {// The pump is on - do we need to turn on the leds
 80a0720:	f001 fe2c 	bl	80a237c <_ZN9TimeClass4hourEv>
 80a0724:	6963      	ldr	r3, [r4, #20]
 80a0726:	4298      	cmp	r0, r3
 80a0728:	da05      	bge.n	80a0736 <loop+0x1b2>
    currentHourlyPeriod = Time.hour();
 80a072a:	f001 fe27 	bl	80a237c <_ZN9TimeClass4hourEv>
 80a072e:	4b3f      	ldr	r3, [pc, #252]	; (80a082c <loop+0x2a8>)
 80a0730:	6018      	str	r0, [r3, #0]
    state = IDLE_STATE;
 80a0732:	2302      	movs	r3, #2
 80a0734:	e76f      	b.n	80a0616 <loop+0x92>
        else if (Time.hour() >= sysStatus.ledOnHour && !current.ledPower) {// The pump is on - do we need to turn on the leds
 80a0736:	7834      	ldrb	r4, [r6, #0]
 80a0738:	2c00      	cmp	r4, #0
 80a073a:	d1f6      	bne.n	80a072a <loop+0x1a6>
          current.ledPower = true;
 80a073c:	2101      	movs	r1, #1
          digitalWrite(ledPowerPin, HIGH);
 80a073e:	2007      	movs	r0, #7
          current.ledPower = true;
 80a0740:	7031      	strb	r1, [r6, #0]
          digitalWrite(ledPowerPin, HIGH);
 80a0742:	f002 f9b6 	bl	80a2ab2 <digitalWrite>
          strncpy(ledPowerStr , "Led On", sizeof(pumpPowerStr));
 80a0746:	2210      	movs	r2, #16
 80a0748:	4943      	ldr	r1, [pc, #268]	; (80a0858 <loop+0x2d4>)
 80a074a:	483f      	ldr	r0, [pc, #252]	; (80a0848 <loop+0x2c4>)
 80a074c:	f003 fc6f 	bl	80a402e <strncpy>
 80a0750:	f7ff fd2e 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a0754:	f000 fed4 	bl	80a1500 <spark_cloud_flag_connected>
          if (Particle.connected()) Particle.publish("Control", "Turned on the LEDs",PRIVATE);
 80a0758:	2800      	cmp	r0, #0
 80a075a:	d0e6      	beq.n	80a072a <loop+0x1a6>
 80a075c:	4b30      	ldr	r3, [pc, #192]	; (80a0820 <loop+0x29c>)
 80a075e:	f88d 4000 	strb.w	r4, [sp]
 80a0762:	781b      	ldrb	r3, [r3, #0]
 80a0764:	4a3d      	ldr	r2, [pc, #244]	; (80a085c <loop+0x2d8>)
 80a0766:	e7a1      	b.n	80a06ac <loop+0x128>
        if (Time.hour() >= sysStatus.pumpOnHour) {
 80a0768:	f001 fe08 	bl	80a237c <_ZN9TimeClass4hourEv>
 80a076c:	6923      	ldr	r3, [r4, #16]
 80a076e:	4298      	cmp	r0, r3
 80a0770:	db1b      	blt.n	80a07aa <loop+0x226>
          current.pumpPower = true;
 80a0772:	2301      	movs	r3, #1
          analogWrite(pumpPowerPin , sysStatus.pumpPWMvalue);
 80a0774:	2002      	movs	r0, #2
 80a0776:	6a61      	ldr	r1, [r4, #36]	; 0x24
          current.pumpPower = true;
 80a0778:	7073      	strb	r3, [r6, #1]
          analogWrite(pumpPowerPin , sysStatus.pumpPWMvalue);
 80a077a:	f002 f9b3 	bl	80a2ae4 <_Z11analogWritetm>
          strncpy(pumpPowerStr , "Pump On", sizeof(pumpPowerStr));
 80a077e:	2210      	movs	r2, #16
 80a0780:	4937      	ldr	r1, [pc, #220]	; (80a0860 <loop+0x2dc>)
 80a0782:	482f      	ldr	r0, [pc, #188]	; (80a0840 <loop+0x2bc>)
 80a0784:	f003 fc53 	bl	80a402e <strncpy>
 80a0788:	f7ff fd12 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a078c:	f000 feb8 	bl	80a1500 <spark_cloud_flag_connected>
          if (Particle.connected()) Particle.publish("Control", "Turned on the Pump",PRIVATE);
 80a0790:	b158      	cbz	r0, 80a07aa <loop+0x226>
 80a0792:	4b23      	ldr	r3, [pc, #140]	; (80a0820 <loop+0x29c>)
 80a0794:	f88d 7000 	strb.w	r7, [sp]
 80a0798:	a802      	add	r0, sp, #8
 80a079a:	781b      	ldrb	r3, [r3, #0]
 80a079c:	4a31      	ldr	r2, [pc, #196]	; (80a0864 <loop+0x2e0>)
 80a079e:	492c      	ldr	r1, [pc, #176]	; (80a0850 <loop+0x2cc>)
 80a07a0:	f7ff fcb3 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a07a4:	a803      	add	r0, sp, #12
 80a07a6:	f7ff fd7e 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (Time.hour() >= sysStatus.ledOnHour) {                         // Need to turn on the Leds as well?
 80a07aa:	f001 fde7 	bl	80a237c <_ZN9TimeClass4hourEv>
 80a07ae:	6963      	ldr	r3, [r4, #20]
 80a07b0:	4298      	cmp	r0, r3
 80a07b2:	dbba      	blt.n	80a072a <loop+0x1a6>
          current.ledPower = true;
 80a07b4:	2101      	movs	r1, #1
          digitalWrite(ledPowerPin,HIGH);
 80a07b6:	2007      	movs	r0, #7
          current.ledPower = true;
 80a07b8:	7031      	strb	r1, [r6, #0]
          digitalWrite(ledPowerPin,HIGH);
 80a07ba:	f002 f97a 	bl	80a2ab2 <digitalWrite>
          strncpy(ledPowerStr,"Led On",sizeof(ledPowerStr));
 80a07be:	2210      	movs	r2, #16
 80a07c0:	4925      	ldr	r1, [pc, #148]	; (80a0858 <loop+0x2d4>)
 80a07c2:	4821      	ldr	r0, [pc, #132]	; (80a0848 <loop+0x2c4>)
 80a07c4:	f003 fc33 	bl	80a402e <strncpy>
 80a07c8:	f7ff fcf2 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a07cc:	f000 fe98 	bl	80a1500 <spark_cloud_flag_connected>
          if (Particle.connected()) Particle.publish("Control", "Turned on the Leds",PRIVATE);
 80a07d0:	2800      	cmp	r0, #0
 80a07d2:	d0aa      	beq.n	80a072a <loop+0x1a6>
 80a07d4:	2300      	movs	r3, #0
 80a07d6:	f88d 3000 	strb.w	r3, [sp]
 80a07da:	4b11      	ldr	r3, [pc, #68]	; (80a0820 <loop+0x29c>)
 80a07dc:	4a22      	ldr	r2, [pc, #136]	; (80a0868 <loop+0x2e4>)
 80a07de:	781b      	ldrb	r3, [r3, #0]
 80a07e0:	e764      	b.n	80a06ac <loop+0x128>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) {       //It has been more than two hours since a sucessful hook response
 80a07e2:	f001 fdba 	bl	80a235a <_ZN9TimeClass3nowEv>
 80a07e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a07e8:	1ac0      	subs	r0, r0, r3
 80a07ea:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 80a07ee:	d93f      	bls.n	80a0870 <loop+0x2ec>
 80a07f0:	f7ff fcde 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a07f4:	f000 fe84 	bl	80a1500 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Took long since last webhook response - Reset", PRIVATE);  // Broadcast Reset Action
 80a07f8:	2800      	cmp	r0, #0
 80a07fa:	f43f aef5 	beq.w	80a05e8 <loop+0x64>
 80a07fe:	2300      	movs	r3, #0
 80a0800:	f88d 3000 	strb.w	r3, [sp]
 80a0804:	4b06      	ldr	r3, [pc, #24]	; (80a0820 <loop+0x29c>)
 80a0806:	4a19      	ldr	r2, [pc, #100]	; (80a086c <loop+0x2e8>)
 80a0808:	781b      	ldrb	r3, [r3, #0]
 80a080a:	e6e6      	b.n	80a05da <loop+0x56>
 80a080c:	200001d0 	.word	0x200001d0
 80a0810:	200001d4 	.word	0x200001d4
 80a0814:	200001ca 	.word	0x200001ca
 80a0818:	200001cc 	.word	0x200001cc
 80a081c:	20000020 	.word	0x20000020
 80a0820:	2000019c 	.word	0x2000019c
 80a0824:	080a4aca 	.word	0x080a4aca
 80a0828:	080a4ade 	.word	0x080a4ade
 80a082c:	200001bc 	.word	0x200001bc
 80a0830:	20000205 	.word	0x20000205
 80a0834:	20000204 	.word	0x20000204
 80a0838:	200001a8 	.word	0x200001a8
 80a083c:	080a4a0a 	.word	0x080a4a0a
 80a0840:	20000010 	.word	0x20000010
 80a0844:	080a4a48 	.word	0x080a4a48
 80a0848:	20000000 	.word	0x20000000
 80a084c:	080a4a50 	.word	0x080a4a50
 80a0850:	080a4c9e 	.word	0x080a4c9e
 80a0854:	080a4a7b 	.word	0x080a4a7b
 80a0858:	080a49ee 	.word	0x080a49ee
 80a085c:	080a4a91 	.word	0x080a4a91
 80a0860:	080a49f5 	.word	0x080a49f5
 80a0864:	080a4aa4 	.word	0x080a4aa4
 80a0868:	080a4ab7 	.word	0x080a4ab7
 80a086c:	080a4ae4 	.word	0x080a4ae4
 80a0870:	f7ff fc9e 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a0874:	f000 fe44 	bl	80a1500 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Too many resets", PRIVATE);            // Brodcase Reset Action
 80a0878:	b160      	cbz	r0, 80a0894 <loop+0x310>
 80a087a:	2300      	movs	r3, #0
 80a087c:	f88d 3000 	strb.w	r3, [sp]
 80a0880:	4b0b      	ldr	r3, [pc, #44]	; (80a08b0 <loop+0x32c>)
 80a0882:	a802      	add	r0, sp, #8
 80a0884:	781b      	ldrb	r3, [r3, #0]
 80a0886:	4a0b      	ldr	r2, [pc, #44]	; (80a08b4 <loop+0x330>)
 80a0888:	490b      	ldr	r1, [pc, #44]	; (80a08b8 <loop+0x334>)
 80a088a:	f7ff fc3e 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a088e:	a803      	add	r0, sp, #12
 80a0890:	f7ff fd09 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 80a0894:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0898:	f000 ff02 	bl	80a16a0 <delay>
        sysStatus.resetCount = 0;                                       // Zero the ResetCount
 80a089c:	2300      	movs	r3, #0
 80a089e:	6063      	str	r3, [r4, #4]
        EEPROM.put(EEPROMaddr::systemStatusAddr,sysStatus);
 80a08a0:	f002 f946 	bl	80a2b30 <_Z21__fetch_global_EEPROMv>
 80a08a4:	2230      	movs	r2, #48	; 0x30
 80a08a6:	2001      	movs	r0, #1
 80a08a8:	4904      	ldr	r1, [pc, #16]	; (80a08bc <loop+0x338>)
 80a08aa:	f000 fc89 	bl	80a11c0 <HAL_EEPROM_Put>
 80a08ae:	e69f      	b.n	80a05f0 <loop+0x6c>
 80a08b0:	2000019c 	.word	0x2000019c
 80a08b4:	080a4b12 	.word	0x080a4b12
 80a08b8:	080a4ade 	.word	0x080a4ade
 80a08bc:	200001d4 	.word	0x200001d4

080a08c0 <_Z11setTimeZone6String>:
{
 80a08c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a08c4:	b0ca      	sub	sp, #296	; 0x128
 80a08c6:	4680      	mov	r8, r0
  Particle.syncTime();                                                  // Set the clock each day
 80a08c8:	f7ff fc04 	bl	80a00d4 <_ZN10CloudClass8syncTimeEv.isra.0>
        return hal_timer_millis(nullptr);
 80a08cc:	2000      	movs	r0, #0
 80a08ce:	f000 fc87 	bl	80a11e0 <hal_timer_millis>
 80a08d2:	f04f 0a00 	mov.w	sl, #0
 80a08d6:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
 80a08d8:	f247 562f 	movw	r6, #29999	; 0x752f
 80a08dc:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
 80a08de:	2000      	movs	r0, #0
 80a08e0:	f000 fc7e 	bl	80a11e0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80a08e4:	ebb0 0409 	subs.w	r4, r0, r9
 80a08e8:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
 80a08ec:	42af      	cmp	r7, r5
 80a08ee:	bf08      	it	eq
 80a08f0:	42a6      	cmpeq	r6, r4
 80a08f2:	d305      	bcc.n	80a0900 <_Z11setTimeZone6String+0x40>
  waitFor(Particle.syncTimeDone,30000);                                 // Wait for up to 30 seconds for the SyncTime to complete
 80a08f4:	f7ff fbf8 	bl	80a00e8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
 80a08f8:	b910      	cbnz	r0, 80a0900 <_Z11setTimeZone6String+0x40>
            spark_process();
 80a08fa:	f000 fdf9 	bl	80a14f0 <spark_process>
        while (_while() && !_condition()) {
 80a08fe:	e7ee      	b.n	80a08de <_Z11setTimeZone6String+0x1e>
 80a0900:	f7ff fbf2 	bl	80a00e8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                 // Looks for the first integer and interprets it
 80a0904:	220a      	movs	r2, #10
 80a0906:	f8d8 0000 	ldr.w	r0, [r8]
 80a090a:	a903      	add	r1, sp, #12
 80a090c:	f003 fc1c 	bl	80a4148 <strtol>
  if ((tempTimeZoneOffset < -12) || (tempTimeZoneOffset > 12)) return 0; // Make sure it falls in a valid range or send a "fail" result
 80a0910:	f100 030c 	add.w	r3, r0, #12
 80a0914:	b2db      	uxtb	r3, r3
 80a0916:	2b18      	cmp	r3, #24
 80a0918:	d85e      	bhi.n	80a09d8 <_Z11setTimeZone6String+0x118>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                 // Looks for the first integer and interprets it
 80a091a:	b244      	sxtb	r4, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
 80a091c:	4620      	mov	r0, r4
 80a091e:	f002 fe29 	bl	80a3574 <__aeabi_i2f>
 80a0922:	4b31      	ldr	r3, [pc, #196]	; (80a09e8 <_Z11setTimeZone6String+0x128>)
 80a0924:	6098      	str	r0, [r3, #8]
  Time.zone(sysStatus.timezone);
 80a0926:	f001 fc77 	bl	80a2218 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                       // Need to store to FRAM back in the main loop
 80a092a:	2201      	movs	r2, #1
 80a092c:	4b2f      	ldr	r3, [pc, #188]	; (80a09ec <_Z11setTimeZone6String+0x12c>)
 80a092e:	701a      	strb	r2, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 80a0930:	f001 fd4c 	bl	80a23cc <_ZN9TimeClass5localEv>
 80a0934:	4605      	mov	r5, r0
 80a0936:	f001 fd10 	bl	80a235a <_ZN9TimeClass3nowEv>
 80a093a:	1a28      	subs	r0, r5, r0
 80a093c:	f002 fac4 	bl	80a2ec8 <__aeabi_i2d>
 80a0940:	a327      	add	r3, pc, #156	; (adr r3, 80a09e0 <_Z11setTimeZone6String+0x120>)
 80a0942:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0946:	f002 fc53 	bl	80a31f0 <__aeabi_ddiv>
 80a094a:	4a29      	ldr	r2, [pc, #164]	; (80a09f0 <_Z11setTimeZone6String+0x130>)
 80a094c:	e9cd 0100 	strd	r0, r1, [sp]
 80a0950:	210a      	movs	r1, #10
 80a0952:	4828      	ldr	r0, [pc, #160]	; (80a09f4 <_Z11setTimeZone6String+0x134>)
 80a0954:	f000 fe84 	bl	80a1660 <snprintf>
 80a0958:	f000 fdd2 	bl	80a1500 <spark_cloud_flag_connected>
  if (Particle.connected()) {
 80a095c:	2800      	cmp	r0, #0
 80a095e:	d034      	beq.n	80a09ca <_Z11setTimeZone6String+0x10a>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 80a0960:	4623      	mov	r3, r4
 80a0962:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0966:	4a24      	ldr	r2, [pc, #144]	; (80a09f8 <_Z11setTimeZone6String+0x138>)
 80a0968:	a80a      	add	r0, sp, #40	; 0x28
 80a096a:	f000 fe79 	bl	80a1660 <snprintf>
        return waitConditionWhile(_condition, []{ return true; });
 80a096e:	f7ff fc1f 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a0972:	f000 fdc5 	bl	80a1500 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
 80a0976:	b160      	cbz	r0, 80a0992 <_Z11setTimeZone6String+0xd2>
 80a0978:	2300      	movs	r3, #0
 80a097a:	f88d 3000 	strb.w	r3, [sp]
 80a097e:	4b1f      	ldr	r3, [pc, #124]	; (80a09fc <_Z11setTimeZone6String+0x13c>)
 80a0980:	a806      	add	r0, sp, #24
 80a0982:	781b      	ldrb	r3, [r3, #0]
 80a0984:	491e      	ldr	r1, [pc, #120]	; (80a0a00 <_Z11setTimeZone6String+0x140>)
 80a0986:	aa0a      	add	r2, sp, #40	; 0x28
 80a0988:	f7ff fbbf 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a098c:	a807      	add	r0, sp, #28
 80a098e:	f7ff fc8a 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0992:	f7ff fc0d 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a0996:	f000 fdb3 	bl	80a1500 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
 80a099a:	b1b0      	cbz	r0, 80a09ca <_Z11setTimeZone6String+0x10a>
 80a099c:	f001 fcdd 	bl	80a235a <_ZN9TimeClass3nowEv>
 80a09a0:	4602      	mov	r2, r0
 80a09a2:	17c3      	asrs	r3, r0, #31
 80a09a4:	a806      	add	r0, sp, #24
 80a09a6:	f001 fc83 	bl	80a22b0 <_ZN9TimeClass7timeStrEx>
 80a09aa:	2300      	movs	r3, #0
 80a09ac:	f88d 3000 	strb.w	r3, [sp]
 80a09b0:	4b12      	ldr	r3, [pc, #72]	; (80a09fc <_Z11setTimeZone6String+0x13c>)
 80a09b2:	9a06      	ldr	r2, [sp, #24]
 80a09b4:	781b      	ldrb	r3, [r3, #0]
 80a09b6:	4912      	ldr	r1, [pc, #72]	; (80a0a00 <_Z11setTimeZone6String+0x140>)
 80a09b8:	a804      	add	r0, sp, #16
 80a09ba:	f7ff fba6 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a09be:	a805      	add	r0, sp, #20
 80a09c0:	f7ff fc71 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a09c4:	a806      	add	r0, sp, #24
 80a09c6:	f001 fb14 	bl	80a1ff2 <_ZN6StringD1Ev>
  state = CONTROL_STATE;
 80a09ca:	2203      	movs	r2, #3
  return 1;
 80a09cc:	2001      	movs	r0, #1
  state = CONTROL_STATE;
 80a09ce:	4b0d      	ldr	r3, [pc, #52]	; (80a0a04 <_Z11setTimeZone6String+0x144>)
 80a09d0:	701a      	strb	r2, [r3, #0]
}
 80a09d2:	b04a      	add	sp, #296	; 0x128
 80a09d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((tempTimeZoneOffset < -12) || (tempTimeZoneOffset > 12)) return 0; // Make sure it falls in a valid range or send a "fail" result
 80a09d8:	2000      	movs	r0, #0
 80a09da:	e7fa      	b.n	80a09d2 <_Z11setTimeZone6String+0x112>
 80a09dc:	f3af 8000 	nop.w
 80a09e0:	00000000 	.word	0x00000000
 80a09e4:	40ac2000 	.word	0x40ac2000
 80a09e8:	200001d4 	.word	0x200001d4
 80a09ec:	20000204 	.word	0x20000204
 80a09f0:	080a4b30 	.word	0x080a4b30
 80a09f4:	200001c0 	.word	0x200001c0
 80a09f8:	080a4b3a 	.word	0x080a4b3a
 80a09fc:	2000019c 	.word	0x2000019c
 80a0a00:	080a4b4e 	.word	0x080a4b4e
 80a0a04:	200001d0 	.word	0x200001d0

080a0a08 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0a08:	b530      	push	{r4, r5, lr}
 80a0a0a:	b0cb      	sub	sp, #300	; 0x12c
 80a0a0c:	4604      	mov	r4, r0
  time_t t = Time.now();
 80a0a0e:	f001 fca4 	bl	80a235a <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 80a0a12:	220a      	movs	r2, #10
  time_t t = Time.now();
 80a0a14:	4605      	mov	r5, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 80a0a16:	a903      	add	r1, sp, #12
 80a0a18:	6820      	ldr	r0, [r4, #0]
 80a0a1a:	f003 fb95 	bl	80a4148 <strtol>
  if ((tempDSTOffset < 0) || (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0a1e:	b2c3      	uxtb	r3, r0
 80a0a20:	2b02      	cmp	r3, #2
 80a0a22:	d866      	bhi.n	80a0af2 <_Z12setDSTOffset6String+0xea>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
 80a0a24:	b240      	sxtb	r0, r0
 80a0a26:	f002 fda5 	bl	80a3574 <__aeabi_i2f>
 80a0a2a:	4604      	mov	r4, r0
 80a0a2c:	f001 fc12 	bl	80a2254 <_ZN9TimeClass12setDSTOffsetEf>
  systemStatusWriteNeeded = true;
 80a0a30:	2201      	movs	r2, #1
  sysStatus.dstOffset = (float)tempDSTOffset;
 80a0a32:	4b33      	ldr	r3, [pc, #204]	; (80a0b00 <_Z12setDSTOffset6String+0xf8>)
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 80a0a34:	4620      	mov	r0, r4
  sysStatus.dstOffset = (float)tempDSTOffset;
 80a0a36:	60dc      	str	r4, [r3, #12]
  systemStatusWriteNeeded = true;
 80a0a38:	4b32      	ldr	r3, [pc, #200]	; (80a0b04 <_Z12setDSTOffset6String+0xfc>)
 80a0a3a:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 80a0a3c:	f002 fa56 	bl	80a2eec <__aeabi_f2d>
 80a0a40:	4a31      	ldr	r2, [pc, #196]	; (80a0b08 <_Z12setDSTOffset6String+0x100>)
 80a0a42:	e9cd 0100 	strd	r0, r1, [sp]
 80a0a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0a4a:	a80a      	add	r0, sp, #40	; 0x28
 80a0a4c:	f000 fe08 	bl	80a1660 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 80a0a50:	f001 fc66 	bl	80a2320 <_ZN9TimeClass7isValidEv>
 80a0a54:	b128      	cbz	r0, 80a0a62 <_Z12setDSTOffset6String+0x5a>
 80a0a56:	f7ff fc07 	bl	80a0268 <_Z8isDSTusav>
 80a0a5a:	2800      	cmp	r0, #0
 80a0a5c:	d046      	beq.n	80a0aec <_Z12setDSTOffset6String+0xe4>
 80a0a5e:	f001 fc13 	bl	80a2288 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 80a0a62:	f001 fcb3 	bl	80a23cc <_ZN9TimeClass5localEv>
 80a0a66:	4604      	mov	r4, r0
 80a0a68:	f001 fc77 	bl	80a235a <_ZN9TimeClass3nowEv>
 80a0a6c:	1a20      	subs	r0, r4, r0
 80a0a6e:	f002 fa2b 	bl	80a2ec8 <__aeabi_i2d>
 80a0a72:	a321      	add	r3, pc, #132	; (adr r3, 80a0af8 <_Z12setDSTOffset6String+0xf0>)
 80a0a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a78:	f002 fbba 	bl	80a31f0 <__aeabi_ddiv>
 80a0a7c:	4a23      	ldr	r2, [pc, #140]	; (80a0b0c <_Z12setDSTOffset6String+0x104>)
 80a0a7e:	e9cd 0100 	strd	r0, r1, [sp]
 80a0a82:	210a      	movs	r1, #10
 80a0a84:	4822      	ldr	r0, [pc, #136]	; (80a0b10 <_Z12setDSTOffset6String+0x108>)
 80a0a86:	f000 fdeb 	bl	80a1660 <snprintf>
 80a0a8a:	f000 fd39 	bl	80a1500 <spark_cloud_flag_connected>
  if (Particle.connected()) {
 80a0a8e:	b338      	cbz	r0, 80a0ae0 <_Z12setDSTOffset6String+0xd8>
 80a0a90:	f000 fd36 	bl	80a1500 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
 80a0a94:	b160      	cbz	r0, 80a0ab0 <_Z12setDSTOffset6String+0xa8>
 80a0a96:	2300      	movs	r3, #0
 80a0a98:	f88d 3000 	strb.w	r3, [sp]
 80a0a9c:	4b1d      	ldr	r3, [pc, #116]	; (80a0b14 <_Z12setDSTOffset6String+0x10c>)
 80a0a9e:	a806      	add	r0, sp, #24
 80a0aa0:	781b      	ldrb	r3, [r3, #0]
 80a0aa2:	491d      	ldr	r1, [pc, #116]	; (80a0b18 <_Z12setDSTOffset6String+0x110>)
 80a0aa4:	aa0a      	add	r2, sp, #40	; 0x28
 80a0aa6:	f7ff fb30 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a0aaa:	a807      	add	r0, sp, #28
 80a0aac:	f7ff fbfb 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0ab0:	f000 fd26 	bl	80a1500 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Time",Time.timeStr(t), PRIVATE);
 80a0ab4:	b1a0      	cbz	r0, 80a0ae0 <_Z12setDSTOffset6String+0xd8>
 80a0ab6:	462a      	mov	r2, r5
 80a0ab8:	17eb      	asrs	r3, r5, #31
 80a0aba:	a806      	add	r0, sp, #24
 80a0abc:	f001 fbf8 	bl	80a22b0 <_ZN9TimeClass7timeStrEx>
 80a0ac0:	2300      	movs	r3, #0
 80a0ac2:	f88d 3000 	strb.w	r3, [sp]
 80a0ac6:	4b13      	ldr	r3, [pc, #76]	; (80a0b14 <_Z12setDSTOffset6String+0x10c>)
 80a0ac8:	9a06      	ldr	r2, [sp, #24]
 80a0aca:	781b      	ldrb	r3, [r3, #0]
 80a0acc:	4912      	ldr	r1, [pc, #72]	; (80a0b18 <_Z12setDSTOffset6String+0x110>)
 80a0ace:	a804      	add	r0, sp, #16
 80a0ad0:	f7ff fb1b 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a0ad4:	a805      	add	r0, sp, #20
 80a0ad6:	f7ff fbe6 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0ada:	a806      	add	r0, sp, #24
 80a0adc:	f001 fa89 	bl	80a1ff2 <_ZN6StringD1Ev>
  state = CONTROL_STATE;
 80a0ae0:	2203      	movs	r2, #3
  return 1;
 80a0ae2:	2001      	movs	r0, #1
  state = CONTROL_STATE;
 80a0ae4:	4b0d      	ldr	r3, [pc, #52]	; (80a0b1c <_Z12setDSTOffset6String+0x114>)
 80a0ae6:	701a      	strb	r2, [r3, #0]
}
 80a0ae8:	b04b      	add	sp, #300	; 0x12c
 80a0aea:	bd30      	pop	{r4, r5, pc}
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 80a0aec:	f001 fbd8 	bl	80a22a0 <_ZN9TimeClass6endDSTEv>
 80a0af0:	e7b7      	b.n	80a0a62 <_Z12setDSTOffset6String+0x5a>
  if ((tempDSTOffset < 0) || (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0af2:	2000      	movs	r0, #0
 80a0af4:	e7f8      	b.n	80a0ae8 <_Z12setDSTOffset6String+0xe0>
 80a0af6:	bf00      	nop
 80a0af8:	00000000 	.word	0x00000000
 80a0afc:	40ac2000 	.word	0x40ac2000
 80a0b00:	200001d4 	.word	0x200001d4
 80a0b04:	20000204 	.word	0x20000204
 80a0b08:	080a4b53 	.word	0x080a4b53
 80a0b0c:	080a4b30 	.word	0x080a4b30
 80a0b10:	200001c0 	.word	0x200001c0
 80a0b14:	2000019c 	.word	0x2000019c
 80a0b18:	080a4b4e 	.word	0x080a4b4e
 80a0b1c:	200001d0 	.word	0x200001d0

080a0b20 <_Z13setPumpOnHour6String>:
int setPumpOnHour (String command) {                                    // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0b20:	b500      	push	{lr}
 80a0b22:	b0c7      	sub	sp, #284	; 0x11c
  int8_t tempHour = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
 80a0b24:	220a      	movs	r2, #10
 80a0b26:	6800      	ldr	r0, [r0, #0]
 80a0b28:	a903      	add	r1, sp, #12
 80a0b2a:	f003 fb0d 	bl	80a4148 <strtol>
  if ((tempHour < 0) || (tempHour > 24)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0b2e:	b2c3      	uxtb	r3, r0
 80a0b30:	2b18      	cmp	r3, #24
 80a0b32:	d827      	bhi.n	80a0b84 <_Z13setPumpOnHour6String+0x64>
  systemStatusWriteNeeded = true;
 80a0b34:	2101      	movs	r1, #1
  sysStatus.pumpOnHour = tempHour;
 80a0b36:	4a14      	ldr	r2, [pc, #80]	; (80a0b88 <_Z13setPumpOnHour6String+0x68>)
 80a0b38:	b243      	sxtb	r3, r0
 80a0b3a:	6113      	str	r3, [r2, #16]
  systemStatusWriteNeeded = true;
 80a0b3c:	4a13      	ldr	r2, [pc, #76]	; (80a0b8c <_Z13setPumpOnHour6String+0x6c>)
  snprintf(data, sizeof(data), "Pump On Hour set to %i",sysStatus.pumpOnHour);
 80a0b3e:	a806      	add	r0, sp, #24
  systemStatusWriteNeeded = true;
 80a0b40:	7011      	strb	r1, [r2, #0]
  snprintf(data, sizeof(data), "Pump On Hour set to %i",sysStatus.pumpOnHour);
 80a0b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0b46:	4a12      	ldr	r2, [pc, #72]	; (80a0b90 <_Z13setPumpOnHour6String+0x70>)
 80a0b48:	f000 fd8a 	bl	80a1660 <snprintf>
 80a0b4c:	f7ff fb30 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a0b50:	f000 fcd6 	bl	80a1500 <spark_cloud_flag_connected>
  if (Particle.connected()) if (Particle.connected()) Particle.publish("Control",data, PRIVATE);
 80a0b54:	b178      	cbz	r0, 80a0b76 <_Z13setPumpOnHour6String+0x56>
 80a0b56:	f000 fcd3 	bl	80a1500 <spark_cloud_flag_connected>
 80a0b5a:	b160      	cbz	r0, 80a0b76 <_Z13setPumpOnHour6String+0x56>
 80a0b5c:	2300      	movs	r3, #0
 80a0b5e:	f88d 3000 	strb.w	r3, [sp]
 80a0b62:	4b0c      	ldr	r3, [pc, #48]	; (80a0b94 <_Z13setPumpOnHour6String+0x74>)
 80a0b64:	a804      	add	r0, sp, #16
 80a0b66:	781b      	ldrb	r3, [r3, #0]
 80a0b68:	490b      	ldr	r1, [pc, #44]	; (80a0b98 <_Z13setPumpOnHour6String+0x78>)
 80a0b6a:	aa06      	add	r2, sp, #24
 80a0b6c:	f7ff facd 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a0b70:	a805      	add	r0, sp, #20
 80a0b72:	f7ff fb98 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  state = CONTROL_STATE;
 80a0b76:	2203      	movs	r2, #3
  return 1;
 80a0b78:	2001      	movs	r0, #1
  state = CONTROL_STATE;
 80a0b7a:	4b08      	ldr	r3, [pc, #32]	; (80a0b9c <_Z13setPumpOnHour6String+0x7c>)
 80a0b7c:	701a      	strb	r2, [r3, #0]
}
 80a0b7e:	b047      	add	sp, #284	; 0x11c
 80a0b80:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempHour < 0) || (tempHour > 24)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0b84:	2000      	movs	r0, #0
 80a0b86:	e7fa      	b.n	80a0b7e <_Z13setPumpOnHour6String+0x5e>
 80a0b88:	200001d4 	.word	0x200001d4
 80a0b8c:	20000204 	.word	0x20000204
 80a0b90:	080a4b64 	.word	0x080a4b64
 80a0b94:	2000019c 	.word	0x2000019c
 80a0b98:	080a4c9e 	.word	0x080a4c9e
 80a0b9c:	200001d0 	.word	0x200001d0

080a0ba0 <_Z12setLedOnHour6String>:
int setLedOnHour (String command) {                                     // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0ba0:	b500      	push	{lr}
 80a0ba2:	b0c7      	sub	sp, #284	; 0x11c
  int8_t tempHour = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
 80a0ba4:	220a      	movs	r2, #10
 80a0ba6:	6800      	ldr	r0, [r0, #0]
 80a0ba8:	a903      	add	r1, sp, #12
 80a0baa:	f003 facd 	bl	80a4148 <strtol>
  if ((tempHour < 0) || (tempHour > 23)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0bae:	b2c3      	uxtb	r3, r0
 80a0bb0:	2b17      	cmp	r3, #23
 80a0bb2:	d824      	bhi.n	80a0bfe <_Z12setLedOnHour6String+0x5e>
  systemStatusWriteNeeded = true;
 80a0bb4:	2101      	movs	r1, #1
  sysStatus.ledOnHour = tempHour;
 80a0bb6:	4a13      	ldr	r2, [pc, #76]	; (80a0c04 <_Z12setLedOnHour6String+0x64>)
 80a0bb8:	b243      	sxtb	r3, r0
 80a0bba:	6153      	str	r3, [r2, #20]
  systemStatusWriteNeeded = true;
 80a0bbc:	4a12      	ldr	r2, [pc, #72]	; (80a0c08 <_Z12setLedOnHour6String+0x68>)
  snprintf(data, sizeof(data), "Led On Hour set to %i",sysStatus.ledOnHour);
 80a0bbe:	a806      	add	r0, sp, #24
  systemStatusWriteNeeded = true;
 80a0bc0:	7011      	strb	r1, [r2, #0]
  snprintf(data, sizeof(data), "Led On Hour set to %i",sysStatus.ledOnHour);
 80a0bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0bc6:	4a11      	ldr	r2, [pc, #68]	; (80a0c0c <_Z12setLedOnHour6String+0x6c>)
 80a0bc8:	f000 fd4a 	bl	80a1660 <snprintf>
 80a0bcc:	f7ff faf0 	bl	80a01b0 <_ZN11SystemClass18waitConditionWhileIZ11setTimeZone6StringEUlvE0_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.0>
 80a0bd0:	f000 fc96 	bl	80a1500 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Control",data, PRIVATE);
 80a0bd4:	b160      	cbz	r0, 80a0bf0 <_Z12setLedOnHour6String+0x50>
 80a0bd6:	2300      	movs	r3, #0
 80a0bd8:	f88d 3000 	strb.w	r3, [sp]
 80a0bdc:	4b0c      	ldr	r3, [pc, #48]	; (80a0c10 <_Z12setLedOnHour6String+0x70>)
 80a0bde:	a804      	add	r0, sp, #16
 80a0be0:	781b      	ldrb	r3, [r3, #0]
 80a0be2:	490c      	ldr	r1, [pc, #48]	; (80a0c14 <_Z12setLedOnHour6String+0x74>)
 80a0be4:	aa06      	add	r2, sp, #24
 80a0be6:	f7ff fa90 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a0bea:	a805      	add	r0, sp, #20
 80a0bec:	f7ff fb5b 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  state = CONTROL_STATE;
 80a0bf0:	2203      	movs	r2, #3
  return 1;
 80a0bf2:	2001      	movs	r0, #1
  state = CONTROL_STATE;
 80a0bf4:	4b08      	ldr	r3, [pc, #32]	; (80a0c18 <_Z12setLedOnHour6String+0x78>)
 80a0bf6:	701a      	strb	r2, [r3, #0]
}
 80a0bf8:	b047      	add	sp, #284	; 0x11c
 80a0bfa:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempHour < 0) || (tempHour > 23)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0bfe:	2000      	movs	r0, #0
 80a0c00:	e7fa      	b.n	80a0bf8 <_Z12setLedOnHour6String+0x58>
 80a0c02:	bf00      	nop
 80a0c04:	200001d4 	.word	0x200001d4
 80a0c08:	20000204 	.word	0x20000204
 80a0c0c:	080a4b7b 	.word	0x080a4b7b
 80a0c10:	2000019c 	.word	0x2000019c
 80a0c14:	080a4c9e 	.word	0x080a4c9e
 80a0c18:	200001d0 	.word	0x200001d0

080a0c1c <_Z17setWeekendOffHour6String.part.0>:
  systemStatusWriteNeeded = true;
 80a0c1c:	2201      	movs	r2, #1
int setWeekendOffHour (String command) {                                  // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0c1e:	b500      	push	{lr}
  systemStatusWriteNeeded = true;
 80a0c20:	4b10      	ldr	r3, [pc, #64]	; (80a0c64 <_Z17setWeekendOffHour6String.part.0+0x48>)
int setWeekendOffHour (String command) {                                  // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0c22:	b0c5      	sub	sp, #276	; 0x114
  systemStatusWriteNeeded = true;
 80a0c24:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Weekend Power Off Hour set to %i",sysStatus.weekendOffHour);
 80a0c26:	4b10      	ldr	r3, [pc, #64]	; (80a0c68 <_Z17setWeekendOffHour6String.part.0+0x4c>)
 80a0c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0c2c:	69db      	ldr	r3, [r3, #28]
 80a0c2e:	4a0f      	ldr	r2, [pc, #60]	; (80a0c6c <_Z17setWeekendOffHour6String.part.0+0x50>)
 80a0c30:	a804      	add	r0, sp, #16
 80a0c32:	f000 fd15 	bl	80a1660 <snprintf>
 80a0c36:	f000 fc63 	bl	80a1500 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Control",data, PRIVATE);
 80a0c3a:	b160      	cbz	r0, 80a0c56 <_Z17setWeekendOffHour6String.part.0+0x3a>
 80a0c3c:	2300      	movs	r3, #0
 80a0c3e:	f88d 3000 	strb.w	r3, [sp]
 80a0c42:	4b0b      	ldr	r3, [pc, #44]	; (80a0c70 <_Z17setWeekendOffHour6String.part.0+0x54>)
 80a0c44:	a802      	add	r0, sp, #8
 80a0c46:	781b      	ldrb	r3, [r3, #0]
 80a0c48:	490a      	ldr	r1, [pc, #40]	; (80a0c74 <_Z17setWeekendOffHour6String.part.0+0x58>)
 80a0c4a:	aa04      	add	r2, sp, #16
 80a0c4c:	f7ff fa5d 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a0c50:	a803      	add	r0, sp, #12
 80a0c52:	f7ff fb28 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  state = CONTROL_STATE;
 80a0c56:	2203      	movs	r2, #3
}
 80a0c58:	2001      	movs	r0, #1
  state = CONTROL_STATE;
 80a0c5a:	4b07      	ldr	r3, [pc, #28]	; (80a0c78 <_Z17setWeekendOffHour6String.part.0+0x5c>)
 80a0c5c:	701a      	strb	r2, [r3, #0]
}
 80a0c5e:	b045      	add	sp, #276	; 0x114
 80a0c60:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0c64:	20000204 	.word	0x20000204
 80a0c68:	200001d4 	.word	0x200001d4
 80a0c6c:	080a4b91 	.word	0x080a4b91
 80a0c70:	2000019c 	.word	0x2000019c
 80a0c74:	080a4c9e 	.word	0x080a4c9e
 80a0c78:	200001d0 	.word	0x200001d0

080a0c7c <_Z17setWeekendOffHour6String>:
int setWeekendOffHour (String command) {                                  // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0c7c:	b513      	push	{r0, r1, r4, lr}
  int8_t tempHour = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
 80a0c7e:	220a      	movs	r2, #10
 80a0c80:	6800      	ldr	r0, [r0, #0]
 80a0c82:	a901      	add	r1, sp, #4
 80a0c84:	f003 fa60 	bl	80a4148 <strtol>
  if ((tempHour < 0) || (tempHour > 24)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0c88:	b2c3      	uxtb	r3, r0
 80a0c8a:	2b18      	cmp	r3, #24
 80a0c8c:	d80c      	bhi.n	80a0ca8 <_Z17setWeekendOffHour6String+0x2c>
  sysStatus.weekendOffHour = tempHour;
 80a0c8e:	4c07      	ldr	r4, [pc, #28]	; (80a0cac <_Z17setWeekendOffHour6String+0x30>)
 80a0c90:	b240      	sxtb	r0, r0
 80a0c92:	61e0      	str	r0, [r4, #28]
  if (Time.weekday() >= 6) sysStatus.powerOffHour = sysStatus.weekendOffHour; // Set if we are on the weekend
 80a0c94:	f001 fb8a 	bl	80a23ac <_ZN9TimeClass7weekdayEv>
 80a0c98:	2805      	cmp	r0, #5
 80a0c9a:	bfc4      	itt	gt
 80a0c9c:	69e3      	ldrgt	r3, [r4, #28]
 80a0c9e:	61a3      	strgt	r3, [r4, #24]
 80a0ca0:	f7ff ffbc 	bl	80a0c1c <_Z17setWeekendOffHour6String.part.0>
}
 80a0ca4:	b002      	add	sp, #8
 80a0ca6:	bd10      	pop	{r4, pc}
  if ((tempHour < 0) || (tempHour > 24)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0ca8:	2000      	movs	r0, #0
 80a0caa:	e7fb      	b.n	80a0ca4 <_Z17setWeekendOffHour6String+0x28>
 80a0cac:	200001d4 	.word	0x200001d4

080a0cb0 <_Z17setWeekdayOffHour6String.part.0>:
  systemStatusWriteNeeded = true;
 80a0cb0:	2201      	movs	r2, #1
int setWeekdayOffHour (String command) {                                  // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0cb2:	b500      	push	{lr}
  systemStatusWriteNeeded = true;
 80a0cb4:	4b10      	ldr	r3, [pc, #64]	; (80a0cf8 <_Z17setWeekdayOffHour6String.part.0+0x48>)
int setWeekdayOffHour (String command) {                                  // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0cb6:	b0c5      	sub	sp, #276	; 0x114
  systemStatusWriteNeeded = true;
 80a0cb8:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Weekday Power Off Hour set to %i",sysStatus.weekdayOffHour);
 80a0cba:	4b10      	ldr	r3, [pc, #64]	; (80a0cfc <_Z17setWeekdayOffHour6String.part.0+0x4c>)
 80a0cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0cc0:	6a1b      	ldr	r3, [r3, #32]
 80a0cc2:	4a0f      	ldr	r2, [pc, #60]	; (80a0d00 <_Z17setWeekdayOffHour6String.part.0+0x50>)
 80a0cc4:	a804      	add	r0, sp, #16
 80a0cc6:	f000 fccb 	bl	80a1660 <snprintf>
 80a0cca:	f000 fc19 	bl	80a1500 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Control",data, PRIVATE);
 80a0cce:	b160      	cbz	r0, 80a0cea <_Z17setWeekdayOffHour6String.part.0+0x3a>
 80a0cd0:	2300      	movs	r3, #0
 80a0cd2:	f88d 3000 	strb.w	r3, [sp]
 80a0cd6:	4b0b      	ldr	r3, [pc, #44]	; (80a0d04 <_Z17setWeekdayOffHour6String.part.0+0x54>)
 80a0cd8:	a802      	add	r0, sp, #8
 80a0cda:	781b      	ldrb	r3, [r3, #0]
 80a0cdc:	490a      	ldr	r1, [pc, #40]	; (80a0d08 <_Z17setWeekdayOffHour6String.part.0+0x58>)
 80a0cde:	aa04      	add	r2, sp, #16
 80a0ce0:	f7ff fa13 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a0ce4:	a803      	add	r0, sp, #12
 80a0ce6:	f7ff fade 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  state = CONTROL_STATE;
 80a0cea:	2203      	movs	r2, #3
}
 80a0cec:	2001      	movs	r0, #1
  state = CONTROL_STATE;
 80a0cee:	4b07      	ldr	r3, [pc, #28]	; (80a0d0c <_Z17setWeekdayOffHour6String.part.0+0x5c>)
 80a0cf0:	701a      	strb	r2, [r3, #0]
}
 80a0cf2:	b045      	add	sp, #276	; 0x114
 80a0cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0cf8:	20000204 	.word	0x20000204
 80a0cfc:	200001d4 	.word	0x200001d4
 80a0d00:	080a4bb2 	.word	0x080a4bb2
 80a0d04:	2000019c 	.word	0x2000019c
 80a0d08:	080a4c9e 	.word	0x080a4c9e
 80a0d0c:	200001d0 	.word	0x200001d0

080a0d10 <_Z17setWeekdayOffHour6String>:
int setWeekdayOffHour (String command) {                                  // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0d10:	b513      	push	{r0, r1, r4, lr}
  int8_t tempHour = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
 80a0d12:	220a      	movs	r2, #10
 80a0d14:	6800      	ldr	r0, [r0, #0]
 80a0d16:	a901      	add	r1, sp, #4
 80a0d18:	f003 fa16 	bl	80a4148 <strtol>
  if ((tempHour < 0) || (tempHour > 24)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0d1c:	b2c3      	uxtb	r3, r0
 80a0d1e:	2b18      	cmp	r3, #24
 80a0d20:	d80c      	bhi.n	80a0d3c <_Z17setWeekdayOffHour6String+0x2c>
  sysStatus.weekdayOffHour = tempHour;
 80a0d22:	4c07      	ldr	r4, [pc, #28]	; (80a0d40 <_Z17setWeekdayOffHour6String+0x30>)
 80a0d24:	b240      	sxtb	r0, r0
 80a0d26:	6220      	str	r0, [r4, #32]
  if (Time.weekday() < 6) sysStatus.powerOffHour = sysStatus.weekdayOffHour; // Set if we are on the weekend
 80a0d28:	f001 fb40 	bl	80a23ac <_ZN9TimeClass7weekdayEv>
 80a0d2c:	2805      	cmp	r0, #5
 80a0d2e:	bfdc      	itt	le
 80a0d30:	6a23      	ldrle	r3, [r4, #32]
 80a0d32:	61a3      	strle	r3, [r4, #24]
 80a0d34:	f7ff ffbc 	bl	80a0cb0 <_Z17setWeekdayOffHour6String.part.0>
}
 80a0d38:	b002      	add	sp, #8
 80a0d3a:	bd10      	pop	{r4, pc}
  if ((tempHour < 0) || (tempHour > 24)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0d3c:	2000      	movs	r0, #0
 80a0d3e:	e7fb      	b.n	80a0d38 <_Z17setWeekdayOffHour6String+0x28>
 80a0d40:	200001d4 	.word	0x200001d4

080a0d44 <_Z11setPWMvalue6String>:
int setPWMvalue (String command) {                                  // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0d44:	b500      	push	{lr}
 80a0d46:	b0c7      	sub	sp, #284	; 0x11c
  int tempValue = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
 80a0d48:	220a      	movs	r2, #10
 80a0d4a:	6800      	ldr	r0, [r0, #0]
 80a0d4c:	a903      	add	r1, sp, #12
 80a0d4e:	f003 f9fb 	bl	80a4148 <strtol>
  if ((tempValue < 0) || (tempValue > 255)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0d52:	28ff      	cmp	r0, #255	; 0xff
  int tempValue = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
 80a0d54:	4603      	mov	r3, r0
  if ((tempValue < 0) || (tempValue > 255)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0d56:	d821      	bhi.n	80a0d9c <_Z11setPWMvalue6String+0x58>
  systemStatusWriteNeeded = true;
 80a0d58:	2101      	movs	r1, #1
  sysStatus.pumpPWMvalue = tempValue;
 80a0d5a:	4a11      	ldr	r2, [pc, #68]	; (80a0da0 <_Z11setPWMvalue6String+0x5c>)
 80a0d5c:	6250      	str	r0, [r2, #36]	; 0x24
  systemStatusWriteNeeded = true;
 80a0d5e:	4a11      	ldr	r2, [pc, #68]	; (80a0da4 <_Z11setPWMvalue6String+0x60>)
  snprintf(data, sizeof(data), "Pump PWM value set to %i",sysStatus.pumpPWMvalue);
 80a0d60:	a806      	add	r0, sp, #24
  systemStatusWriteNeeded = true;
 80a0d62:	7011      	strb	r1, [r2, #0]
  snprintf(data, sizeof(data), "Pump PWM value set to %i",sysStatus.pumpPWMvalue);
 80a0d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0d68:	4a0f      	ldr	r2, [pc, #60]	; (80a0da8 <_Z11setPWMvalue6String+0x64>)
 80a0d6a:	f000 fc79 	bl	80a1660 <snprintf>
 80a0d6e:	f000 fbc7 	bl	80a1500 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Control",data, PRIVATE);
 80a0d72:	b160      	cbz	r0, 80a0d8e <_Z11setPWMvalue6String+0x4a>
 80a0d74:	2300      	movs	r3, #0
 80a0d76:	f88d 3000 	strb.w	r3, [sp]
 80a0d7a:	4b0c      	ldr	r3, [pc, #48]	; (80a0dac <_Z11setPWMvalue6String+0x68>)
 80a0d7c:	a804      	add	r0, sp, #16
 80a0d7e:	781b      	ldrb	r3, [r3, #0]
 80a0d80:	490b      	ldr	r1, [pc, #44]	; (80a0db0 <_Z11setPWMvalue6String+0x6c>)
 80a0d82:	aa06      	add	r2, sp, #24
 80a0d84:	f7ff f9c1 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a0d88:	a805      	add	r0, sp, #20
 80a0d8a:	f7ff fa8c 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  state = CONTROL_STATE;
 80a0d8e:	2203      	movs	r2, #3
  return 1;
 80a0d90:	2001      	movs	r0, #1
  state = CONTROL_STATE;
 80a0d92:	4b08      	ldr	r3, [pc, #32]	; (80a0db4 <_Z11setPWMvalue6String+0x70>)
 80a0d94:	701a      	strb	r2, [r3, #0]
}
 80a0d96:	b047      	add	sp, #284	; 0x11c
 80a0d98:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempValue < 0) || (tempValue > 255)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0d9c:	2000      	movs	r0, #0
 80a0d9e:	e7fa      	b.n	80a0d96 <_Z11setPWMvalue6String+0x52>
 80a0da0:	200001d4 	.word	0x200001d4
 80a0da4:	20000204 	.word	0x20000204
 80a0da8:	080a4bd3 	.word	0x080a4bd3
 80a0dac:	2000019c 	.word	0x2000019c
 80a0db0:	080a4c9e 	.word	0x080a4c9e
 80a0db4:	200001d0 	.word	0x200001d0

080a0db8 <_Z17setEnableFountain6String>:
int setEnableFountain (String command) {                                  // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80a0db8:	b500      	push	{lr}
 80a0dba:	b0c7      	sub	sp, #284	; 0x11c
  int8_t tempValue = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
 80a0dbc:	220a      	movs	r2, #10
 80a0dbe:	6800      	ldr	r0, [r0, #0]
 80a0dc0:	a903      	add	r1, sp, #12
 80a0dc2:	f003 f9c1 	bl	80a4148 <strtol>
  if ((tempValue < 0) || (tempValue > 1)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0dc6:	b2c3      	uxtb	r3, r0
 80a0dc8:	2b01      	cmp	r3, #1
 80a0dca:	d827      	bhi.n	80a0e1c <_Z17setEnableFountain6String+0x64>
  systemStatusWriteNeeded = true;
 80a0dcc:	2201      	movs	r2, #1
  sysStatus.fountainEnabled = tempValue;
 80a0dce:	4b14      	ldr	r3, [pc, #80]	; (80a0e20 <_Z17setEnableFountain6String+0x68>)
 80a0dd0:	b240      	sxtb	r0, r0
 80a0dd2:	6298      	str	r0, [r3, #40]	; 0x28
  systemStatusWriteNeeded = true;
 80a0dd4:	4b13      	ldr	r3, [pc, #76]	; (80a0e24 <_Z17setEnableFountain6String+0x6c>)
  snprintf(data, sizeof(data), "Fountain %s", (sysStatus.fountainEnabled) ? "Enabled" : "Not Enabled");
 80a0dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
  systemStatusWriteNeeded = true;
 80a0dda:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Fountain %s", (sysStatus.fountainEnabled) ? "Enabled" : "Not Enabled");
 80a0ddc:	4a12      	ldr	r2, [pc, #72]	; (80a0e28 <_Z17setEnableFountain6String+0x70>)
 80a0dde:	4b13      	ldr	r3, [pc, #76]	; (80a0e2c <_Z17setEnableFountain6String+0x74>)
 80a0de0:	2800      	cmp	r0, #0
 80a0de2:	bf18      	it	ne
 80a0de4:	4613      	movne	r3, r2
 80a0de6:	4a12      	ldr	r2, [pc, #72]	; (80a0e30 <_Z17setEnableFountain6String+0x78>)
 80a0de8:	a806      	add	r0, sp, #24
 80a0dea:	f000 fc39 	bl	80a1660 <snprintf>
 80a0dee:	f000 fb87 	bl	80a1500 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Control",data, PRIVATE);
 80a0df2:	b160      	cbz	r0, 80a0e0e <_Z17setEnableFountain6String+0x56>
 80a0df4:	2300      	movs	r3, #0
 80a0df6:	f88d 3000 	strb.w	r3, [sp]
 80a0dfa:	4b0e      	ldr	r3, [pc, #56]	; (80a0e34 <_Z17setEnableFountain6String+0x7c>)
 80a0dfc:	a804      	add	r0, sp, #16
 80a0dfe:	781b      	ldrb	r3, [r3, #0]
 80a0e00:	490d      	ldr	r1, [pc, #52]	; (80a0e38 <_Z17setEnableFountain6String+0x80>)
 80a0e02:	aa06      	add	r2, sp, #24
 80a0e04:	f7ff f981 	bl	80a010a <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
 80a0e08:	a805      	add	r0, sp, #20
 80a0e0a:	f7ff fa4c 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  state = CONTROL_STATE;
 80a0e0e:	2203      	movs	r2, #3
  return 1;
 80a0e10:	2001      	movs	r0, #1
  state = CONTROL_STATE;
 80a0e12:	4b0a      	ldr	r3, [pc, #40]	; (80a0e3c <_Z17setEnableFountain6String+0x84>)
 80a0e14:	701a      	strb	r2, [r3, #0]
}
 80a0e16:	b047      	add	sp, #284	; 0x11c
 80a0e18:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempValue < 0) || (tempValue > 1)) return 0;                       // Make sure it falls in a valid range or send a "fail" result
 80a0e1c:	2000      	movs	r0, #0
 80a0e1e:	e7fa      	b.n	80a0e16 <_Z17setEnableFountain6String+0x5e>
 80a0e20:	200001d4 	.word	0x200001d4
 80a0e24:	20000204 	.word	0x20000204
 80a0e28:	080a4c84 	.word	0x080a4c84
 80a0e2c:	080a4bec 	.word	0x080a4bec
 80a0e30:	080a4bf8 	.word	0x080a4bf8
 80a0e34:	2000019c 	.word	0x2000019c
 80a0e38:	080a4c9e 	.word	0x080a4c9e
 80a0e3c:	200001d0 	.word	0x200001d0

080a0e40 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>:
    static inline bool function(const T &name, Types ... args)
 80a0e40:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0e42:	4801      	ldr	r0, [pc, #4]	; (80a0e48 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a0e44:	f000 bca7 	b.w	80a1796 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0e48:	080a176b 	.word	0x080a176b
 80a0e4c:	00000000 	.word	0x00000000

080a0e50 <setup>:
{
 80a0e50:	b530      	push	{r4, r5, lr}
        int reason = RESET_REASON_NONE;
 80a0e52:	2500      	movs	r5, #0
 80a0e54:	b085      	sub	sp, #20
  pinMode(ledPowerPin,OUTPUT);                                          // LED control Pin
 80a0e56:	2101      	movs	r1, #1
 80a0e58:	2007      	movs	r0, #7
 80a0e5a:	f001 fe19 	bl	80a2a90 <pinMode>
  pinMode(pumpPowerPin,OUTPUT);                                         // Pump control Pin
 80a0e5e:	2101      	movs	r1, #1
 80a0e60:	2002      	movs	r0, #2
 80a0e62:	f001 fe15 	bl	80a2a90 <pinMode>
  pinMode(wakeUpPin,INPUT);                                             // This pin is active HIGH
 80a0e66:	2100      	movs	r1, #0
 80a0e68:	2011      	movs	r0, #17
 80a0e6a:	f001 fe11 	bl	80a2a90 <pinMode>
  pinMode(donePin,OUTPUT);                                              // Allows us to pet the watchdog
 80a0e6e:	2101      	movs	r1, #1
 80a0e70:	2006      	movs	r0, #6
 80a0e72:	f001 fe0d 	bl	80a2a90 <pinMode>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a0e76:	2300      	movs	r3, #0
 80a0e78:	2204      	movs	r2, #4
 80a0e7a:	4965      	ldr	r1, [pc, #404]	; (80a1010 <setup+0x1c0>)
 80a0e7c:	4865      	ldr	r0, [pc, #404]	; (80a1014 <setup+0x1c4>)
 80a0e7e:	f000 fb27 	bl	80a14d0 <spark_variable>
        return _variable(varKey, &var, INT);
 80a0e82:	4965      	ldr	r1, [pc, #404]	; (80a1018 <setup+0x1c8>)
 80a0e84:	4865      	ldr	r0, [pc, #404]	; (80a101c <setup+0x1cc>)
 80a0e86:	f7ff f93c 	bl	80a0102 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a0e8a:	2300      	movs	r3, #0
 80a0e8c:	2204      	movs	r2, #4
 80a0e8e:	4964      	ldr	r1, [pc, #400]	; (80a1020 <setup+0x1d0>)
 80a0e90:	4864      	ldr	r0, [pc, #400]	; (80a1024 <setup+0x1d4>)
 80a0e92:	f000 fb1d 	bl	80a14d0 <spark_variable>
 80a0e96:	2300      	movs	r3, #0
 80a0e98:	2204      	movs	r2, #4
 80a0e9a:	4963      	ldr	r1, [pc, #396]	; (80a1028 <setup+0x1d8>)
 80a0e9c:	4863      	ldr	r0, [pc, #396]	; (80a102c <setup+0x1dc>)
 80a0e9e:	f000 fb17 	bl	80a14d0 <spark_variable>
 80a0ea2:	2300      	movs	r3, #0
 80a0ea4:	2204      	movs	r2, #4
 80a0ea6:	4962      	ldr	r1, [pc, #392]	; (80a1030 <setup+0x1e0>)
 80a0ea8:	4862      	ldr	r0, [pc, #392]	; (80a1034 <setup+0x1e4>)
 80a0eaa:	f000 fb11 	bl	80a14d0 <spark_variable>
        return _variable(varKey, &var, INT);
 80a0eae:	4962      	ldr	r1, [pc, #392]	; (80a1038 <setup+0x1e8>)
 80a0eb0:	4862      	ldr	r0, [pc, #392]	; (80a103c <setup+0x1ec>)
 80a0eb2:	f7ff f926 	bl	80a0102 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
 80a0eb6:	4962      	ldr	r1, [pc, #392]	; (80a1040 <setup+0x1f0>)
 80a0eb8:	4862      	ldr	r0, [pc, #392]	; (80a1044 <setup+0x1f4>)
 80a0eba:	f7ff f922 	bl	80a0102 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
 80a0ebe:	4962      	ldr	r1, [pc, #392]	; (80a1048 <setup+0x1f8>)
 80a0ec0:	4862      	ldr	r0, [pc, #392]	; (80a104c <setup+0x1fc>)
 80a0ec2:	f7ff f91e 	bl	80a0102 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
 80a0ec6:	4962      	ldr	r1, [pc, #392]	; (80a1050 <setup+0x200>)
 80a0ec8:	4862      	ldr	r0, [pc, #392]	; (80a1054 <setup+0x204>)
 80a0eca:	f7ff f91a 	bl	80a0102 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
 80a0ece:	4962      	ldr	r1, [pc, #392]	; (80a1058 <setup+0x208>)
 80a0ed0:	4862      	ldr	r0, [pc, #392]	; (80a105c <setup+0x20c>)
 80a0ed2:	f7ff f916 	bl	80a0102 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
 80a0ed6:	4962      	ldr	r1, [pc, #392]	; (80a1060 <setup+0x210>)
 80a0ed8:	4862      	ldr	r0, [pc, #392]	; (80a1064 <setup+0x214>)
 80a0eda:	f7ff f912 	bl	80a0102 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
 80a0ede:	4962      	ldr	r1, [pc, #392]	; (80a1068 <setup+0x218>)
 80a0ee0:	4862      	ldr	r0, [pc, #392]	; (80a106c <setup+0x21c>)
 80a0ee2:	f7ff f90e 	bl	80a0102 <_ZN10CloudClass9_variableI17CloudVariableTypeIivEEEbPKcNT_11PointerTypeERKS5_.isra.0>
  Particle.function("Verbose-Mode",setVerboseMode);
 80a0ee6:	4962      	ldr	r1, [pc, #392]	; (80a1070 <setup+0x220>)
 80a0ee8:	4862      	ldr	r0, [pc, #392]	; (80a1074 <setup+0x224>)
 80a0eea:	f7ff ffa9 	bl	80a0e40 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Pump-Control",setPumpState);
 80a0eee:	4962      	ldr	r1, [pc, #392]	; (80a1078 <setup+0x228>)
 80a0ef0:	4862      	ldr	r0, [pc, #392]	; (80a107c <setup+0x22c>)
 80a0ef2:	f7ff ffa5 	bl	80a0e40 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
 80a0ef6:	4962      	ldr	r1, [pc, #392]	; (80a1080 <setup+0x230>)
 80a0ef8:	4862      	ldr	r0, [pc, #392]	; (80a1084 <setup+0x234>)
 80a0efa:	f7ff ffa1 	bl	80a0e40 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0efe:	4a62      	ldr	r2, [pc, #392]	; (80a1088 <setup+0x238>)
 80a0f00:	4962      	ldr	r1, [pc, #392]	; (80a108c <setup+0x23c>)
 80a0f02:	4863      	ldr	r0, [pc, #396]	; (80a1090 <setup+0x240>)
 80a0f04:	f000 fc47 	bl	80a1796 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0f08:	4a62      	ldr	r2, [pc, #392]	; (80a1094 <setup+0x244>)
 80a0f0a:	4963      	ldr	r1, [pc, #396]	; (80a1098 <setup+0x248>)
 80a0f0c:	4860      	ldr	r0, [pc, #384]	; (80a1090 <setup+0x240>)
 80a0f0e:	f000 fc42 	bl	80a1796 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0f12:	4a62      	ldr	r2, [pc, #392]	; (80a109c <setup+0x24c>)
 80a0f14:	4962      	ldr	r1, [pc, #392]	; (80a10a0 <setup+0x250>)
 80a0f16:	485e      	ldr	r0, [pc, #376]	; (80a1090 <setup+0x240>)
 80a0f18:	f000 fc3d 	bl	80a1796 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0f1c:	4a61      	ldr	r2, [pc, #388]	; (80a10a4 <setup+0x254>)
 80a0f1e:	4962      	ldr	r1, [pc, #392]	; (80a10a8 <setup+0x258>)
 80a0f20:	485b      	ldr	r0, [pc, #364]	; (80a1090 <setup+0x240>)
 80a0f22:	f000 fc38 	bl	80a1796 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0f26:	4a61      	ldr	r2, [pc, #388]	; (80a10ac <setup+0x25c>)
 80a0f28:	4961      	ldr	r1, [pc, #388]	; (80a10b0 <setup+0x260>)
 80a0f2a:	4859      	ldr	r0, [pc, #356]	; (80a1090 <setup+0x240>)
 80a0f2c:	f000 fc33 	bl	80a1796 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Set-PWMvalue",setPWMvalue);
 80a0f30:	4960      	ldr	r1, [pc, #384]	; (80a10b4 <setup+0x264>)
 80a0f32:	4861      	ldr	r0, [pc, #388]	; (80a10b8 <setup+0x268>)
 80a0f34:	f7ff ff84 	bl	80a0e40 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 80a0f38:	4a60      	ldr	r2, [pc, #384]	; (80a10bc <setup+0x26c>)
 80a0f3a:	4961      	ldr	r1, [pc, #388]	; (80a10c0 <setup+0x270>)
 80a0f3c:	4854      	ldr	r0, [pc, #336]	; (80a1090 <setup+0x240>)
 80a0f3e:	f000 fc2a 	bl	80a1796 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  EEPROM.get(EEPROMaddr::systemStatusAddr, sysStatus);
 80a0f42:	f001 fdf5 	bl	80a2b30 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a0f46:	2230      	movs	r2, #48	; 0x30
 80a0f48:	2001      	movs	r0, #1
 80a0f4a:	495e      	ldr	r1, [pc, #376]	; (80a10c4 <setup+0x274>)
 80a0f4c:	f000 f930 	bl	80a11b0 <HAL_EEPROM_Get>
  checkSystemValues();                                                  // Make sure System values are all in valid range
 80a0f50:	f7ff f93a 	bl	80a01c8 <_Z17checkSystemValuesv>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0f54:	462a      	mov	r2, r5
 80a0f56:	4629      	mov	r1, r5
 80a0f58:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 80a0f5a:	9503      	str	r5, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0f5c:	f000 f908 	bl	80a1170 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a0f60:	9b03      	ldr	r3, [sp, #12]
 80a0f62:	4c58      	ldr	r4, [pc, #352]	; (80a10c4 <setup+0x274>)
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 80a0f64:	2b14      	cmp	r3, #20
 80a0f66:	d142      	bne.n	80a0fee <setup+0x19e>
    systemStatusWriteNeeded = true;                                     // If so, store incremented number - watchdog must have done This
 80a0f68:	2201      	movs	r2, #1
    sysStatus.resetCount++;
 80a0f6a:	6863      	ldr	r3, [r4, #4]
 80a0f6c:	3301      	adds	r3, #1
 80a0f6e:	6063      	str	r3, [r4, #4]
    systemStatusWriteNeeded = true;                                     // If so, store incremented number - watchdog must have done This
 80a0f70:	4b55      	ldr	r3, [pc, #340]	; (80a10c8 <setup+0x278>)
 80a0f72:	701a      	strb	r2, [r3, #0]
  Time.setDSTOffset(sysStatus.dstOffset);                               // Set the value from FRAM if in limits
 80a0f74:	68e0      	ldr	r0, [r4, #12]
 80a0f76:	f001 f96d 	bl	80a2254 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                         // Perform the DST calculation here
 80a0f7a:	f7ff f975 	bl	80a0268 <_Z8isDSTusav>
 80a0f7e:	2800      	cmp	r0, #0
 80a0f80:	d03f      	beq.n	80a1002 <setup+0x1b2>
 80a0f82:	f001 f981 	bl	80a2288 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                        // Set the Time Zone for our device
 80a0f86:	68a0      	ldr	r0, [r4, #8]
 80a0f88:	f001 f946 	bl	80a2218 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
 80a0f8c:	f001 fa1e 	bl	80a23cc <_ZN9TimeClass5localEv>
 80a0f90:	4605      	mov	r5, r0
 80a0f92:	f001 f9e2 	bl	80a235a <_ZN9TimeClass3nowEv>
 80a0f96:	1a28      	subs	r0, r5, r0
 80a0f98:	f001 ff96 	bl	80a2ec8 <__aeabi_i2d>
 80a0f9c:	a31a      	add	r3, pc, #104	; (adr r3, 80a1008 <setup+0x1b8>)
 80a0f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0fa2:	f002 f925 	bl	80a31f0 <__aeabi_ddiv>
 80a0fa6:	4a49      	ldr	r2, [pc, #292]	; (80a10cc <setup+0x27c>)
 80a0fa8:	e9cd 0100 	strd	r0, r1, [sp]
 80a0fac:	210a      	movs	r1, #10
 80a0fae:	4848      	ldr	r0, [pc, #288]	; (80a10d0 <setup+0x280>)
 80a0fb0:	f000 fb56 	bl	80a1660 <snprintf>
  if (Time.weekday() >= 6) {                                                // Weekend!
 80a0fb4:	f001 f9fa 	bl	80a23ac <_ZN9TimeClass7weekdayEv>
  else sysStatus.powerOffHour = sysStatus.weekdayOffHour;             // Set for weekday off hour
 80a0fb8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80a0fbc:	2805      	cmp	r0, #5
 80a0fbe:	bfd8      	it	le
 80a0fc0:	4613      	movle	r3, r2
 80a0fc2:	61a3      	str	r3, [r4, #24]
  petWatchdog();
 80a0fc4:	f7ff f8d2 	bl	80a016c <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                      // The watchdog timer will signal us and we have to respond
 80a0fc8:	2300      	movs	r3, #0
 80a0fca:	2201      	movs	r2, #1
 80a0fcc:	4941      	ldr	r1, [pc, #260]	; (80a10d4 <setup+0x284>)
 80a0fce:	9300      	str	r3, [sp, #0]
 80a0fd0:	2011      	movs	r0, #17
 80a0fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0fd6:	f000 fe9f 	bl	80a1d18 <_Z15attachInterrupttPFvvE13InterruptModeah>
  getSignalStrength();                                                  // Test signal strength if the cellular modem is on and ready
 80a0fda:	f7ff f8a3 	bl	80a0124 <_Z17getSignalStrengthv>
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 80a0fde:	4b3e      	ldr	r3, [pc, #248]	; (80a10d8 <setup+0x288>)
 80a0fe0:	781a      	ldrb	r2, [r3, #0]
 80a0fe2:	2a01      	cmp	r2, #1
 80a0fe4:	bf1c      	itt	ne
 80a0fe6:	2202      	movne	r2, #2
 80a0fe8:	701a      	strbne	r2, [r3, #0]
}
 80a0fea:	b005      	add	sp, #20
 80a0fec:	bd30      	pop	{r4, r5, pc}
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0fee:	462a      	mov	r2, r5
 80a0ff0:	4629      	mov	r1, r5
 80a0ff2:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 80a0ff4:	9503      	str	r5, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0ff6:	f000 f8bb 	bl	80a1170 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a0ffa:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 80a0ffc:	2b8c      	cmp	r3, #140	; 0x8c
 80a0ffe:	d1b9      	bne.n	80a0f74 <setup+0x124>
 80a1000:	e7b2      	b.n	80a0f68 <setup+0x118>
  DSTRULES() ? Time.beginDST() : Time.endDST();                         // Perform the DST calculation here
 80a1002:	f001 f94d 	bl	80a22a0 <_ZN9TimeClass6endDSTEv>
 80a1006:	e7be      	b.n	80a0f86 <setup+0x136>
 80a1008:	00000000 	.word	0x00000000
 80a100c:	40ac2000 	.word	0x40ac2000
 80a1010:	2000014c 	.word	0x2000014c
 80a1014:	080a4c04 	.word	0x080a4c04
 80a1018:	200001d8 	.word	0x200001d8
 80a101c:	080a4c0b 	.word	0x080a4c0b
 80a1020:	080a4d10 	.word	0x080a4d10
 80a1024:	080a4c16 	.word	0x080a4c16
 80a1028:	20000000 	.word	0x20000000
 80a102c:	080a4c1e 	.word	0x080a4c1e
 80a1030:	20000010 	.word	0x20000010
 80a1034:	080a4c27 	.word	0x080a4c27
 80a1038:	200001e8 	.word	0x200001e8
 80a103c:	080a4c31 	.word	0x080a4c31
 80a1040:	200001e4 	.word	0x200001e4
 80a1044:	080a4c3d 	.word	0x080a4c3d
 80a1048:	200001ec 	.word	0x200001ec
 80a104c:	080a4c4a 	.word	0x080a4c4a
 80a1050:	200001f0 	.word	0x200001f0
 80a1054:	080a4c59 	.word	0x080a4c59
 80a1058:	200001f4 	.word	0x200001f4
 80a105c:	080a4c6a 	.word	0x080a4c6a
 80a1060:	200001f8 	.word	0x200001f8
 80a1064:	080a4cf8 	.word	0x080a4cf8
 80a1068:	200001fc 	.word	0x200001fc
 80a106c:	080a4c7b 	.word	0x080a4c7b
 80a1070:	080a02d5 	.word	0x080a02d5
 80a1074:	080a4c8c 	.word	0x080a4c8c
 80a1078:	080a0361 	.word	0x080a0361
 80a107c:	080a4c99 	.word	0x080a4c99
 80a1080:	080a08c1 	.word	0x080a08c1
 80a1084:	080a4ca6 	.word	0x080a4ca6
 80a1088:	080a4cb3 	.word	0x080a4cb3
 80a108c:	080a0a09 	.word	0x080a0a09
 80a1090:	080a176b 	.word	0x080a176b
 80a1094:	080a4cc1 	.word	0x080a4cc1
 80a1098:	080a0b21 	.word	0x080a0b21
 80a109c:	080a4ccc 	.word	0x080a4ccc
 80a10a0:	080a0ba1 	.word	0x080a0ba1
 80a10a4:	080a4cd6 	.word	0x080a4cd6
 80a10a8:	080a0c7d 	.word	0x080a0c7d
 80a10ac:	080a4ce5 	.word	0x080a4ce5
 80a10b0:	080a0d11 	.word	0x080a0d11
 80a10b4:	080a0d45 	.word	0x080a0d45
 80a10b8:	080a4cf4 	.word	0x080a4cf4
 80a10bc:	080a4d01 	.word	0x080a4d01
 80a10c0:	080a0db9 	.word	0x080a0db9
 80a10c4:	200001d4 	.word	0x200001d4
 80a10c8:	20000204 	.word	0x20000204
 80a10cc:	080a4b30 	.word	0x080a4b30
 80a10d0:	200001c0 	.word	0x200001c0
 80a10d4:	080a00b9 	.word	0x080a00b9
 80a10d8:	200001d0 	.word	0x200001d0

080a10dc <_GLOBAL__sub_I_sysStatus>:
 80a10dc:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
 80a10de:	2401      	movs	r4, #1
              error_(SYSTEM_ERROR_NONE) {
 80a10e0:	2600      	movs	r6, #0
 80a10e2:	4b12      	ldr	r3, [pc, #72]	; (80a112c <_GLOBAL__sub_I_sysStatus+0x50>)
        return HAL_Feature_Set(feature, true);
 80a10e4:	4621      	mov	r1, r4
 80a10e6:	701c      	strb	r4, [r3, #0]
 80a10e8:	2004      	movs	r0, #4
 80a10ea:	f000 f839 	bl	80a1160 <HAL_Feature_Set>
SYSTEM_THREAD(ENABLED);
 80a10ee:	2100      	movs	r1, #0
 80a10f0:	4620      	mov	r0, r4
 80a10f2:	f000 f9af 	bl	80a1454 <system_thread_set_state>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a10f6:	4620      	mov	r0, r4
 80a10f8:	f000 f984 	bl	80a1404 <wlan_select_antenna>
              error_(SYSTEM_ERROR_NONE) {
 80a10fc:	4d0c      	ldr	r5, [pc, #48]	; (80a1130 <_GLOBAL__sub_I_sysStatus+0x54>)
    SleepResult() {}
 80a10fe:	4b0d      	ldr	r3, [pc, #52]	; (80a1134 <_GLOBAL__sub_I_sysStatus+0x58>)
        set_system_mode(mode);
 80a1100:	4620      	mov	r0, r4
    SleepResult() {}
 80a1102:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
 80a1104:	602e      	str	r6, [r5, #0]
 80a1106:	80ae      	strh	r6, [r5, #4]
    SleepResult() {}
 80a1108:	71ae      	strb	r6, [r5, #6]
        set_system_mode(mode);
 80a110a:	f000 f993 	bl	80a1434 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                 // This will enable user code to start executing automatically.
 80a110e:	4628      	mov	r0, r5
 80a1110:	4a09      	ldr	r2, [pc, #36]	; (80a1138 <_GLOBAL__sub_I_sysStatus+0x5c>)
 80a1112:	490a      	ldr	r1, [pc, #40]	; (80a113c <_GLOBAL__sub_I_sysStatus+0x60>)
 80a1114:	f001 fd7a 	bl	80a2c0c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                 // Means my code will not be held up by Particle processes.
 80a1118:	4631      	mov	r1, r6
 80a111a:	4620      	mov	r0, r4
 80a111c:	f000 f99a 	bl	80a1454 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
 80a1120:	4621      	mov	r1, r4
 80a1122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1126:	2004      	movs	r0, #4
 80a1128:	f000 b81a 	b.w	80a1160 <HAL_Feature_Set>
 80a112c:	2000019c 	.word	0x2000019c
 80a1130:	2000018c 	.word	0x2000018c
 80a1134:	ffff0000 	.word	0xffff0000
 80a1138:	20000148 	.word	0x20000148
 80a113c:	080a00c5 	.word	0x080a00c5

080a1140 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1140:	b508      	push	{r3, lr}
 80a1142:	4b02      	ldr	r3, [pc, #8]	; (80a114c <os_mutex_recursive_create+0xc>)
 80a1144:	681b      	ldr	r3, [r3, #0]
 80a1146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1148:	9301      	str	r3, [sp, #4]
 80a114a:	bd08      	pop	{r3, pc}
 80a114c:	080601d0 	.word	0x080601d0

080a1150 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1150:	b508      	push	{r3, lr}
 80a1152:	4b02      	ldr	r3, [pc, #8]	; (80a115c <os_mutex_recursive_destroy+0xc>)
 80a1154:	681b      	ldr	r3, [r3, #0]
 80a1156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1158:	9301      	str	r3, [sp, #4]
 80a115a:	bd08      	pop	{r3, pc}
 80a115c:	080601d0 	.word	0x080601d0

080a1160 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a1160:	b508      	push	{r3, lr}
 80a1162:	4b02      	ldr	r3, [pc, #8]	; (80a116c <HAL_Feature_Set+0xc>)
 80a1164:	681b      	ldr	r3, [r3, #0]
 80a1166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1168:	9301      	str	r3, [sp, #4]
 80a116a:	bd08      	pop	{r3, pc}
 80a116c:	080601b8 	.word	0x080601b8

080a1170 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a1170:	b508      	push	{r3, lr}
 80a1172:	4b02      	ldr	r3, [pc, #8]	; (80a117c <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a1174:	681b      	ldr	r3, [r3, #0]
 80a1176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1178:	9301      	str	r3, [sp, #4]
 80a117a:	bd08      	pop	{r3, pc}
 80a117c:	080601b8 	.word	0x080601b8

080a1180 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1180:	b508      	push	{r3, lr}
 80a1182:	4b02      	ldr	r3, [pc, #8]	; (80a118c <HAL_RNG_GetRandomNumber+0xc>)
 80a1184:	681b      	ldr	r3, [r3, #0]
 80a1186:	685b      	ldr	r3, [r3, #4]
 80a1188:	9301      	str	r3, [sp, #4]
 80a118a:	bd08      	pop	{r3, pc}
 80a118c:	0806019c 	.word	0x0806019c

080a1190 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1190:	b508      	push	{r3, lr}
 80a1192:	4b02      	ldr	r3, [pc, #8]	; (80a119c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1194:	681b      	ldr	r3, [r3, #0]
 80a1196:	695b      	ldr	r3, [r3, #20]
 80a1198:	9301      	str	r3, [sp, #4]
 80a119a:	bd08      	pop	{r3, pc}
 80a119c:	0806019c 	.word	0x0806019c

080a11a0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a11a0:	b508      	push	{r3, lr}
 80a11a2:	4b02      	ldr	r3, [pc, #8]	; (80a11ac <HAL_EEPROM_Init+0xc>)
 80a11a4:	681b      	ldr	r3, [r3, #0]
 80a11a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a11a8:	9301      	str	r3, [sp, #4]
 80a11aa:	bd08      	pop	{r3, pc}
 80a11ac:	0806019c 	.word	0x0806019c

080a11b0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a11b0:	b508      	push	{r3, lr}
 80a11b2:	4b02      	ldr	r3, [pc, #8]	; (80a11bc <HAL_EEPROM_Get+0xc>)
 80a11b4:	681b      	ldr	r3, [r3, #0]
 80a11b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a11b8:	9301      	str	r3, [sp, #4]
 80a11ba:	bd08      	pop	{r3, pc}
 80a11bc:	0806019c 	.word	0x0806019c

080a11c0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a11c0:	b508      	push	{r3, lr}
 80a11c2:	4b02      	ldr	r3, [pc, #8]	; (80a11cc <HAL_EEPROM_Put+0xc>)
 80a11c4:	681b      	ldr	r3, [r3, #0]
 80a11c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a11c8:	9301      	str	r3, [sp, #4]
 80a11ca:	bd08      	pop	{r3, pc}
 80a11cc:	0806019c 	.word	0x0806019c

080a11d0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a11d0:	b508      	push	{r3, lr}
 80a11d2:	4b02      	ldr	r3, [pc, #8]	; (80a11dc <hal_rtc_time_is_valid+0xc>)
 80a11d4:	681b      	ldr	r3, [r3, #0]
 80a11d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a11d8:	9301      	str	r3, [sp, #4]
 80a11da:	bd08      	pop	{r3, pc}
 80a11dc:	0806019c 	.word	0x0806019c

080a11e0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a11e0:	b508      	push	{r3, lr}
 80a11e2:	4b02      	ldr	r3, [pc, #8]	; (80a11ec <hal_timer_millis+0xc>)
 80a11e4:	681b      	ldr	r3, [r3, #0]
 80a11e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a11e8:	9301      	str	r3, [sp, #4]
 80a11ea:	bd08      	pop	{r3, pc}
 80a11ec:	0806019c 	.word	0x0806019c

080a11f0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a11f0:	b508      	push	{r3, lr}
 80a11f2:	4b02      	ldr	r3, [pc, #8]	; (80a11fc <hal_rtc_get_time+0xc>)
 80a11f4:	681b      	ldr	r3, [r3, #0]
 80a11f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a11f8:	9301      	str	r3, [sp, #4]
 80a11fa:	bd08      	pop	{r3, pc}
 80a11fc:	0806019c 	.word	0x0806019c

080a1200 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1200:	b508      	push	{r3, lr}
 80a1202:	4b02      	ldr	r3, [pc, #8]	; (80a120c <HAL_Validate_Pin_Function+0xc>)
 80a1204:	681b      	ldr	r3, [r3, #0]
 80a1206:	685b      	ldr	r3, [r3, #4]
 80a1208:	9301      	str	r3, [sp, #4]
 80a120a:	bd08      	pop	{r3, pc}
 80a120c:	080601b0 	.word	0x080601b0

080a1210 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1210:	b508      	push	{r3, lr}
 80a1212:	4b02      	ldr	r3, [pc, #8]	; (80a121c <HAL_Pin_Mode+0xc>)
 80a1214:	681b      	ldr	r3, [r3, #0]
 80a1216:	689b      	ldr	r3, [r3, #8]
 80a1218:	9301      	str	r3, [sp, #4]
 80a121a:	bd08      	pop	{r3, pc}
 80a121c:	080601b0 	.word	0x080601b0

080a1220 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1220:	b508      	push	{r3, lr}
 80a1222:	4b02      	ldr	r3, [pc, #8]	; (80a122c <HAL_Get_Pin_Mode+0xc>)
 80a1224:	681b      	ldr	r3, [r3, #0]
 80a1226:	68db      	ldr	r3, [r3, #12]
 80a1228:	9301      	str	r3, [sp, #4]
 80a122a:	bd08      	pop	{r3, pc}
 80a122c:	080601b0 	.word	0x080601b0

080a1230 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1230:	b508      	push	{r3, lr}
 80a1232:	4b02      	ldr	r3, [pc, #8]	; (80a123c <HAL_GPIO_Write+0xc>)
 80a1234:	681b      	ldr	r3, [r3, #0]
 80a1236:	691b      	ldr	r3, [r3, #16]
 80a1238:	9301      	str	r3, [sp, #4]
 80a123a:	bd08      	pop	{r3, pc}
 80a123c:	080601b0 	.word	0x080601b0

080a1240 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a1240:	b508      	push	{r3, lr}
 80a1242:	4b02      	ldr	r3, [pc, #8]	; (80a124c <HAL_Interrupts_Attach+0xc>)
 80a1244:	681b      	ldr	r3, [r3, #0]
 80a1246:	699b      	ldr	r3, [r3, #24]
 80a1248:	9301      	str	r3, [sp, #4]
 80a124a:	bd08      	pop	{r3, pc}
 80a124c:	080601b0 	.word	0x080601b0

080a1250 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a1250:	b508      	push	{r3, lr}
 80a1252:	4b02      	ldr	r3, [pc, #8]	; (80a125c <HAL_Interrupts_Detach+0xc>)
 80a1254:	681b      	ldr	r3, [r3, #0]
 80a1256:	69db      	ldr	r3, [r3, #28]
 80a1258:	9301      	str	r3, [sp, #4]
 80a125a:	bd08      	pop	{r3, pc}
 80a125c:	080601b0 	.word	0x080601b0

080a1260 <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a1260:	b508      	push	{r3, lr}
 80a1262:	4b02      	ldr	r3, [pc, #8]	; (80a126c <HAL_DAC_Write+0xc>)
 80a1264:	681b      	ldr	r3, [r3, #0]
 80a1266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1268:	9301      	str	r3, [sp, #4]
 80a126a:	bd08      	pop	{r3, pc}
 80a126c:	080601b0 	.word	0x080601b0

080a1270 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 80a1270:	b508      	push	{r3, lr}
 80a1272:	4b02      	ldr	r3, [pc, #8]	; (80a127c <hal_pwm_write_ext+0xc>)
 80a1274:	681b      	ldr	r3, [r3, #0]
 80a1276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a1278:	9301      	str	r3, [sp, #4]
 80a127a:	bd08      	pop	{r3, pc}
 80a127c:	080601b0 	.word	0x080601b0

080a1280 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1280:	b508      	push	{r3, lr}
 80a1282:	4b02      	ldr	r3, [pc, #8]	; (80a128c <hal_i2c_write+0xc>)
 80a1284:	681b      	ldr	r3, [r3, #0]
 80a1286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1288:	9301      	str	r3, [sp, #4]
 80a128a:	bd08      	pop	{r3, pc}
 80a128c:	080601ac 	.word	0x080601ac

080a1290 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1290:	b508      	push	{r3, lr}
 80a1292:	4b02      	ldr	r3, [pc, #8]	; (80a129c <hal_i2c_available+0xc>)
 80a1294:	681b      	ldr	r3, [r3, #0]
 80a1296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1298:	9301      	str	r3, [sp, #4]
 80a129a:	bd08      	pop	{r3, pc}
 80a129c:	080601ac 	.word	0x080601ac

080a12a0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a12a0:	b508      	push	{r3, lr}
 80a12a2:	4b02      	ldr	r3, [pc, #8]	; (80a12ac <hal_i2c_read+0xc>)
 80a12a4:	681b      	ldr	r3, [r3, #0]
 80a12a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a12a8:	9301      	str	r3, [sp, #4]
 80a12aa:	bd08      	pop	{r3, pc}
 80a12ac:	080601ac 	.word	0x080601ac

080a12b0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a12b0:	b508      	push	{r3, lr}
 80a12b2:	4b02      	ldr	r3, [pc, #8]	; (80a12bc <hal_i2c_peek+0xc>)
 80a12b4:	681b      	ldr	r3, [r3, #0]
 80a12b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a12b8:	9301      	str	r3, [sp, #4]
 80a12ba:	bd08      	pop	{r3, pc}
 80a12bc:	080601ac 	.word	0x080601ac

080a12c0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a12c0:	b508      	push	{r3, lr}
 80a12c2:	4b02      	ldr	r3, [pc, #8]	; (80a12cc <hal_i2c_flush+0xc>)
 80a12c4:	681b      	ldr	r3, [r3, #0]
 80a12c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a12c8:	9301      	str	r3, [sp, #4]
 80a12ca:	bd08      	pop	{r3, pc}
 80a12cc:	080601ac 	.word	0x080601ac

080a12d0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a12d0:	b508      	push	{r3, lr}
 80a12d2:	4b02      	ldr	r3, [pc, #8]	; (80a12dc <hal_i2c_is_enabled+0xc>)
 80a12d4:	681b      	ldr	r3, [r3, #0]
 80a12d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a12d8:	9301      	str	r3, [sp, #4]
 80a12da:	bd08      	pop	{r3, pc}
 80a12dc:	080601ac 	.word	0x080601ac

080a12e0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a12e0:	b508      	push	{r3, lr}
 80a12e2:	4b03      	ldr	r3, [pc, #12]	; (80a12f0 <hal_i2c_init+0x10>)
 80a12e4:	681b      	ldr	r3, [r3, #0]
 80a12e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a12ea:	9301      	str	r3, [sp, #4]
 80a12ec:	bd08      	pop	{r3, pc}
 80a12ee:	0000      	.short	0x0000
 80a12f0:	080601ac 	.word	0x080601ac

080a12f4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a12f4:	b508      	push	{r3, lr}
 80a12f6:	4b02      	ldr	r3, [pc, #8]	; (80a1300 <hal_spi_init+0xc>)
 80a12f8:	681b      	ldr	r3, [r3, #0]
 80a12fa:	69db      	ldr	r3, [r3, #28]
 80a12fc:	9301      	str	r3, [sp, #4]
 80a12fe:	bd08      	pop	{r3, pc}
 80a1300:	080601b4 	.word	0x080601b4

080a1304 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1304:	b508      	push	{r3, lr}
 80a1306:	4b02      	ldr	r3, [pc, #8]	; (80a1310 <hal_spi_is_enabled+0xc>)
 80a1308:	681b      	ldr	r3, [r3, #0]
 80a130a:	6a1b      	ldr	r3, [r3, #32]
 80a130c:	9301      	str	r3, [sp, #4]
 80a130e:	bd08      	pop	{r3, pc}
 80a1310:	080601b4 	.word	0x080601b4

080a1314 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a1314:	b508      	push	{r3, lr}
 80a1316:	4b02      	ldr	r3, [pc, #8]	; (80a1320 <hal_usart_init+0xc>)
 80a1318:	681b      	ldr	r3, [r3, #0]
 80a131a:	699b      	ldr	r3, [r3, #24]
 80a131c:	9301      	str	r3, [sp, #4]
 80a131e:	bd08      	pop	{r3, pc}
 80a1320:	080601c4 	.word	0x080601c4

080a1324 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1324:	b508      	push	{r3, lr}
 80a1326:	4b02      	ldr	r3, [pc, #8]	; (80a1330 <hal_usart_write+0xc>)
 80a1328:	681b      	ldr	r3, [r3, #0]
 80a132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a132c:	9301      	str	r3, [sp, #4]
 80a132e:	bd08      	pop	{r3, pc}
 80a1330:	080601c4 	.word	0x080601c4

080a1334 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1334:	b508      	push	{r3, lr}
 80a1336:	4b02      	ldr	r3, [pc, #8]	; (80a1340 <hal_usart_available+0xc>)
 80a1338:	681b      	ldr	r3, [r3, #0]
 80a133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a133c:	9301      	str	r3, [sp, #4]
 80a133e:	bd08      	pop	{r3, pc}
 80a1340:	080601c4 	.word	0x080601c4

080a1344 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1344:	b508      	push	{r3, lr}
 80a1346:	4b02      	ldr	r3, [pc, #8]	; (80a1350 <hal_usart_read+0xc>)
 80a1348:	681b      	ldr	r3, [r3, #0]
 80a134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a134c:	9301      	str	r3, [sp, #4]
 80a134e:	bd08      	pop	{r3, pc}
 80a1350:	080601c4 	.word	0x080601c4

080a1354 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1354:	b508      	push	{r3, lr}
 80a1356:	4b02      	ldr	r3, [pc, #8]	; (80a1360 <hal_usart_peek+0xc>)
 80a1358:	681b      	ldr	r3, [r3, #0]
 80a135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a135c:	9301      	str	r3, [sp, #4]
 80a135e:	bd08      	pop	{r3, pc}
 80a1360:	080601c4 	.word	0x080601c4

080a1364 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1364:	b508      	push	{r3, lr}
 80a1366:	4b02      	ldr	r3, [pc, #8]	; (80a1370 <hal_usart_flush+0xc>)
 80a1368:	681b      	ldr	r3, [r3, #0]
 80a136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a136c:	9301      	str	r3, [sp, #4]
 80a136e:	bd08      	pop	{r3, pc}
 80a1370:	080601c4 	.word	0x080601c4

080a1374 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1374:	b508      	push	{r3, lr}
 80a1376:	4b02      	ldr	r3, [pc, #8]	; (80a1380 <hal_usart_is_enabled+0xc>)
 80a1378:	681b      	ldr	r3, [r3, #0]
 80a137a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a137c:	9301      	str	r3, [sp, #4]
 80a137e:	bd08      	pop	{r3, pc}
 80a1380:	080601c4 	.word	0x080601c4

080a1384 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1384:	b508      	push	{r3, lr}
 80a1386:	4b02      	ldr	r3, [pc, #8]	; (80a1390 <hal_usart_available_data_for_write+0xc>)
 80a1388:	681b      	ldr	r3, [r3, #0]
 80a138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a138c:	9301      	str	r3, [sp, #4]
 80a138e:	bd08      	pop	{r3, pc}
 80a1390:	080601c4 	.word	0x080601c4

080a1394 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1394:	b508      	push	{r3, lr}
 80a1396:	4b02      	ldr	r3, [pc, #8]	; (80a13a0 <HAL_USB_USART_Init+0xc>)
 80a1398:	681b      	ldr	r3, [r3, #0]
 80a139a:	681b      	ldr	r3, [r3, #0]
 80a139c:	9301      	str	r3, [sp, #4]
 80a139e:	bd08      	pop	{r3, pc}
 80a13a0:	080601d8 	.word	0x080601d8

080a13a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a13a4:	b508      	push	{r3, lr}
 80a13a6:	4b02      	ldr	r3, [pc, #8]	; (80a13b0 <HAL_USB_USART_Available_Data+0xc>)
 80a13a8:	681b      	ldr	r3, [r3, #0]
 80a13aa:	691b      	ldr	r3, [r3, #16]
 80a13ac:	9301      	str	r3, [sp, #4]
 80a13ae:	bd08      	pop	{r3, pc}
 80a13b0:	080601d8 	.word	0x080601d8

080a13b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a13b4:	b508      	push	{r3, lr}
 80a13b6:	4b02      	ldr	r3, [pc, #8]	; (80a13c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a13b8:	681b      	ldr	r3, [r3, #0]
 80a13ba:	695b      	ldr	r3, [r3, #20]
 80a13bc:	9301      	str	r3, [sp, #4]
 80a13be:	bd08      	pop	{r3, pc}
 80a13c0:	080601d8 	.word	0x080601d8

080a13c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a13c4:	b508      	push	{r3, lr}
 80a13c6:	4b02      	ldr	r3, [pc, #8]	; (80a13d0 <HAL_USB_USART_Receive_Data+0xc>)
 80a13c8:	681b      	ldr	r3, [r3, #0]
 80a13ca:	699b      	ldr	r3, [r3, #24]
 80a13cc:	9301      	str	r3, [sp, #4]
 80a13ce:	bd08      	pop	{r3, pc}
 80a13d0:	080601d8 	.word	0x080601d8

080a13d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a13d4:	b508      	push	{r3, lr}
 80a13d6:	4b02      	ldr	r3, [pc, #8]	; (80a13e0 <HAL_USB_USART_Send_Data+0xc>)
 80a13d8:	681b      	ldr	r3, [r3, #0]
 80a13da:	69db      	ldr	r3, [r3, #28]
 80a13dc:	9301      	str	r3, [sp, #4]
 80a13de:	bd08      	pop	{r3, pc}
 80a13e0:	080601d8 	.word	0x080601d8

080a13e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a13e4:	b508      	push	{r3, lr}
 80a13e6:	4b02      	ldr	r3, [pc, #8]	; (80a13f0 <HAL_USB_USART_Flush_Data+0xc>)
 80a13e8:	681b      	ldr	r3, [r3, #0]
 80a13ea:	6a1b      	ldr	r3, [r3, #32]
 80a13ec:	9301      	str	r3, [sp, #4]
 80a13ee:	bd08      	pop	{r3, pc}
 80a13f0:	080601d8 	.word	0x080601d8

080a13f4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a13f4:	b508      	push	{r3, lr}
 80a13f6:	4b02      	ldr	r3, [pc, #8]	; (80a1400 <inet_gethostbyname+0xc>)
 80a13f8:	681b      	ldr	r3, [r3, #0]
 80a13fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a13fc:	9301      	str	r3, [sp, #4]
 80a13fe:	bd08      	pop	{r3, pc}
 80a1400:	080601c0 	.word	0x080601c0

080a1404 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a1404:	b508      	push	{r3, lr}
 80a1406:	4b02      	ldr	r3, [pc, #8]	; (80a1410 <wlan_select_antenna+0xc>)
 80a1408:	681b      	ldr	r3, [r3, #0]
 80a140a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a140c:	9301      	str	r3, [sp, #4]
 80a140e:	bd08      	pop	{r3, pc}
 80a1410:	080601c0 	.word	0x080601c0

080a1414 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a1414:	b508      	push	{r3, lr}
 80a1416:	4b02      	ldr	r3, [pc, #8]	; (80a1420 <wlan_connected_info+0xc>)
 80a1418:	681b      	ldr	r3, [r3, #0]
 80a141a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a141c:	9301      	str	r3, [sp, #4]
 80a141e:	bd08      	pop	{r3, pc}
 80a1420:	080601c0 	.word	0x080601c0

080a1424 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1424:	b508      	push	{r3, lr}
 80a1426:	4b02      	ldr	r3, [pc, #8]	; (80a1430 <system_mode+0xc>)
 80a1428:	681b      	ldr	r3, [r3, #0]
 80a142a:	681b      	ldr	r3, [r3, #0]
 80a142c:	9301      	str	r3, [sp, #4]
 80a142e:	bd08      	pop	{r3, pc}
 80a1430:	080601a4 	.word	0x080601a4

080a1434 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1434:	b508      	push	{r3, lr}
 80a1436:	4b02      	ldr	r3, [pc, #8]	; (80a1440 <set_system_mode+0xc>)
 80a1438:	681b      	ldr	r3, [r3, #0]
 80a143a:	685b      	ldr	r3, [r3, #4]
 80a143c:	9301      	str	r3, [sp, #4]
 80a143e:	bd08      	pop	{r3, pc}
 80a1440:	080601a4 	.word	0x080601a4

080a1444 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1444:	b508      	push	{r3, lr}
 80a1446:	4b02      	ldr	r3, [pc, #8]	; (80a1450 <system_delay_ms+0xc>)
 80a1448:	681b      	ldr	r3, [r3, #0]
 80a144a:	695b      	ldr	r3, [r3, #20]
 80a144c:	9301      	str	r3, [sp, #4]
 80a144e:	bd08      	pop	{r3, pc}
 80a1450:	080601a4 	.word	0x080601a4

080a1454 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1454:	b508      	push	{r3, lr}
 80a1456:	4b02      	ldr	r3, [pc, #8]	; (80a1460 <system_thread_set_state+0xc>)
 80a1458:	681b      	ldr	r3, [r3, #0]
 80a145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a145c:	9301      	str	r3, [sp, #4]
 80a145e:	bd08      	pop	{r3, pc}
 80a1460:	080601a4 	.word	0x080601a4

080a1464 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1464:	b508      	push	{r3, lr}
 80a1466:	4b02      	ldr	r3, [pc, #8]	; (80a1470 <application_thread_current+0xc>)
 80a1468:	681b      	ldr	r3, [r3, #0]
 80a146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a146c:	9301      	str	r3, [sp, #4]
 80a146e:	bd08      	pop	{r3, pc}
 80a1470:	080601a4 	.word	0x080601a4

080a1474 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1474:	b508      	push	{r3, lr}
 80a1476:	4b02      	ldr	r3, [pc, #8]	; (80a1480 <application_thread_invoke+0xc>)
 80a1478:	681b      	ldr	r3, [r3, #0]
 80a147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a147c:	9301      	str	r3, [sp, #4]
 80a147e:	bd08      	pop	{r3, pc}
 80a1480:	080601a4 	.word	0x080601a4

080a1484 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1484:	b508      	push	{r3, lr}
 80a1486:	4b02      	ldr	r3, [pc, #8]	; (80a1490 <system_thread_get_state+0xc>)
 80a1488:	681b      	ldr	r3, [r3, #0]
 80a148a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a148c:	9301      	str	r3, [sp, #4]
 80a148e:	bd08      	pop	{r3, pc}
 80a1490:	080601a4 	.word	0x080601a4

080a1494 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1494:	b508      	push	{r3, lr}
 80a1496:	4b03      	ldr	r3, [pc, #12]	; (80a14a4 <system_ctrl_set_app_request_handler+0x10>)
 80a1498:	681b      	ldr	r3, [r3, #0]
 80a149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a149e:	9301      	str	r3, [sp, #4]
 80a14a0:	bd08      	pop	{r3, pc}
 80a14a2:	0000      	.short	0x0000
 80a14a4:	080601a4 	.word	0x080601a4

080a14a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a14a8:	b508      	push	{r3, lr}
 80a14aa:	4b03      	ldr	r3, [pc, #12]	; (80a14b8 <system_ctrl_set_result+0x10>)
 80a14ac:	681b      	ldr	r3, [r3, #0]
 80a14ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a14b2:	9301      	str	r3, [sp, #4]
 80a14b4:	bd08      	pop	{r3, pc}
 80a14b6:	0000      	.short	0x0000
 80a14b8:	080601a4 	.word	0x080601a4

080a14bc <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 80a14bc:	b508      	push	{r3, lr}
 80a14be:	4b03      	ldr	r3, [pc, #12]	; (80a14cc <system_reset+0x10>)
 80a14c0:	681b      	ldr	r3, [r3, #0]
 80a14c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80a14c6:	9301      	str	r3, [sp, #4]
 80a14c8:	bd08      	pop	{r3, pc}
 80a14ca:	0000      	.short	0x0000
 80a14cc:	080601a4 	.word	0x080601a4

080a14d0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a14d0:	b508      	push	{r3, lr}
 80a14d2:	4b02      	ldr	r3, [pc, #8]	; (80a14dc <spark_variable+0xc>)
 80a14d4:	681b      	ldr	r3, [r3, #0]
 80a14d6:	681b      	ldr	r3, [r3, #0]
 80a14d8:	9301      	str	r3, [sp, #4]
 80a14da:	bd08      	pop	{r3, pc}
 80a14dc:	080601cc 	.word	0x080601cc

080a14e0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a14e0:	b508      	push	{r3, lr}
 80a14e2:	4b02      	ldr	r3, [pc, #8]	; (80a14ec <spark_function+0xc>)
 80a14e4:	681b      	ldr	r3, [r3, #0]
 80a14e6:	685b      	ldr	r3, [r3, #4]
 80a14e8:	9301      	str	r3, [sp, #4]
 80a14ea:	bd08      	pop	{r3, pc}
 80a14ec:	080601cc 	.word	0x080601cc

080a14f0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a14f0:	b508      	push	{r3, lr}
 80a14f2:	4b02      	ldr	r3, [pc, #8]	; (80a14fc <spark_process+0xc>)
 80a14f4:	681b      	ldr	r3, [r3, #0]
 80a14f6:	689b      	ldr	r3, [r3, #8]
 80a14f8:	9301      	str	r3, [sp, #4]
 80a14fa:	bd08      	pop	{r3, pc}
 80a14fc:	080601cc 	.word	0x080601cc

080a1500 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1500:	b508      	push	{r3, lr}
 80a1502:	4b02      	ldr	r3, [pc, #8]	; (80a150c <spark_cloud_flag_connected+0xc>)
 80a1504:	681b      	ldr	r3, [r3, #0]
 80a1506:	695b      	ldr	r3, [r3, #20]
 80a1508:	9301      	str	r3, [sp, #4]
 80a150a:	bd08      	pop	{r3, pc}
 80a150c:	080601cc 	.word	0x080601cc

080a1510 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1510:	b508      	push	{r3, lr}
 80a1512:	4b02      	ldr	r3, [pc, #8]	; (80a151c <spark_send_event+0xc>)
 80a1514:	681b      	ldr	r3, [r3, #0]
 80a1516:	6a1b      	ldr	r3, [r3, #32]
 80a1518:	9301      	str	r3, [sp, #4]
 80a151a:	bd08      	pop	{r3, pc}
 80a151c:	080601cc 	.word	0x080601cc

080a1520 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80a1520:	b508      	push	{r3, lr}
 80a1522:	4b02      	ldr	r3, [pc, #8]	; (80a152c <spark_sync_time+0xc>)
 80a1524:	681b      	ldr	r3, [r3, #0]
 80a1526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1528:	9301      	str	r3, [sp, #4]
 80a152a:	bd08      	pop	{r3, pc}
 80a152c:	080601cc 	.word	0x080601cc

080a1530 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1530:	b508      	push	{r3, lr}
 80a1532:	4b02      	ldr	r3, [pc, #8]	; (80a153c <spark_sync_time_pending+0xc>)
 80a1534:	681b      	ldr	r3, [r3, #0]
 80a1536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1538:	9301      	str	r3, [sp, #4]
 80a153a:	bd08      	pop	{r3, pc}
 80a153c:	080601cc 	.word	0x080601cc

080a1540 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1540:	b508      	push	{r3, lr}
 80a1542:	4b02      	ldr	r3, [pc, #8]	; (80a154c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1544:	681b      	ldr	r3, [r3, #0]
 80a1546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1548:	9301      	str	r3, [sp, #4]
 80a154a:	bd08      	pop	{r3, pc}
 80a154c:	080601cc 	.word	0x080601cc

080a1550 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1550:	b508      	push	{r3, lr}
 80a1552:	4b02      	ldr	r3, [pc, #8]	; (80a155c <network_connect+0xc>)
 80a1554:	681b      	ldr	r3, [r3, #0]
 80a1556:	685b      	ldr	r3, [r3, #4]
 80a1558:	9301      	str	r3, [sp, #4]
 80a155a:	bd08      	pop	{r3, pc}
 80a155c:	080601c8 	.word	0x080601c8

080a1560 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1560:	b508      	push	{r3, lr}
 80a1562:	4b02      	ldr	r3, [pc, #8]	; (80a156c <network_connecting+0xc>)
 80a1564:	681b      	ldr	r3, [r3, #0]
 80a1566:	689b      	ldr	r3, [r3, #8]
 80a1568:	9301      	str	r3, [sp, #4]
 80a156a:	bd08      	pop	{r3, pc}
 80a156c:	080601c8 	.word	0x080601c8

080a1570 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1570:	b508      	push	{r3, lr}
 80a1572:	4b02      	ldr	r3, [pc, #8]	; (80a157c <network_disconnect+0xc>)
 80a1574:	681b      	ldr	r3, [r3, #0]
 80a1576:	68db      	ldr	r3, [r3, #12]
 80a1578:	9301      	str	r3, [sp, #4]
 80a157a:	bd08      	pop	{r3, pc}
 80a157c:	080601c8 	.word	0x080601c8

080a1580 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1580:	b508      	push	{r3, lr}
 80a1582:	4b02      	ldr	r3, [pc, #8]	; (80a158c <network_ready+0xc>)
 80a1584:	681b      	ldr	r3, [r3, #0]
 80a1586:	691b      	ldr	r3, [r3, #16]
 80a1588:	9301      	str	r3, [sp, #4]
 80a158a:	bd08      	pop	{r3, pc}
 80a158c:	080601c8 	.word	0x080601c8

080a1590 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1590:	b508      	push	{r3, lr}
 80a1592:	4b02      	ldr	r3, [pc, #8]	; (80a159c <network_on+0xc>)
 80a1594:	681b      	ldr	r3, [r3, #0]
 80a1596:	695b      	ldr	r3, [r3, #20]
 80a1598:	9301      	str	r3, [sp, #4]
 80a159a:	bd08      	pop	{r3, pc}
 80a159c:	080601c8 	.word	0x080601c8

080a15a0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a15a0:	b508      	push	{r3, lr}
 80a15a2:	4b02      	ldr	r3, [pc, #8]	; (80a15ac <network_off+0xc>)
 80a15a4:	681b      	ldr	r3, [r3, #0]
 80a15a6:	699b      	ldr	r3, [r3, #24]
 80a15a8:	9301      	str	r3, [sp, #4]
 80a15aa:	bd08      	pop	{r3, pc}
 80a15ac:	080601c8 	.word	0x080601c8

080a15b0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a15b0:	b508      	push	{r3, lr}
 80a15b2:	4b02      	ldr	r3, [pc, #8]	; (80a15bc <network_listen+0xc>)
 80a15b4:	681b      	ldr	r3, [r3, #0]
 80a15b6:	69db      	ldr	r3, [r3, #28]
 80a15b8:	9301      	str	r3, [sp, #4]
 80a15ba:	bd08      	pop	{r3, pc}
 80a15bc:	080601c8 	.word	0x080601c8

080a15c0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a15c0:	b508      	push	{r3, lr}
 80a15c2:	4b02      	ldr	r3, [pc, #8]	; (80a15cc <network_listening+0xc>)
 80a15c4:	681b      	ldr	r3, [r3, #0]
 80a15c6:	6a1b      	ldr	r3, [r3, #32]
 80a15c8:	9301      	str	r3, [sp, #4]
 80a15ca:	bd08      	pop	{r3, pc}
 80a15cc:	080601c8 	.word	0x080601c8

080a15d0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a15d0:	b508      	push	{r3, lr}
 80a15d2:	4b02      	ldr	r3, [pc, #8]	; (80a15dc <network_set_listen_timeout+0xc>)
 80a15d4:	681b      	ldr	r3, [r3, #0]
 80a15d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a15d8:	9301      	str	r3, [sp, #4]
 80a15da:	bd08      	pop	{r3, pc}
 80a15dc:	080601c8 	.word	0x080601c8

080a15e0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a15e0:	b508      	push	{r3, lr}
 80a15e2:	4b02      	ldr	r3, [pc, #8]	; (80a15ec <network_get_listen_timeout+0xc>)
 80a15e4:	681b      	ldr	r3, [r3, #0]
 80a15e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a15e8:	9301      	str	r3, [sp, #4]
 80a15ea:	bd08      	pop	{r3, pc}
 80a15ec:	080601c8 	.word	0x080601c8

080a15f0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a15f0:	b508      	push	{r3, lr}
 80a15f2:	4b02      	ldr	r3, [pc, #8]	; (80a15fc <network_is_on+0xc>)
 80a15f4:	681b      	ldr	r3, [r3, #0]
 80a15f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	bd08      	pop	{r3, pc}
 80a15fc:	080601c8 	.word	0x080601c8

080a1600 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1600:	b508      	push	{r3, lr}
 80a1602:	4b02      	ldr	r3, [pc, #8]	; (80a160c <network_is_off+0xc>)
 80a1604:	681b      	ldr	r3, [r3, #0]
 80a1606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1608:	9301      	str	r3, [sp, #4]
 80a160a:	bd08      	pop	{r3, pc}
 80a160c:	080601c8 	.word	0x080601c8

080a1610 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1610:	b508      	push	{r3, lr}
 80a1612:	4b02      	ldr	r3, [pc, #8]	; (80a161c <malloc+0xc>)
 80a1614:	681b      	ldr	r3, [r3, #0]
 80a1616:	681b      	ldr	r3, [r3, #0]
 80a1618:	9301      	str	r3, [sp, #4]
 80a161a:	bd08      	pop	{r3, pc}
 80a161c:	080601a0 	.word	0x080601a0

080a1620 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1620:	b508      	push	{r3, lr}
 80a1622:	4b02      	ldr	r3, [pc, #8]	; (80a162c <free+0xc>)
 80a1624:	681b      	ldr	r3, [r3, #0]
 80a1626:	685b      	ldr	r3, [r3, #4]
 80a1628:	9301      	str	r3, [sp, #4]
 80a162a:	bd08      	pop	{r3, pc}
 80a162c:	080601a0 	.word	0x080601a0

080a1630 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1630:	b508      	push	{r3, lr}
 80a1632:	4b02      	ldr	r3, [pc, #8]	; (80a163c <realloc+0xc>)
 80a1634:	681b      	ldr	r3, [r3, #0]
 80a1636:	689b      	ldr	r3, [r3, #8]
 80a1638:	9301      	str	r3, [sp, #4]
 80a163a:	bd08      	pop	{r3, pc}
 80a163c:	080601a0 	.word	0x080601a0

080a1640 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a1640:	b508      	push	{r3, lr}
 80a1642:	4b02      	ldr	r3, [pc, #8]	; (80a164c <siprintf+0xc>)
 80a1644:	681b      	ldr	r3, [r3, #0]
 80a1646:	691b      	ldr	r3, [r3, #16]
 80a1648:	9301      	str	r3, [sp, #4]
 80a164a:	bd08      	pop	{r3, pc}
 80a164c:	080601a0 	.word	0x080601a0

080a1650 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a1650:	b508      	push	{r3, lr}
 80a1652:	4b02      	ldr	r3, [pc, #8]	; (80a165c <siscanf+0xc>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	699b      	ldr	r3, [r3, #24]
 80a1658:	9301      	str	r3, [sp, #4]
 80a165a:	bd08      	pop	{r3, pc}
 80a165c:	080601a0 	.word	0x080601a0

080a1660 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a1660:	b508      	push	{r3, lr}
 80a1662:	4b02      	ldr	r3, [pc, #8]	; (80a166c <snprintf+0xc>)
 80a1664:	681b      	ldr	r3, [r3, #0]
 80a1666:	69db      	ldr	r3, [r3, #28]
 80a1668:	9301      	str	r3, [sp, #4]
 80a166a:	bd08      	pop	{r3, pc}
 80a166c:	080601a0 	.word	0x080601a0

080a1670 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1670:	b508      	push	{r3, lr}
 80a1672:	4b02      	ldr	r3, [pc, #8]	; (80a167c <abort+0xc>)
 80a1674:	681b      	ldr	r3, [r3, #0]
 80a1676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1678:	9301      	str	r3, [sp, #4]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	080601a0 	.word	0x080601a0

080a1680 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <_malloc_r+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	080601a0 	.word	0x080601a0

080a1690 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <newlib_impure_ptr_callback+0xc>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1698:	9301      	str	r3, [sp, #4]
 80a169a:	bd08      	pop	{r3, pc}
 80a169c:	080601a0 	.word	0x080601a0

080a16a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a16a0:	2100      	movs	r1, #0
 80a16a2:	f7ff becf 	b.w	80a1444 <system_delay_ms>

080a16a6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a16a6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a16a8:	6883      	ldr	r3, [r0, #8]
 80a16aa:	4604      	mov	r4, r0
 80a16ac:	b90b      	cbnz	r3, 80a16b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a16ae:	f001 fab6 	bl	80a2c1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a16b2:	68c3      	ldr	r3, [r0, #12]
 80a16b4:	4798      	blx	r3
      if (_M_manager)
 80a16b6:	68a3      	ldr	r3, [r4, #8]
 80a16b8:	b11b      	cbz	r3, 80a16c2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a16ba:	2203      	movs	r2, #3
 80a16bc:	4621      	mov	r1, r4
 80a16be:	4620      	mov	r0, r4
 80a16c0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a16c2:	4620      	mov	r0, r4
}
 80a16c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a16c8:	2110      	movs	r1, #16
 80a16ca:	f001 baa4 	b.w	80a2c16 <_ZdlPvj>

080a16ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a16ce:	4770      	bx	lr

080a16d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a16d0:	2000      	movs	r0, #0
 80a16d2:	4770      	bx	lr

080a16d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a16d4:	b510      	push	{r4, lr}
 80a16d6:	4604      	mov	r4, r0
 80a16d8:	2110      	movs	r1, #16
 80a16da:	f001 fa9c 	bl	80a2c16 <_ZdlPvj>
 80a16de:	4620      	mov	r0, r4
 80a16e0:	bd10      	pop	{r4, pc}

080a16e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a16e2:	b508      	push	{r3, lr}
      { delete this; }
 80a16e4:	f7ff fff6 	bl	80a16d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a16e8:	bd08      	pop	{r3, pc}

080a16ea <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a16ea:	b510      	push	{r4, lr}
      if (_M_manager)
 80a16ec:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a16ee:	4604      	mov	r4, r0
      if (_M_manager)
 80a16f0:	b113      	cbz	r3, 80a16f8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a16f2:	2203      	movs	r2, #3
 80a16f4:	4601      	mov	r1, r0
 80a16f6:	4798      	blx	r3
    }
 80a16f8:	4620      	mov	r0, r4
 80a16fa:	bd10      	pop	{r4, pc}

080a16fc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a16fc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a16fe:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a1700:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a1704:	6002      	str	r2, [r0, #0]
 80a1706:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1708:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a170a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a170c:	680c      	ldr	r4, [r1, #0]
 80a170e:	8085      	strh	r5, [r0, #4]
 80a1710:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1712:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1714:	bd30      	pop	{r4, r5, pc}

080a1716 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1716:	b510      	push	{r4, lr}
 80a1718:	4604      	mov	r4, r0
    free((void*)msg_);
 80a171a:	6800      	ldr	r0, [r0, #0]
 80a171c:	f7ff ff80 	bl	80a1620 <free>
}
 80a1720:	4620      	mov	r0, r4
 80a1722:	bd10      	pop	{r4, pc}

080a1724 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a1724:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1726:	68c4      	ldr	r4, [r0, #12]
 80a1728:	b1f4      	cbz	r4, 80a1768 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a172a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a172c:	2b02      	cmp	r3, #2
 80a172e:	d103      	bne.n	80a1738 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1730:	f104 000c 	add.w	r0, r4, #12
 80a1734:	f7ff ffef 	bl	80a1716 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1738:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a173a:	b135      	cbz	r5, 80a174a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a173c:	4628      	mov	r0, r5
 80a173e:	f7ff ffd4 	bl	80a16ea <_ZNSt14_Function_baseD1Ev>
 80a1742:	2110      	movs	r1, #16
 80a1744:	4628      	mov	r0, r5
 80a1746:	f001 fa66 	bl	80a2c16 <_ZdlPvj>
 80a174a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a174c:	b135      	cbz	r5, 80a175c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a174e:	4628      	mov	r0, r5
 80a1750:	f7ff ffcb 	bl	80a16ea <_ZNSt14_Function_baseD1Ev>
 80a1754:	2110      	movs	r1, #16
 80a1756:	4628      	mov	r0, r5
 80a1758:	f001 fa5d 	bl	80a2c16 <_ZdlPvj>
 80a175c:	4620      	mov	r0, r4
 80a175e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1762:	2114      	movs	r1, #20
 80a1764:	f001 ba57 	b.w	80a2c16 <_ZdlPvj>
 80a1768:	bd38      	pop	{r3, r4, r5, pc}

080a176a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a176a:	b510      	push	{r4, lr}
 80a176c:	b088      	sub	sp, #32
 80a176e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1770:	4668      	mov	r0, sp
 80a1772:	f000 fc88 	bl	80a2086 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a1776:	4669      	mov	r1, sp
 80a1778:	a804      	add	r0, sp, #16
 80a177a:	f000 fca6 	bl	80a20ca <_ZN6StringC1ERKS_>
 80a177e:	a804      	add	r0, sp, #16
 80a1780:	47a0      	blx	r4
 80a1782:	4604      	mov	r4, r0
 80a1784:	a804      	add	r0, sp, #16
 80a1786:	f000 fc34 	bl	80a1ff2 <_ZN6StringD1Ev>
    String p(param);
 80a178a:	4668      	mov	r0, sp
 80a178c:	f000 fc31 	bl	80a1ff2 <_ZN6StringD1Ev>
}
 80a1790:	4620      	mov	r0, r4
 80a1792:	b008      	add	sp, #32
 80a1794:	bd10      	pop	{r4, pc}

080a1796 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a1796:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a1798:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a179a:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a179c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a17a0:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a17a2:	4669      	mov	r1, sp
 80a17a4:	461a      	mov	r2, r3
 80a17a6:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a17a8:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a17ac:	f8ad 4000 	strh.w	r4, [sp]
 80a17b0:	f7ff fe96 	bl	80a14e0 <spark_function>
}
 80a17b4:	b004      	add	sp, #16
 80a17b6:	bd10      	pop	{r4, pc}

080a17b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a17b8:	680b      	ldr	r3, [r1, #0]
 80a17ba:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a17bc:	b113      	cbz	r3, 80a17c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a17be:	685a      	ldr	r2, [r3, #4]
 80a17c0:	3201      	adds	r2, #1
 80a17c2:	605a      	str	r2, [r3, #4]
      }
 80a17c4:	4770      	bx	lr

080a17c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a17c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a17c8:	460e      	mov	r6, r1
 80a17ca:	4604      	mov	r4, r0
 80a17cc:	f856 3b04 	ldr.w	r3, [r6], #4
 80a17d0:	460d      	mov	r5, r1
 80a17d2:	a801      	add	r0, sp, #4
 80a17d4:	4631      	mov	r1, r6
 80a17d6:	9300      	str	r3, [sp, #0]
 80a17d8:	f7ff ffee 	bl	80a17b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a17dc:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a17de:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a17e0:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a17e2:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a17e4:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a17e6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a17e8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a17ea:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a17ec:	f7fe fd5b 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17f0:	4630      	mov	r0, r6
 80a17f2:	f7fe fd58 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a17f6:	4628      	mov	r0, r5
 80a17f8:	2108      	movs	r1, #8
 80a17fa:	f001 fa0c 	bl	80a2c16 <_ZdlPvj>
        return p;
    }
 80a17fe:	4620      	mov	r0, r4
 80a1800:	b002      	add	sp, #8
 80a1802:	bd70      	pop	{r4, r5, r6, pc}

080a1804 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a1804:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1806:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a1808:	460b      	mov	r3, r1
 80a180a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a180c:	c803      	ldmia	r0, {r0, r1}
 80a180e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1812:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1816:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a181a:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a181e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1822:	b002      	add	sp, #8
 80a1824:	bd10      	pop	{r4, pc}

080a1826 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a1826:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a1828:	b510      	push	{r4, lr}
      if (_M_empty())
 80a182a:	b90a      	cbnz	r2, 80a1830 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a182c:	f001 f9f7 	bl	80a2c1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1830:	68c3      	ldr	r3, [r0, #12]
    }
 80a1832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1836:	4718      	bx	r3

080a1838 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1838:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a183a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a183c:	f100 0110 	add.w	r1, r0, #16
 80a1840:	f7ff fff1 	bl	80a1826 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a1844:	bd08      	pop	{r3, pc}

080a1846 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a1846:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a1848:	b510      	push	{r4, lr}
      if (_M_empty())
 80a184a:	b90a      	cbnz	r2, 80a1850 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a184c:	f001 f9e7 	bl	80a2c1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1850:	68c3      	ldr	r3, [r0, #12]
    }
 80a1852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1856:	4718      	bx	r3

080a1858 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1858:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a185a:	6800      	ldr	r0, [r0, #0]
 80a185c:	f100 0110 	add.w	r1, r0, #16
 80a1860:	f7ff fff1 	bl	80a1846 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a1864:	bd08      	pop	{r3, pc}
	...

080a1868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1868:	b538      	push	{r3, r4, r5, lr}
 80a186a:	2300      	movs	r3, #0
 80a186c:	4604      	mov	r4, r0
 80a186e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1870:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1872:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1874:	f7fe fc11 	bl	80a009a <_Znwj>
 80a1878:	b128      	cbz	r0, 80a1886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a187a:	2301      	movs	r3, #1
 80a187c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1880:	4b02      	ldr	r3, [pc, #8]	; (80a188c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1882:	60c5      	str	r5, [r0, #12]
 80a1884:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1886:	6020      	str	r0, [r4, #0]
	}
 80a1888:	4620      	mov	r0, r4
 80a188a:	bd38      	pop	{r3, r4, r5, pc}
 80a188c:	080a4d20 	.word	0x080a4d20

080a1890 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1890:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1892:	2300      	movs	r3, #0
 80a1894:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a1896:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1898:	4604      	mov	r4, r0
 80a189a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a189c:	b12b      	cbz	r3, 80a18aa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a189e:	2202      	movs	r2, #2
 80a18a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a18a2:	68eb      	ldr	r3, [r5, #12]
 80a18a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a18a6:	68ab      	ldr	r3, [r5, #8]
 80a18a8:	60a3      	str	r3, [r4, #8]
    }
 80a18aa:	4620      	mov	r0, r4
 80a18ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080a18b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a18b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a18b2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a18b4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a18b6:	4668      	mov	r0, sp
 80a18b8:	f7ff ff20 	bl	80a16fc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a18bc:	f04f 0302 	mov.w	r3, #2
 80a18c0:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a18c4:	2a00      	cmp	r2, #0
 80a18c6:	d103      	bne.n	80a18d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a18c8:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a18cc:	2900      	cmp	r1, #0
 80a18ce:	d1f7      	bne.n	80a18c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a18d0:	d125      	bne.n	80a191e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a18d2:	f104 050c 	add.w	r5, r4, #12
 80a18d6:	4669      	mov	r1, sp
 80a18d8:	4628      	mov	r0, r5
 80a18da:	f7ff ff0f 	bl	80a16fc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a18de:	2301      	movs	r3, #1
 80a18e0:	f3bf 8f5b 	dmb	ish
 80a18e4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a18e6:	2000      	movs	r0, #0
 80a18e8:	f3bf 8f5b 	dmb	ish
 80a18ec:	f104 0308 	add.w	r3, r4, #8
 80a18f0:	e853 6f00 	ldrex	r6, [r3]
 80a18f4:	e843 0200 	strex	r2, r0, [r3]
 80a18f8:	2a00      	cmp	r2, #0
 80a18fa:	d1f9      	bne.n	80a18f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a18fc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1900:	b16e      	cbz	r6, 80a191e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a1902:	f7ff fdaf 	bl	80a1464 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1906:	b178      	cbz	r0, 80a1928 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1908:	4629      	mov	r1, r5
 80a190a:	4630      	mov	r0, r6
 80a190c:	f7ff ff8b 	bl	80a1826 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a1910:	4630      	mov	r0, r6
 80a1912:	f7ff feea 	bl	80a16ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a1916:	2110      	movs	r1, #16
 80a1918:	4630      	mov	r0, r6
 80a191a:	f001 f97c 	bl	80a2c16 <_ZdlPvj>
        p_->setError(std::move(error));
 80a191e:	4668      	mov	r0, sp
 80a1920:	f7ff fef9 	bl	80a1716 <_ZN8particle5ErrorD1Ev>
    }
 80a1924:	b009      	add	sp, #36	; 0x24
 80a1926:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1928:	4631      	mov	r1, r6
 80a192a:	a802      	add	r0, sp, #8
 80a192c:	f7ff ffb0 	bl	80a1890 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1930:	68e0      	ldr	r0, [r4, #12]
 80a1932:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1936:	b108      	cbz	r0, 80a193c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a1938:	f002 fb44 	bl	80a3fc4 <strdup>
        type_(type) {
 80a193c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a193e:	2010      	movs	r0, #16
 80a1940:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1944:	f7fe fba9 	bl	80a009a <_Znwj>
 80a1948:	4605      	mov	r5, r0
 80a194a:	b1e8      	cbz	r0, 80a1988 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a194c:	2700      	movs	r7, #0
 80a194e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1950:	2018      	movs	r0, #24
 80a1952:	f7fe fba2 	bl	80a009a <_Znwj>
 80a1956:	4604      	mov	r4, r0
 80a1958:	b188      	cbz	r0, 80a197e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a195a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a195c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a195e:	a802      	add	r0, sp, #8
 80a1960:	f7ff ff50 	bl	80a1804 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1964:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1966:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1968:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a196a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a196c:	9204      	str	r2, [sp, #16]
 80a196e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1970:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1972:	60e3      	str	r3, [r4, #12]
 80a1974:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a1978:	9205      	str	r2, [sp, #20]
 80a197a:	f7ff febf 	bl	80a16fc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a197e:	4b08      	ldr	r3, [pc, #32]	; (80a19a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1980:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1982:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1984:	4b07      	ldr	r3, [pc, #28]	; (80a19a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a1986:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a1988:	a806      	add	r0, sp, #24
 80a198a:	f7ff fec4 	bl	80a1716 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a198e:	a802      	add	r0, sp, #8
 80a1990:	f7ff feab 	bl	80a16ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1994:	2200      	movs	r2, #0
 80a1996:	4629      	mov	r1, r5
 80a1998:	4803      	ldr	r0, [pc, #12]	; (80a19a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a199a:	f7ff fd6b 	bl	80a1474 <application_thread_invoke>
 80a199e:	e7b7      	b.n	80a1910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a19a0:	080a1839 	.word	0x080a1839
 80a19a4:	080a1ad1 	.word	0x080a1ad1
 80a19a8:	080a16a7 	.word	0x080a16a7

080a19ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a19ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a19b0:	b08a      	sub	sp, #40	; 0x28
 80a19b2:	4605      	mov	r5, r0
 80a19b4:	460c      	mov	r4, r1
 80a19b6:	4617      	mov	r7, r2
 80a19b8:	4698      	mov	r8, r3
 80a19ba:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a19be:	f7ff fd9f 	bl	80a1500 <spark_cloud_flag_connected>
 80a19c2:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a19c4:	4682      	mov	sl, r0
 80a19c6:	bb38      	cbnz	r0, 80a1a18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a19c8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a19cc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a19ce:	a905      	add	r1, sp, #20
 80a19d0:	4630      	mov	r0, r6
 80a19d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a19d6:	f7ff fe91 	bl	80a16fc <_ZN8particle5ErrorC1EOS0_>
 80a19da:	2014      	movs	r0, #20
 80a19dc:	f7fe fb5d 	bl	80a009a <_Znwj>
 80a19e0:	4604      	mov	r4, r0
 80a19e2:	b148      	cbz	r0, 80a19f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a19e4:	2302      	movs	r3, #2
 80a19e6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a19e8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a19ea:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a19ee:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a19f0:	4631      	mov	r1, r6
 80a19f2:	300c      	adds	r0, #12
 80a19f4:	f7ff fe82 	bl	80a16fc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a19f8:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a19fa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a19fc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a1a00:	f7ff ff32 	bl	80a1868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1a04:	4630      	mov	r0, r6
 80a1a06:	f7ff fe86 	bl	80a1716 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1a0a:	a805      	add	r0, sp, #20
 80a1a0c:	f7ff fe83 	bl	80a1716 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a1a10:	4628      	mov	r0, r5
 80a1a12:	b00a      	add	sp, #40	; 0x28
 80a1a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1a18:	230c      	movs	r3, #12
 80a1a1a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1a1e:	2014      	movs	r0, #20
 80a1a20:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a1a24:	9307      	str	r3, [sp, #28]
 80a1a26:	f7fe fb38 	bl	80a009a <_Znwj>
 80a1a2a:	4601      	mov	r1, r0
 80a1a2c:	b128      	cbz	r0, 80a1a3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1a2e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a1a32:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1a36:	f880 a001 	strb.w	sl, [r0, #1]
 80a1a3a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1a3c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a1a3e:	f7ff ff13 	bl	80a1868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a1a42:	4b22      	ldr	r3, [pc, #136]	; (80a1acc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1a44:	2008      	movs	r0, #8
 80a1a46:	9308      	str	r3, [sp, #32]
 80a1a48:	f7fe fb27 	bl	80a009a <_Znwj>
 80a1a4c:	4682      	mov	sl, r0
 80a1a4e:	b128      	cbz	r0, 80a1a5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1a50:	9b03      	ldr	r3, [sp, #12]
 80a1a52:	a904      	add	r1, sp, #16
 80a1a54:	f840 3b04 	str.w	r3, [r0], #4
 80a1a58:	f7ff feae 	bl	80a17b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a5c:	4642      	mov	r2, r8
 80a1a5e:	4639      	mov	r1, r7
 80a1a60:	4620      	mov	r0, r4
 80a1a62:	9600      	str	r6, [sp, #0]
 80a1a64:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a1a68:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a6c:	f7ff fd50 	bl	80a1510 <spark_send_event>
 80a1a70:	b9b8      	cbnz	r0, 80a1aa2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a1a72:	9b03      	ldr	r3, [sp, #12]
 80a1a74:	785b      	ldrb	r3, [r3, #1]
 80a1a76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1a7a:	b993      	cbnz	r3, 80a1aa2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a1a7c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a1a80:	a905      	add	r1, sp, #20
 80a1a82:	a803      	add	r0, sp, #12
 80a1a84:	9205      	str	r2, [sp, #20]
 80a1a86:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1a8a:	f7ff ff11 	bl	80a18b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1a8e:	a805      	add	r0, sp, #20
 80a1a90:	f7ff fe41 	bl	80a1716 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1a94:	a805      	add	r0, sp, #20
 80a1a96:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1a98:	f7ff fe95 	bl	80a17c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a1a9c:	a806      	add	r0, sp, #24
 80a1a9e:	f7fe fc02 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1aa2:	9b03      	ldr	r3, [sp, #12]
 80a1aa4:	a904      	add	r1, sp, #16
 80a1aa6:	a806      	add	r0, sp, #24
 80a1aa8:	9305      	str	r3, [sp, #20]
 80a1aaa:	f7ff fe85 	bl	80a17b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1aae:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1ab0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1ab2:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a1ab4:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a1ab6:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a1ab8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a1aba:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a1abc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a1abe:	f7fe fbf2 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ac2:	a804      	add	r0, sp, #16
 80a1ac4:	f7fe fbef 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a1ac8:	e7a2      	b.n	80a1a10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a1aca:	bf00      	nop
 80a1acc:	080a1b95 	.word	0x080a1b95

080a1ad0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a1ad0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ad4:	4605      	mov	r5, r0
	  switch (__op)
 80a1ad6:	d007      	beq.n	80a1ae8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a1ad8:	2a03      	cmp	r2, #3
 80a1ada:	d018      	beq.n	80a1b0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a1adc:	2a01      	cmp	r2, #1
 80a1ade:	d101      	bne.n	80a1ae4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1ae0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1ae2:	6003      	str	r3, [r0, #0]
	}
 80a1ae4:	2000      	movs	r0, #0
 80a1ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1ae8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a1aea:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1aec:	f7fe fad5 	bl	80a009a <_Znwj>
 80a1af0:	4604      	mov	r4, r0
 80a1af2:	b150      	cbz	r0, 80a1b0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1af4:	4631      	mov	r1, r6
 80a1af6:	f7ff fecb 	bl	80a1890 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1afa:	6930      	ldr	r0, [r6, #16]
 80a1afc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1b00:	b108      	cbz	r0, 80a1b06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a1b02:	f002 fa5f 	bl	80a3fc4 <strdup>
        type_(type) {
 80a1b06:	6120      	str	r0, [r4, #16]
 80a1b08:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a1b0a:	602c      	str	r4, [r5, #0]
	}
 80a1b0c:	e7ea      	b.n	80a1ae4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1b0e:	6804      	ldr	r4, [r0, #0]
 80a1b10:	2c00      	cmp	r4, #0
 80a1b12:	d0e7      	beq.n	80a1ae4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a1b14:	f104 0010 	add.w	r0, r4, #16
 80a1b18:	f7ff fdfd 	bl	80a1716 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a1b1c:	4620      	mov	r0, r4
 80a1b1e:	f7ff fde4 	bl	80a16ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1b22:	2118      	movs	r1, #24
 80a1b24:	4620      	mov	r0, r4
 80a1b26:	f001 f876 	bl	80a2c16 <_ZdlPvj>
 80a1b2a:	e7db      	b.n	80a1ae4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a1b2c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a1b2c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1b2e:	2300      	movs	r3, #0
 80a1b30:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a1b32:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1b34:	4604      	mov	r4, r0
 80a1b36:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a1b38:	b12b      	cbz	r3, 80a1b46 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1b3a:	2202      	movs	r2, #2
 80a1b3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1b3e:	68eb      	ldr	r3, [r5, #12]
 80a1b40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1b42:	68ab      	ldr	r3, [r5, #8]
 80a1b44:	60a3      	str	r3, [r4, #8]
    }
 80a1b46:	4620      	mov	r0, r4
 80a1b48:	bd38      	pop	{r3, r4, r5, pc}

080a1b4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a1b4a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1b4c:	b570      	push	{r4, r5, r6, lr}
 80a1b4e:	4604      	mov	r4, r0
	  switch (__op)
 80a1b50:	d007      	beq.n	80a1b62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a1b52:	2a03      	cmp	r2, #3
 80a1b54:	d012      	beq.n	80a1b7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a1b56:	2a01      	cmp	r2, #1
 80a1b58:	d101      	bne.n	80a1b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1b5a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1b5c:	6003      	str	r3, [r0, #0]
	}
 80a1b5e:	2000      	movs	r0, #0
 80a1b60:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1b62:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a1b64:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1b66:	f7fe fa98 	bl	80a009a <_Znwj>
 80a1b6a:	4605      	mov	r5, r0
 80a1b6c:	b120      	cbz	r0, 80a1b78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a1b6e:	4631      	mov	r1, r6
 80a1b70:	f7ff ffdc 	bl	80a1b2c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1b74:	7c33      	ldrb	r3, [r6, #16]
 80a1b76:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1b78:	6025      	str	r5, [r4, #0]
	}
 80a1b7a:	e7f0      	b.n	80a1b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1b7c:	6804      	ldr	r4, [r0, #0]
 80a1b7e:	2c00      	cmp	r4, #0
 80a1b80:	d0ed      	beq.n	80a1b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a1b82:	4620      	mov	r0, r4
 80a1b84:	f7ff fdb1 	bl	80a16ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1b88:	2114      	movs	r1, #20
 80a1b8a:	4620      	mov	r0, r4
 80a1b8c:	f001 f843 	bl	80a2c16 <_ZdlPvj>
 80a1b90:	e7e5      	b.n	80a1b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a1b94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1b96:	4604      	mov	r4, r0
 80a1b98:	b089      	sub	sp, #36	; 0x24
 80a1b9a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1b9c:	a801      	add	r0, sp, #4
 80a1b9e:	4611      	mov	r1, r2
 80a1ba0:	f7ff fe11 	bl	80a17c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1ba4:	b1a4      	cbz	r4, 80a1bd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1ba6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1ba8:	b11d      	cbz	r5, 80a1bb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a1baa:	4628      	mov	r0, r5
 80a1bac:	f002 fa0a 	bl	80a3fc4 <strdup>
 80a1bb0:	4605      	mov	r5, r0
 80a1bb2:	a801      	add	r0, sp, #4
 80a1bb4:	a903      	add	r1, sp, #12
        type_(type) {
 80a1bb6:	9503      	str	r5, [sp, #12]
 80a1bb8:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a1bbc:	f7ff fe78 	bl	80a18b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1bc0:	a803      	add	r0, sp, #12
 80a1bc2:	f7ff fda8 	bl	80a1716 <_ZN8particle5ErrorD1Ev>
 80a1bc6:	a802      	add	r0, sp, #8
 80a1bc8:	f7fe fb6d 	bl	80a02a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1bcc:	b009      	add	sp, #36	; 0x24
 80a1bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1bd0:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a1bd2:	9d01      	ldr	r5, [sp, #4]
 80a1bd4:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1bd8:	2a00      	cmp	r2, #0
 80a1bda:	d103      	bne.n	80a1be4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a1bdc:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1be0:	2900      	cmp	r1, #0
 80a1be2:	d1f7      	bne.n	80a1bd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a1be4:	d1ef      	bne.n	80a1bc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a1be6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1be8:	f3bf 8f5b 	dmb	ish
 80a1bec:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1bee:	f3bf 8f5b 	dmb	ish
 80a1bf2:	1d2b      	adds	r3, r5, #4
 80a1bf4:	e853 6f00 	ldrex	r6, [r3]
 80a1bf8:	e843 4200 	strex	r2, r4, [r3]
 80a1bfc:	2a00      	cmp	r2, #0
 80a1bfe:	d1f9      	bne.n	80a1bf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a1c00:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1c04:	2e00      	cmp	r6, #0
 80a1c06:	d0de      	beq.n	80a1bc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a1c08:	4620      	mov	r0, r4
 80a1c0a:	f7ff fc2b 	bl	80a1464 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1c0e:	4607      	mov	r7, r0
 80a1c10:	b160      	cbz	r0, 80a1c2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1c12:	4630      	mov	r0, r6
 80a1c14:	f105 010c 	add.w	r1, r5, #12
 80a1c18:	f7ff fe15 	bl	80a1846 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a1c1c:	4630      	mov	r0, r6
 80a1c1e:	f7ff fd64 	bl	80a16ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a1c22:	2110      	movs	r1, #16
 80a1c24:	4630      	mov	r0, r6
 80a1c26:	f000 fff6 	bl	80a2c16 <_ZdlPvj>
 80a1c2a:	e7cc      	b.n	80a1bc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1c2c:	4631      	mov	r1, r6
 80a1c2e:	a803      	add	r0, sp, #12
 80a1c30:	f7ff ff7c 	bl	80a1b2c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1c34:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1c36:	2010      	movs	r0, #16
 80a1c38:	f88d 301c 	strb.w	r3, [sp, #28]
 80a1c3c:	f7fe fa2d 	bl	80a009a <_Znwj>
 80a1c40:	4605      	mov	r5, r0
 80a1c42:	b1d0      	cbz	r0, 80a1c7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a1c44:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c46:	2014      	movs	r0, #20
 80a1c48:	f7fe fa27 	bl	80a009a <_Znwj>
 80a1c4c:	4604      	mov	r4, r0
 80a1c4e:	b178      	cbz	r0, 80a1c70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a1c50:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a1c52:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1c54:	a803      	add	r0, sp, #12
 80a1c56:	f7ff fdd5 	bl	80a1804 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c5a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1c5c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c5e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c60:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a1c62:	9205      	str	r2, [sp, #20]
 80a1c64:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c66:	60e3      	str	r3, [r4, #12]
 80a1c68:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a1c6c:	9206      	str	r2, [sp, #24]
 80a1c6e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c70:	4b06      	ldr	r3, [pc, #24]	; (80a1c8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c72:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c74:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1c76:	4b06      	ldr	r3, [pc, #24]	; (80a1c90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1c78:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a1c7a:	a803      	add	r0, sp, #12
 80a1c7c:	f7ff fd35 	bl	80a16ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1c80:	2200      	movs	r2, #0
 80a1c82:	4629      	mov	r1, r5
 80a1c84:	4803      	ldr	r0, [pc, #12]	; (80a1c94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a1c86:	f7ff fbf5 	bl	80a1474 <application_thread_invoke>
 80a1c8a:	e7c7      	b.n	80a1c1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a1c8c:	080a1859 	.word	0x080a1859
 80a1c90:	080a1b4b 	.word	0x080a1b4b
 80a1c94:	080a16a7 	.word	0x080a16a7

080a1c98 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1c98:	4770      	bx	lr

080a1c9a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c9c:	4606      	mov	r6, r0
 80a1c9e:	4615      	mov	r5, r2
 80a1ca0:	460c      	mov	r4, r1
 80a1ca2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1ca4:	42bc      	cmp	r4, r7
 80a1ca6:	d006      	beq.n	80a1cb6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1ca8:	6833      	ldr	r3, [r6, #0]
 80a1caa:	4630      	mov	r0, r6
 80a1cac:	689b      	ldr	r3, [r3, #8]
 80a1cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1cb2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1cb4:	e7f6      	b.n	80a1ca4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1cb6:	4628      	mov	r0, r5
 80a1cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1cba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1cba:	2200      	movs	r2, #0
 80a1cbc:	7c00      	ldrb	r0, [r0, #16]
 80a1cbe:	f7ff badf 	b.w	80a1280 <hal_i2c_write>

080a1cc2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1cc2:	2100      	movs	r1, #0
 80a1cc4:	7c00      	ldrb	r0, [r0, #16]
 80a1cc6:	f7ff bae3 	b.w	80a1290 <hal_i2c_available>

080a1cca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1cca:	2100      	movs	r1, #0
 80a1ccc:	7c00      	ldrb	r0, [r0, #16]
 80a1cce:	f7ff bae7 	b.w	80a12a0 <hal_i2c_read>

080a1cd2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1cd2:	2100      	movs	r1, #0
 80a1cd4:	7c00      	ldrb	r0, [r0, #16]
 80a1cd6:	f7ff baeb 	b.w	80a12b0 <hal_i2c_peek>

080a1cda <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1cda:	2100      	movs	r1, #0
 80a1cdc:	7c00      	ldrb	r0, [r0, #16]
 80a1cde:	f7ff baef 	b.w	80a12c0 <hal_i2c_flush>

080a1ce2 <_ZN7TwoWireD0Ev>:
 80a1ce2:	b510      	push	{r4, lr}
 80a1ce4:	4604      	mov	r4, r0
 80a1ce6:	2114      	movs	r1, #20
 80a1ce8:	f000 ff95 	bl	80a2c16 <_ZdlPvj>
 80a1cec:	4620      	mov	r0, r4
 80a1cee:	bd10      	pop	{r4, pc}

080a1cf0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1cf0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1cf6:	4604      	mov	r4, r0
 80a1cf8:	4608      	mov	r0, r1
 80a1cfa:	2100      	movs	r1, #0
 80a1cfc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1d00:	4b03      	ldr	r3, [pc, #12]	; (80a1d10 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1d02:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1d04:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1d06:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1d08:	f7ff faea 	bl	80a12e0 <hal_i2c_init>
}
 80a1d0c:	4620      	mov	r0, r4
 80a1d0e:	bd10      	pop	{r4, pc}
 80a1d10:	080a4d3c 	.word	0x080a4d3c

080a1d14 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a1d14:	4700      	bx	r0
	...

080a1d18 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1d18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a1d1c:	2400      	movs	r4, #0
{
 80a1d1e:	461d      	mov	r5, r3
 80a1d20:	460f      	mov	r7, r1
 80a1d22:	4690      	mov	r8, r2
 80a1d24:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 80a1d26:	f7ff fa93 	bl	80a1250 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1d2a:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a1d2c:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1d2e:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80a1d32:	bfa8      	it	ge
 80a1d34:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 80a1d38:	f8ad 400d 	strh.w	r4, [sp, #13]
 80a1d3c:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 80a1d40:	bfa4      	itt	ge
 80a1d42:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80a1d44:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a1d48:	463a      	mov	r2, r7
 80a1d4a:	4643      	mov	r3, r8
 80a1d4c:	4630      	mov	r0, r6
 80a1d4e:	4906      	ldr	r1, [pc, #24]	; (80a1d68 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 80a1d50:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a1d52:	bfa8      	it	ge
 80a1d54:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a1d58:	f7ff fa72 	bl	80a1240 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80a1d5c:	fab0 f080 	clz	r0, r0
 80a1d60:	0940      	lsrs	r0, r0, #5
 80a1d62:	b004      	add	sp, #16
 80a1d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1d68:	080a1d15 	.word	0x080a1d15

080a1d6c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1d6c:	4770      	bx	lr

080a1d6e <_ZN9IPAddressD0Ev>:
 80a1d6e:	b510      	push	{r4, lr}
 80a1d70:	4604      	mov	r4, r0
 80a1d72:	2118      	movs	r1, #24
 80a1d74:	f000 ff4f 	bl	80a2c16 <_ZdlPvj>
 80a1d78:	4620      	mov	r0, r4
 80a1d7a:	bd10      	pop	{r4, pc}

080a1d7c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d7e:	460e      	mov	r6, r1
 80a1d80:	2400      	movs	r4, #0
 80a1d82:	f100 0708 	add.w	r7, r0, #8
 80a1d86:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1d88:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1d8c:	220a      	movs	r2, #10
 80a1d8e:	4630      	mov	r0, r6
 80a1d90:	f000 f8ef 	bl	80a1f72 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1d94:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1d96:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1d98:	d101      	bne.n	80a1d9e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1d9a:	4620      	mov	r0, r4
 80a1d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1d9e:	2c00      	cmp	r4, #0
 80a1da0:	d0f2      	beq.n	80a1d88 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1da2:	212e      	movs	r1, #46	; 0x2e
 80a1da4:	4630      	mov	r0, r6
 80a1da6:	f000 f8e1 	bl	80a1f6c <_ZN5Print5printEc>
 80a1daa:	4404      	add	r4, r0
 80a1dac:	e7ec      	b.n	80a1d88 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1db0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1db0:	b510      	push	{r4, lr}
 80a1db2:	4604      	mov	r4, r0
 80a1db4:	4b04      	ldr	r3, [pc, #16]	; (80a1dc8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1db6:	2211      	movs	r2, #17
 80a1db8:	2100      	movs	r1, #0
 80a1dba:	f840 3b04 	str.w	r3, [r0], #4
 80a1dbe:	f002 f8c3 	bl	80a3f48 <memset>
}
 80a1dc2:	4620      	mov	r0, r4
 80a1dc4:	bd10      	pop	{r4, pc}
 80a1dc6:	bf00      	nop
 80a1dc8:	080a4d64 	.word	0x080a4d64

080a1dcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1dcc:	4603      	mov	r3, r0
 80a1dce:	4a07      	ldr	r2, [pc, #28]	; (80a1dec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1dd0:	b510      	push	{r4, lr}
 80a1dd2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1dd6:	f101 0210 	add.w	r2, r1, #16
 80a1dda:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1dde:	4291      	cmp	r1, r2
 80a1de0:	f843 4b04 	str.w	r4, [r3], #4
 80a1de4:	d1f9      	bne.n	80a1dda <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1de6:	780a      	ldrb	r2, [r1, #0]
 80a1de8:	701a      	strb	r2, [r3, #0]
}
 80a1dea:	bd10      	pop	{r4, pc}
 80a1dec:	080a4d64 	.word	0x080a4d64

080a1df0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a1df0:	4a02      	ldr	r2, [pc, #8]	; (80a1dfc <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a1df2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1df6:	2204      	movs	r2, #4
 80a1df8:	7502      	strb	r2, [r0, #20]
}
 80a1dfa:	4770      	bx	lr
 80a1dfc:	080a4d64 	.word	0x080a4d64

080a1e00 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1e00:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1e02:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1e06:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1e0a:	2304      	movs	r3, #4
 80a1e0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1e10:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1e14:	6044      	str	r4, [r0, #4]
 80a1e16:	7503      	strb	r3, [r0, #20]
}
 80a1e18:	bd10      	pop	{r4, pc}
	...

080a1e1c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e1e:	4d04      	ldr	r5, [pc, #16]	; (80a1e30 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1e20:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1e22:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1e26:	9500      	str	r5, [sp, #0]
 80a1e28:	f7ff ffea 	bl	80a1e00 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1e2c:	b003      	add	sp, #12
 80a1e2e:	bd30      	pop	{r4, r5, pc}
 80a1e30:	080a4d64 	.word	0x080a4d64

080a1e34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1e34:	4b01      	ldr	r3, [pc, #4]	; (80a1e3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1e36:	4a02      	ldr	r2, [pc, #8]	; (80a1e40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1e38:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1e3a:	4770      	bx	lr
 80a1e3c:	20000208 	.word	0x20000208
 80a1e40:	080a4d70 	.word	0x080a4d70

080a1e44 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1e44:	2300      	movs	r3, #0
 80a1e46:	6840      	ldr	r0, [r0, #4]
 80a1e48:	461a      	mov	r2, r3
 80a1e4a:	f7ff bb81 	b.w	80a1550 <network_connect>

080a1e4e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1e4e:	2200      	movs	r2, #0
 80a1e50:	2102      	movs	r1, #2
 80a1e52:	6840      	ldr	r0, [r0, #4]
 80a1e54:	f7ff bb8c 	b.w	80a1570 <network_disconnect>

080a1e58 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1e58:	2200      	movs	r2, #0
 80a1e5a:	6840      	ldr	r0, [r0, #4]
 80a1e5c:	4611      	mov	r1, r2
 80a1e5e:	f7ff bb7f 	b.w	80a1560 <network_connecting>

080a1e62 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1e62:	2200      	movs	r2, #0
 80a1e64:	6840      	ldr	r0, [r0, #4]
 80a1e66:	4611      	mov	r1, r2
 80a1e68:	f7ff bb8a 	b.w	80a1580 <network_ready>

080a1e6c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1e6c:	2300      	movs	r3, #0
 80a1e6e:	6840      	ldr	r0, [r0, #4]
 80a1e70:	461a      	mov	r2, r3
 80a1e72:	4619      	mov	r1, r3
 80a1e74:	f7ff bb8c 	b.w	80a1590 <network_on>

080a1e78 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1e78:	2300      	movs	r3, #0
 80a1e7a:	6840      	ldr	r0, [r0, #4]
 80a1e7c:	461a      	mov	r2, r3
 80a1e7e:	4619      	mov	r1, r3
 80a1e80:	f7ff bb8e 	b.w	80a15a0 <network_off>

080a1e84 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1e84:	2100      	movs	r1, #0
 80a1e86:	6840      	ldr	r0, [r0, #4]
 80a1e88:	f7ff bbb2 	b.w	80a15f0 <network_is_on>

080a1e8c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1e8c:	2100      	movs	r1, #0
 80a1e8e:	6840      	ldr	r0, [r0, #4]
 80a1e90:	f7ff bbb6 	b.w	80a1600 <network_is_off>

080a1e94 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1e94:	2200      	movs	r2, #0
 80a1e96:	6840      	ldr	r0, [r0, #4]
 80a1e98:	f081 0101 	eor.w	r1, r1, #1
 80a1e9c:	f7ff bb88 	b.w	80a15b0 <network_listen>

080a1ea0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1ea0:	2200      	movs	r2, #0
 80a1ea2:	6840      	ldr	r0, [r0, #4]
 80a1ea4:	f7ff bb94 	b.w	80a15d0 <network_set_listen_timeout>

080a1ea8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1ea8:	2200      	movs	r2, #0
 80a1eaa:	6840      	ldr	r0, [r0, #4]
 80a1eac:	4611      	mov	r1, r2
 80a1eae:	f7ff bb97 	b.w	80a15e0 <network_get_listen_timeout>

080a1eb2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1eb2:	2200      	movs	r2, #0
 80a1eb4:	6840      	ldr	r0, [r0, #4]
 80a1eb6:	4611      	mov	r1, r2
 80a1eb8:	f7ff bb82 	b.w	80a15c0 <network_listening>

080a1ebc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1ebc:	b570      	push	{r4, r5, r6, lr}
 80a1ebe:	4615      	mov	r5, r2
 80a1ec0:	b08e      	sub	sp, #56	; 0x38
 80a1ec2:	4604      	mov	r4, r0
    IPAddress addr;
 80a1ec4:	a808      	add	r0, sp, #32
 80a1ec6:	f7ff ff73 	bl	80a1db0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1eca:	2211      	movs	r2, #17
 80a1ecc:	2100      	movs	r1, #0
 80a1ece:	a803      	add	r0, sp, #12
 80a1ed0:	f002 f83a 	bl	80a3f48 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1ed4:	2600      	movs	r6, #0
 80a1ed6:	4628      	mov	r0, r5
 80a1ed8:	f002 f88f 	bl	80a3ffa <strlen>
 80a1edc:	4b0a      	ldr	r3, [pc, #40]	; (80a1f08 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1ede:	9600      	str	r6, [sp, #0]
 80a1ee0:	b281      	uxth	r1, r0
 80a1ee2:	685b      	ldr	r3, [r3, #4]
 80a1ee4:	4628      	mov	r0, r5
 80a1ee6:	aa03      	add	r2, sp, #12
 80a1ee8:	f7ff fa84 	bl	80a13f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1eec:	b130      	cbz	r0, 80a1efc <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1eee:	4631      	mov	r1, r6
 80a1ef0:	4620      	mov	r0, r4
 80a1ef2:	f7ff ff7d 	bl	80a1df0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1ef6:	4620      	mov	r0, r4
 80a1ef8:	b00e      	add	sp, #56	; 0x38
 80a1efa:	bd70      	pop	{r4, r5, r6, pc}
 80a1efc:	4620      	mov	r0, r4
 80a1efe:	a903      	add	r1, sp, #12
 80a1f00:	f7ff ff64 	bl	80a1dcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1f04:	e7f7      	b.n	80a1ef6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1f06:	bf00      	nop
 80a1f08:	200006cc 	.word	0x200006cc

080a1f0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1f0c:	4b02      	ldr	r3, [pc, #8]	; (80a1f18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1f0e:	4a03      	ldr	r2, [pc, #12]	; (80a1f1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1f10:	601a      	str	r2, [r3, #0]
 80a1f12:	2200      	movs	r2, #0
 80a1f14:	605a      	str	r2, [r3, #4]

} // spark
 80a1f16:	4770      	bx	lr
 80a1f18:	2000020c 	.word	0x2000020c
 80a1f1c:	080a4d7c 	.word	0x080a4d7c

080a1f20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f22:	4606      	mov	r6, r0
 80a1f24:	460d      	mov	r5, r1
  size_t n = 0;
 80a1f26:	2400      	movs	r4, #0
 80a1f28:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1f2a:	42bd      	cmp	r5, r7
 80a1f2c:	d00c      	beq.n	80a1f48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1f2e:	6833      	ldr	r3, [r6, #0]
 80a1f30:	4630      	mov	r0, r6
 80a1f32:	689b      	ldr	r3, [r3, #8]
 80a1f34:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1f38:	4798      	blx	r3
     if (chunk>=0)
 80a1f3a:	1e03      	subs	r3, r0, #0
 80a1f3c:	db01      	blt.n	80a1f42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1f3e:	441c      	add	r4, r3
  while (size--) {
 80a1f40:	e7f3      	b.n	80a1f2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1f42:	2c00      	cmp	r4, #0
 80a1f44:	bf08      	it	eq
 80a1f46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1f48:	4620      	mov	r0, r4
 80a1f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1f4c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a1f4c:	b570      	push	{r4, r5, r6, lr}
 80a1f4e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1f50:	460c      	mov	r4, r1
    }
 80a1f52:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1f54:	b149      	cbz	r1, 80a1f6a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1f56:	f002 f850 	bl	80a3ffa <strlen>
 80a1f5a:	682b      	ldr	r3, [r5, #0]
 80a1f5c:	4602      	mov	r2, r0
 80a1f5e:	4621      	mov	r1, r4
 80a1f60:	4628      	mov	r0, r5
    }
 80a1f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1f66:	68db      	ldr	r3, [r3, #12]
 80a1f68:	4718      	bx	r3
    }
 80a1f6a:	bd70      	pop	{r4, r5, r6, pc}

080a1f6c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1f6c:	6803      	ldr	r3, [r0, #0]
 80a1f6e:	689b      	ldr	r3, [r3, #8]
 80a1f70:	4718      	bx	r3

080a1f72 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1f72:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1f74:	2a01      	cmp	r2, #1
 80a1f76:	bf98      	it	ls
 80a1f78:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1f7a:	b530      	push	{r4, r5, lr}
 80a1f7c:	b08b      	sub	sp, #44	; 0x2c
 80a1f7e:	460c      	mov	r4, r1
  *str = '\0';
 80a1f80:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1f84:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1f86:	4625      	mov	r5, r4
 80a1f88:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1f8c:	fb04 5312 	mls	r3, r4, r2, r5
 80a1f90:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1f92:	2b09      	cmp	r3, #9
 80a1f94:	bf94      	ite	ls
 80a1f96:	3330      	addls	r3, #48	; 0x30
 80a1f98:	3337      	addhi	r3, #55	; 0x37
 80a1f9a:	b2db      	uxtb	r3, r3
  } while(n);
 80a1f9c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1f9e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1fa2:	d9f0      	bls.n	80a1f86 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1fa4:	f7ff ffd2 	bl	80a1f4c <_ZN5Print5writeEPKc>
}
 80a1fa8:	b00b      	add	sp, #44	; 0x2c
 80a1faa:	bd30      	pop	{r4, r5, pc}

080a1fac <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1fac:	b510      	push	{r4, lr}
 80a1fae:	4604      	mov	r4, r0
 80a1fb0:	f7ff fb9b 	bl	80a16ea <_ZNSt14_Function_baseD1Ev>
 80a1fb4:	4620      	mov	r0, r4
 80a1fb6:	bd10      	pop	{r4, pc}

080a1fb8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1fb8:	2300      	movs	r3, #0
 80a1fba:	4803      	ldr	r0, [pc, #12]	; (80a1fc8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1fbc:	4a03      	ldr	r2, [pc, #12]	; (80a1fcc <_GLOBAL__sub_I_RGB+0x14>)
 80a1fbe:	4904      	ldr	r1, [pc, #16]	; (80a1fd0 <_GLOBAL__sub_I_RGB+0x18>)
 80a1fc0:	6083      	str	r3, [r0, #8]
 80a1fc2:	f000 be23 	b.w	80a2c0c <__aeabi_atexit>
 80a1fc6:	bf00      	nop
 80a1fc8:	20000214 	.word	0x20000214
 80a1fcc:	20000148 	.word	0x20000148
 80a1fd0:	080a1fad 	.word	0x080a1fad

080a1fd4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1fd4:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1fd6:	2600      	movs	r6, #0
 80a1fd8:	4604      	mov	r4, r0
 80a1fda:	460d      	mov	r5, r1
 80a1fdc:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1fe0:	f7ff f8ae 	bl	80a1140 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1fe4:	4628      	mov	r0, r5
    _spi = spi;
 80a1fe6:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1fe8:	f7ff f984 	bl	80a12f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1fec:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1fee:	6066      	str	r6, [r4, #4]
}
 80a1ff0:	bd70      	pop	{r4, r5, r6, pc}

080a1ff2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1ff2:	b510      	push	{r4, lr}
 80a1ff4:	4604      	mov	r4, r0
{
	free(buffer);
 80a1ff6:	6800      	ldr	r0, [r0, #0]
 80a1ff8:	f7ff fb12 	bl	80a1620 <free>
}
 80a1ffc:	4620      	mov	r0, r4
 80a1ffe:	bd10      	pop	{r4, pc}

080a2000 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2000:	b510      	push	{r4, lr}
 80a2002:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2004:	6800      	ldr	r0, [r0, #0]
 80a2006:	b108      	cbz	r0, 80a200c <_ZN6String10invalidateEv+0xc>
 80a2008:	f7ff fb0a 	bl	80a1620 <free>
	buffer = NULL;
 80a200c:	2300      	movs	r3, #0
	capacity = len = 0;
 80a200e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a2012:	6023      	str	r3, [r4, #0]
}
 80a2014:	bd10      	pop	{r4, pc}

080a2016 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2016:	b538      	push	{r3, r4, r5, lr}
 80a2018:	4604      	mov	r4, r0
 80a201a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a201c:	6800      	ldr	r0, [r0, #0]
 80a201e:	3101      	adds	r1, #1
 80a2020:	f7ff fb06 	bl	80a1630 <realloc>
	if (newbuffer) {
 80a2024:	b110      	cbz	r0, 80a202c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2026:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a202a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a202c:	bd38      	pop	{r3, r4, r5, pc}

080a202e <_ZN6String7reserveEj>:
{
 80a202e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2030:	6803      	ldr	r3, [r0, #0]
{
 80a2032:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2034:	b123      	cbz	r3, 80a2040 <_ZN6String7reserveEj+0x12>
 80a2036:	6843      	ldr	r3, [r0, #4]
 80a2038:	428b      	cmp	r3, r1
 80a203a:	d301      	bcc.n	80a2040 <_ZN6String7reserveEj+0x12>
 80a203c:	2001      	movs	r0, #1
}
 80a203e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a2040:	4620      	mov	r0, r4
 80a2042:	f7ff ffe8 	bl	80a2016 <_ZN6String12changeBufferEj>
 80a2046:	2800      	cmp	r0, #0
 80a2048:	d0f9      	beq.n	80a203e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a204a:	68a3      	ldr	r3, [r4, #8]
 80a204c:	2b00      	cmp	r3, #0
 80a204e:	d1f5      	bne.n	80a203c <_ZN6String7reserveEj+0xe>
 80a2050:	6822      	ldr	r2, [r4, #0]
 80a2052:	7013      	strb	r3, [r2, #0]
 80a2054:	e7f2      	b.n	80a203c <_ZN6String7reserveEj+0xe>

080a2056 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2056:	b570      	push	{r4, r5, r6, lr}
 80a2058:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a205a:	4611      	mov	r1, r2
{
 80a205c:	4604      	mov	r4, r0
 80a205e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2060:	f7ff ffe5 	bl	80a202e <_ZN6String7reserveEj>
 80a2064:	b920      	cbnz	r0, 80a2070 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2066:	4620      	mov	r0, r4
 80a2068:	f7ff ffca 	bl	80a2000 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a206c:	4620      	mov	r0, r4
 80a206e:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a2070:	462a      	mov	r2, r5
 80a2072:	4631      	mov	r1, r6
 80a2074:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2076:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2078:	f001 ff58 	bl	80a3f2c <memcpy>
	buffer[len] = 0;
 80a207c:	2100      	movs	r1, #0
 80a207e:	6822      	ldr	r2, [r4, #0]
 80a2080:	68a3      	ldr	r3, [r4, #8]
 80a2082:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2084:	e7f2      	b.n	80a206c <_ZN6String4copyEPKcj+0x16>

080a2086 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a2086:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a2088:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a208a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a208c:	460d      	mov	r5, r1
	capacity = 0;
 80a208e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2092:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2094:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a2096:	b139      	cbz	r1, 80a20a8 <_ZN6StringC1EPKc+0x22>
 80a2098:	4608      	mov	r0, r1
 80a209a:	f001 ffae 	bl	80a3ffa <strlen>
 80a209e:	4629      	mov	r1, r5
 80a20a0:	4602      	mov	r2, r0
 80a20a2:	4620      	mov	r0, r4
 80a20a4:	f7ff ffd7 	bl	80a2056 <_ZN6String4copyEPKcj>
}
 80a20a8:	4620      	mov	r0, r4
 80a20aa:	bd38      	pop	{r3, r4, r5, pc}

080a20ac <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a20ac:	4288      	cmp	r0, r1
{
 80a20ae:	b510      	push	{r4, lr}
 80a20b0:	460b      	mov	r3, r1
 80a20b2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a20b4:	d004      	beq.n	80a20c0 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a20b6:	6809      	ldr	r1, [r1, #0]
 80a20b8:	b121      	cbz	r1, 80a20c4 <_ZN6StringaSERKS_+0x18>
 80a20ba:	689a      	ldr	r2, [r3, #8]
 80a20bc:	f7ff ffcb 	bl	80a2056 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a20c0:	4620      	mov	r0, r4
 80a20c2:	bd10      	pop	{r4, pc}
	else invalidate();
 80a20c4:	f7ff ff9c 	bl	80a2000 <_ZN6String10invalidateEv>
 80a20c8:	e7fa      	b.n	80a20c0 <_ZN6StringaSERKS_+0x14>

080a20ca <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a20ca:	2300      	movs	r3, #0
String::String(const String &value)
 80a20cc:	b510      	push	{r4, lr}
 80a20ce:	4604      	mov	r4, r0
	capacity = 0;
 80a20d0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a20d4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a20d6:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a20d8:	f7ff ffe8 	bl	80a20ac <_ZN6StringaSERKS_>
}
 80a20dc:	4620      	mov	r0, r4
 80a20de:	bd10      	pop	{r4, pc}

080a20e0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a20e0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a20e2:	6882      	ldr	r2, [r0, #8]
 80a20e4:	b93a      	cbnz	r2, 80a20f6 <_ZNK6String6equalsEPKc+0x16>
 80a20e6:	b121      	cbz	r1, 80a20f2 <_ZNK6String6equalsEPKc+0x12>
 80a20e8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a20ea:	fab0 f080 	clz	r0, r0
 80a20ee:	0940      	lsrs	r0, r0, #5
 80a20f0:	e000      	b.n	80a20f4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a20f2:	2001      	movs	r0, #1
}
 80a20f4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a20f6:	6800      	ldr	r0, [r0, #0]
 80a20f8:	b909      	cbnz	r1, 80a20fe <_ZNK6String6equalsEPKc+0x1e>
 80a20fa:	7800      	ldrb	r0, [r0, #0]
 80a20fc:	e7f5      	b.n	80a20ea <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a20fe:	f001 ff4f 	bl	80a3fa0 <strcmp>
 80a2102:	e7f2      	b.n	80a20ea <_ZNK6String6equalsEPKc+0xa>

080a2104 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 80a2104:	b507      	push	{r0, r1, r2, lr}
 80a2106:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80a2108:	2100      	movs	r1, #0
{
 80a210a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80a210c:	9100      	str	r1, [sp, #0]
 80a210e:	2001      	movs	r0, #1
 80a2110:	218c      	movs	r1, #140	; 0x8c
 80a2112:	f7ff f9d3 	bl	80a14bc <system_reset>
}
 80a2116:	b003      	add	sp, #12
 80a2118:	f85d fb04 	ldr.w	pc, [sp], #4

080a211c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 80a211c:	4601      	mov	r1, r0
    reset(0, flags);
 80a211e:	2000      	movs	r0, #0
 80a2120:	f7ff bff0 	b.w	80a2104 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

080a2124 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 80a2124:	2000      	movs	r0, #0
 80a2126:	f7ff bff9 	b.w	80a211c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

080a212c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a212c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a212e:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2130:	b510      	push	{r4, lr}
 80a2132:	4b08      	ldr	r3, [pc, #32]	; (80a2154 <_GLOBAL__sub_I_System+0x28>)
 80a2134:	4c08      	ldr	r4, [pc, #32]	; (80a2158 <_GLOBAL__sub_I_System+0x2c>)
 80a2136:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a2138:	4b08      	ldr	r3, [pc, #32]	; (80a215c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a213a:	6020      	str	r0, [r4, #0]
 80a213c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a213e:	71a0      	strb	r0, [r4, #6]
 80a2140:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2142:	f7ff f977 	bl	80a1434 <set_system_mode>
SystemClass System;
 80a2146:	4620      	mov	r0, r4
 80a2148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a214c:	4a04      	ldr	r2, [pc, #16]	; (80a2160 <_GLOBAL__sub_I_System+0x34>)
 80a214e:	4905      	ldr	r1, [pc, #20]	; (80a2164 <_GLOBAL__sub_I_System+0x38>)
 80a2150:	f000 bd5c 	b.w	80a2c0c <__aeabi_atexit>
 80a2154:	20000230 	.word	0x20000230
 80a2158:	20000224 	.word	0x20000224
 80a215c:	ffff0000 	.word	0xffff0000
 80a2160:	20000148 	.word	0x20000148
 80a2164:	080a00c5 	.word	0x080a00c5

080a2168 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a216c:	4a15      	ldr	r2, [pc, #84]	; (80a21c4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a216e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80a21d0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 80a2172:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a2176:	18c0      	adds	r0, r0, r3
 80a2178:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 80a217c:	4a12      	ldr	r2, [pc, #72]	; (80a21c8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 80a217e:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 80a2180:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a2184:	18c6      	adds	r6, r0, r3
 80a2186:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 80a218a:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a218e:	42bb      	cmp	r3, r7
 80a2190:	bf08      	it	eq
 80a2192:	42b2      	cmpeq	r2, r6
 80a2194:	d013      	beq.n	80a21be <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a2196:	a903      	add	r1, sp, #12
 80a2198:	4668      	mov	r0, sp
 80a219a:	e9cd 6700 	strd	r6, r7, [sp]
 80a219e:	f001 fdcf 	bl	80a3d40 <localtime_r>
	calendar_time.tm_year += 1900;
 80a21a2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a21a4:	4d09      	ldr	r5, [pc, #36]	; (80a21cc <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 80a21a6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a21aa:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a21ac:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a21ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a21b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a21b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a21b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a21b6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a21ba:	6823      	ldr	r3, [r4, #0]
 80a21bc:	602b      	str	r3, [r5, #0]
    }
}
 80a21be:	b00c      	add	sp, #48	; 0x30
 80a21c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a21c4:	20000268 	.word	0x20000268
 80a21c8:	20000260 	.word	0x20000260
 80a21cc:	20000238 	.word	0x20000238
 80a21d0:	20000270 	.word	0x20000270

080a21d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80a21d4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a21d6:	2000      	movs	r0, #0
 80a21d8:	f7ff f9aa 	bl	80a1530 <spark_sync_time_pending>
 80a21dc:	b128      	cbz	r0, 80a21ea <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a21de:	f7ff f98f 	bl	80a1500 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a21e2:	f080 0001 	eor.w	r0, r0, #1
 80a21e6:	b2c0      	uxtb	r0, r0
    }
 80a21e8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a21ea:	2001      	movs	r0, #1
 80a21ec:	e7fc      	b.n	80a21e8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a21f0 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 80a21f0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a21f2:	f7ff ffb9 	bl	80a2168 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 80a21f6:	4b02      	ldr	r3, [pc, #8]	; (80a2200 <_ZN9TimeClass7weekdayEx+0x10>)
 80a21f8:	6998      	ldr	r0, [r3, #24]
}
 80a21fa:	3001      	adds	r0, #1
 80a21fc:	bd08      	pop	{r3, pc}
 80a21fe:	bf00      	nop
 80a2200:	20000238 	.word	0x20000238

080a2204 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a2204:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a2206:	f7ff ffaf 	bl	80a2168 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a220a:	4b02      	ldr	r3, [pc, #8]	; (80a2214 <_ZN9TimeClass5monthEx+0x10>)
 80a220c:	6918      	ldr	r0, [r3, #16]
}
 80a220e:	3001      	adds	r0, #1
 80a2210:	bd08      	pop	{r3, pc}
 80a2212:	bf00      	nop
 80a2214:	20000238 	.word	0x20000238

080a2218 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2218:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a221a:	490a      	ldr	r1, [pc, #40]	; (80a2244 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a221c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a221e:	f001 fb9b 	bl	80a3958 <__aeabi_fcmplt>
 80a2222:	b968      	cbnz	r0, 80a2240 <_ZN9TimeClass4zoneEf+0x28>
 80a2224:	4620      	mov	r0, r4
 80a2226:	4908      	ldr	r1, [pc, #32]	; (80a2248 <_ZN9TimeClass4zoneEf+0x30>)
 80a2228:	f001 fbb4 	bl	80a3994 <__aeabi_fcmpgt>
 80a222c:	b940      	cbnz	r0, 80a2240 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a222e:	4907      	ldr	r1, [pc, #28]	; (80a224c <_ZN9TimeClass4zoneEf+0x34>)
 80a2230:	4620      	mov	r0, r4
 80a2232:	f001 f9f3 	bl	80a361c <__aeabi_fmul>
 80a2236:	f001 fbb7 	bl	80a39a8 <__aeabi_f2lz>
 80a223a:	4b05      	ldr	r3, [pc, #20]	; (80a2250 <_ZN9TimeClass4zoneEf+0x38>)
 80a223c:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a2240:	bd10      	pop	{r4, pc}
 80a2242:	bf00      	nop
 80a2244:	c1400000 	.word	0xc1400000
 80a2248:	41600000 	.word	0x41600000
 80a224c:	45610000 	.word	0x45610000
 80a2250:	20000268 	.word	0x20000268

080a2254 <_ZN9TimeClass12setDSTOffsetEf>:
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 80a2254:	b510      	push	{r4, lr}
    if (offset < 0 || offset > 2)
 80a2256:	2100      	movs	r1, #0
{
 80a2258:	4604      	mov	r4, r0
    if (offset < 0 || offset > 2)
 80a225a:	f001 fb7d 	bl	80a3958 <__aeabi_fcmplt>
 80a225e:	b970      	cbnz	r0, 80a227e <_ZN9TimeClass12setDSTOffsetEf+0x2a>
 80a2260:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a2264:	4620      	mov	r0, r4
 80a2266:	f001 fb95 	bl	80a3994 <__aeabi_fcmpgt>
 80a226a:	b940      	cbnz	r0, 80a227e <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
 80a226c:	4904      	ldr	r1, [pc, #16]	; (80a2280 <_ZN9TimeClass12setDSTOffsetEf+0x2c>)
 80a226e:	4620      	mov	r0, r4
 80a2270:	f001 f9d4 	bl	80a361c <__aeabi_fmul>
 80a2274:	f001 fb98 	bl	80a39a8 <__aeabi_f2lz>
 80a2278:	4b02      	ldr	r3, [pc, #8]	; (80a2284 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
 80a227a:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a227e:	bd10      	pop	{r4, pc}
 80a2280:	45610000 	.word	0x45610000
 80a2284:	20000070 	.word	0x20000070

080a2288 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 80a2288:	4b03      	ldr	r3, [pc, #12]	; (80a2298 <_ZN9TimeClass8beginDSTEv+0x10>)
 80a228a:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a228e:	4b03      	ldr	r3, [pc, #12]	; (80a229c <_ZN9TimeClass8beginDSTEv+0x14>)
 80a2290:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a2294:	4770      	bx	lr
 80a2296:	bf00      	nop
 80a2298:	20000070 	.word	0x20000070
 80a229c:	20000260 	.word	0x20000260

080a22a0 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
 80a22a0:	2000      	movs	r0, #0
 80a22a2:	2100      	movs	r1, #0
 80a22a4:	4b01      	ldr	r3, [pc, #4]	; (80a22ac <_ZN9TimeClass6endDSTEv+0xc>)
 80a22a6:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a22aa:	4770      	bx	lr
 80a22ac:	20000260 	.word	0x20000260

080a22b0 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a22b0:	b530      	push	{r4, r5, lr}
 80a22b2:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a22b4:	4818      	ldr	r0, [pc, #96]	; (80a2318 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80a22b6:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80a22b8:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a22bc:	1852      	adds	r2, r2, r1
 80a22be:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80a22c2:	4816      	ldr	r0, [pc, #88]	; (80a231c <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a22c4:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a22c6:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a22ca:	1852      	adds	r2, r2, r1
 80a22cc:	eb40 0303 	adc.w	r3, r0, r3
 80a22d0:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a22d4:	2224      	movs	r2, #36	; 0x24
 80a22d6:	2100      	movs	r1, #0
 80a22d8:	eb0d 0002 	add.w	r0, sp, r2
 80a22dc:	f001 fe34 	bl	80a3f48 <memset>
    localtime_r(&t, &calendar_time);
 80a22e0:	a909      	add	r1, sp, #36	; 0x24
 80a22e2:	4668      	mov	r0, sp
 80a22e4:	f001 fd2c 	bl	80a3d40 <localtime_r>
    char ascstr[26] = {};
 80a22e8:	2216      	movs	r2, #22
 80a22ea:	4629      	mov	r1, r5
 80a22ec:	a803      	add	r0, sp, #12
 80a22ee:	9502      	str	r5, [sp, #8]
 80a22f0:	f001 fe2a 	bl	80a3f48 <memset>
    asctime_r(&calendar_time, ascstr);
 80a22f4:	a902      	add	r1, sp, #8
 80a22f6:	a809      	add	r0, sp, #36	; 0x24
 80a22f8:	f001 fcee 	bl	80a3cd8 <asctime_r>
    int len = strlen(ascstr);
 80a22fc:	a802      	add	r0, sp, #8
 80a22fe:	f001 fe7c 	bl	80a3ffa <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a2302:	ab12      	add	r3, sp, #72	; 0x48
 80a2304:	4418      	add	r0, r3
 80a2306:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a230a:	a902      	add	r1, sp, #8
 80a230c:	4620      	mov	r0, r4
 80a230e:	f7ff feba 	bl	80a2086 <_ZN6StringC1EPKc>
}
 80a2312:	4620      	mov	r0, r4
 80a2314:	b013      	add	sp, #76	; 0x4c
 80a2316:	bd30      	pop	{r4, r5, pc}
 80a2318:	20000268 	.word	0x20000268
 80a231c:	20000260 	.word	0x20000260

080a2320 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2320:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a2322:	2000      	movs	r0, #0
 80a2324:	f7fe ff54 	bl	80a11d0 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a2328:	4604      	mov	r4, r0
 80a232a:	b9a0      	cbnz	r0, 80a2356 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a232c:	f7ff f87a 	bl	80a1424 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2330:	2801      	cmp	r0, #1
 80a2332:	d110      	bne.n	80a2356 <_ZN9TimeClass7isValidEv+0x36>
 80a2334:	4620      	mov	r0, r4
 80a2336:	f7ff f8a5 	bl	80a1484 <system_thread_get_state>
 80a233a:	b960      	cbnz	r0, 80a2356 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a233c:	f7ff ff4a 	bl	80a21d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2340:	b910      	cbnz	r0, 80a2348 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a2342:	f7ff f8d5 	bl	80a14f0 <spark_process>
        while (_while() && !_condition()) {
 80a2346:	e7f9      	b.n	80a233c <_ZN9TimeClass7isValidEv+0x1c>
 80a2348:	f7ff ff44 	bl	80a21d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a234c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a2350:	2000      	movs	r0, #0
 80a2352:	f7fe bf3d 	b.w	80a11d0 <hal_rtc_time_is_valid>
}
 80a2356:	4620      	mov	r0, r4
 80a2358:	bd10      	pop	{r4, pc}

080a235a <_ZN9TimeClass3nowEv>:
{
 80a235a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a235c:	f7ff ffe0 	bl	80a2320 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a2360:	2210      	movs	r2, #16
 80a2362:	2100      	movs	r1, #0
 80a2364:	4668      	mov	r0, sp
 80a2366:	f001 fdef 	bl	80a3f48 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a236a:	2100      	movs	r1, #0
 80a236c:	4668      	mov	r0, sp
 80a236e:	f7fe ff3f 	bl	80a11f0 <hal_rtc_get_time>
}
 80a2372:	9800      	ldr	r0, [sp, #0]
 80a2374:	b005      	add	sp, #20
 80a2376:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a237c <_ZN9TimeClass4hourEv>:
{
 80a237c:	b508      	push	{r3, lr}
	return hour(now());
 80a237e:	f7ff ffec 	bl	80a235a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2382:	17c1      	asrs	r1, r0, #31
 80a2384:	f7ff fef0 	bl	80a2168 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2388:	4b01      	ldr	r3, [pc, #4]	; (80a2390 <_ZN9TimeClass4hourEv+0x14>)
 80a238a:	6898      	ldr	r0, [r3, #8]
 80a238c:	bd08      	pop	{r3, pc}
 80a238e:	bf00      	nop
 80a2390:	20000238 	.word	0x20000238

080a2394 <_ZN9TimeClass3dayEv>:
{
 80a2394:	b508      	push	{r3, lr}
	return day(now());
 80a2396:	f7ff ffe0 	bl	80a235a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a239a:	17c1      	asrs	r1, r0, #31
 80a239c:	f7ff fee4 	bl	80a2168 <_ZL22Refresh_UnixTime_Cachex>
}
 80a23a0:	4b01      	ldr	r3, [pc, #4]	; (80a23a8 <_ZN9TimeClass3dayEv+0x14>)
 80a23a2:	68d8      	ldr	r0, [r3, #12]
 80a23a4:	bd08      	pop	{r3, pc}
 80a23a6:	bf00      	nop
 80a23a8:	20000238 	.word	0x20000238

080a23ac <_ZN9TimeClass7weekdayEv>:
{
 80a23ac:	b508      	push	{r3, lr}
	return weekday(now());
 80a23ae:	f7ff ffd4 	bl	80a235a <_ZN9TimeClass3nowEv>
}
 80a23b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
 80a23b6:	17c1      	asrs	r1, r0, #31
 80a23b8:	f7ff bf1a 	b.w	80a21f0 <_ZN9TimeClass7weekdayEx>

080a23bc <_ZN9TimeClass5monthEv>:
{
 80a23bc:	b508      	push	{r3, lr}
	return month(now());
 80a23be:	f7ff ffcc 	bl	80a235a <_ZN9TimeClass3nowEv>
}
 80a23c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80a23c6:	17c1      	asrs	r1, r0, #31
 80a23c8:	f7ff bf1c 	b.w	80a2204 <_ZN9TimeClass5monthEx>

080a23cc <_ZN9TimeClass5localEv>:
{
 80a23cc:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
 80a23ce:	f7ff ffc4 	bl	80a235a <_ZN9TimeClass3nowEv>
 80a23d2:	4b03      	ldr	r3, [pc, #12]	; (80a23e0 <_ZN9TimeClass5localEv+0x14>)
 80a23d4:	4a03      	ldr	r2, [pc, #12]	; (80a23e4 <_ZN9TimeClass5localEv+0x18>)
 80a23d6:	681b      	ldr	r3, [r3, #0]
 80a23d8:	6812      	ldr	r2, [r2, #0]
 80a23da:	4413      	add	r3, r2
}
 80a23dc:	4418      	add	r0, r3
 80a23de:	bd08      	pop	{r3, pc}
 80a23e0:	20000268 	.word	0x20000268
 80a23e4:	20000260 	.word	0x20000260

080a23e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a23e8:	4b02      	ldr	r3, [pc, #8]	; (80a23f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a23ea:	681a      	ldr	r2, [r3, #0]
 80a23ec:	4b02      	ldr	r3, [pc, #8]	; (80a23f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a23ee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a23f0:	4770      	bx	lr
 80a23f2:	bf00      	nop
 80a23f4:	2000006c 	.word	0x2000006c
 80a23f8:	20000234 	.word	0x20000234

080a23fc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a23fc:	4770      	bx	lr

080a23fe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a23fe:	7441      	strb	r1, [r0, #17]
}
 80a2400:	4770      	bx	lr

080a2402 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a2402:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2404:	7c00      	ldrb	r0, [r0, #16]
 80a2406:	f7fe ffbd 	bl	80a1384 <hal_usart_available_data_for_write>
}
 80a240a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a240e:	bd08      	pop	{r3, pc}

080a2410 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2410:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a2412:	7c00      	ldrb	r0, [r0, #16]
 80a2414:	f7fe ff8e 	bl	80a1334 <hal_usart_available>
}
 80a2418:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a241c:	bd08      	pop	{r3, pc}

080a241e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a241e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a2420:	7c00      	ldrb	r0, [r0, #16]
 80a2422:	f7fe ff97 	bl	80a1354 <hal_usart_peek>
}
 80a2426:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a242a:	bd08      	pop	{r3, pc}

080a242c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a242c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a242e:	7c00      	ldrb	r0, [r0, #16]
 80a2430:	f7fe ff88 	bl	80a1344 <hal_usart_read>
}
 80a2434:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2438:	bd08      	pop	{r3, pc}

080a243a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a243a:	7c00      	ldrb	r0, [r0, #16]
 80a243c:	f7fe bf92 	b.w	80a1364 <hal_usart_flush>

080a2440 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2440:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2442:	7c46      	ldrb	r6, [r0, #17]
{
 80a2444:	4604      	mov	r4, r0
 80a2446:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2448:	b12e      	cbz	r6, 80a2456 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a244a:	4629      	mov	r1, r5
 80a244c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a244e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a2452:	f7fe bf67 	b.w	80a1324 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2456:	7c00      	ldrb	r0, [r0, #16]
 80a2458:	f7fe ff94 	bl	80a1384 <hal_usart_available_data_for_write>
 80a245c:	2800      	cmp	r0, #0
 80a245e:	dcf4      	bgt.n	80a244a <_ZN11USARTSerial5writeEh+0xa>
}
 80a2460:	4630      	mov	r0, r6
 80a2462:	bd70      	pop	{r4, r5, r6, pc}

080a2464 <_ZN11USARTSerialD0Ev>:
 80a2464:	b510      	push	{r4, lr}
 80a2466:	4604      	mov	r4, r0
 80a2468:	2114      	movs	r1, #20
 80a246a:	f000 fbd4 	bl	80a2c16 <_ZdlPvj>
 80a246e:	4620      	mov	r0, r4
 80a2470:	bd10      	pop	{r4, pc}
	...

080a2474 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a2474:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2478:	b510      	push	{r4, lr}
 80a247a:	4604      	mov	r4, r0
 80a247c:	4608      	mov	r0, r1
 80a247e:	4611      	mov	r1, r2
 80a2480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2484:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a2488:	4a04      	ldr	r2, [pc, #16]	; (80a249c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a248a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a248c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a248e:	2201      	movs	r2, #1
 80a2490:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a2492:	461a      	mov	r2, r3
 80a2494:	f7fe ff3e 	bl	80a1314 <hal_usart_init>
}
 80a2498:	4620      	mov	r0, r4
 80a249a:	bd10      	pop	{r4, pc}
 80a249c:	080a4dd4 	.word	0x080a4dd4

080a24a0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a24a0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a24a2:	4d0d      	ldr	r5, [pc, #52]	; (80a24d8 <_Z22__fetch_global_Serial1v+0x38>)
 80a24a4:	7829      	ldrb	r1, [r5, #0]
 80a24a6:	f3bf 8f5b 	dmb	ish
 80a24aa:	f011 0401 	ands.w	r4, r1, #1
 80a24ae:	d111      	bne.n	80a24d4 <_Z22__fetch_global_Serial1v+0x34>
 80a24b0:	4628      	mov	r0, r5
 80a24b2:	f7fd fdf8 	bl	80a00a6 <__cxa_guard_acquire>
 80a24b6:	b168      	cbz	r0, 80a24d4 <_Z22__fetch_global_Serial1v+0x34>
 80a24b8:	4621      	mov	r1, r4
 80a24ba:	4a08      	ldr	r2, [pc, #32]	; (80a24dc <_Z22__fetch_global_Serial1v+0x3c>)
 80a24bc:	4b08      	ldr	r3, [pc, #32]	; (80a24e0 <_Z22__fetch_global_Serial1v+0x40>)
 80a24be:	4809      	ldr	r0, [pc, #36]	; (80a24e4 <_Z22__fetch_global_Serial1v+0x44>)
 80a24c0:	f7ff ffd8 	bl	80a2474 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a24c4:	4628      	mov	r0, r5
 80a24c6:	f7fd fdf3 	bl	80a00b0 <__cxa_guard_release>
 80a24ca:	4a07      	ldr	r2, [pc, #28]	; (80a24e8 <_Z22__fetch_global_Serial1v+0x48>)
 80a24cc:	4907      	ldr	r1, [pc, #28]	; (80a24ec <_Z22__fetch_global_Serial1v+0x4c>)
 80a24ce:	4805      	ldr	r0, [pc, #20]	; (80a24e4 <_Z22__fetch_global_Serial1v+0x44>)
 80a24d0:	f000 fb9c 	bl	80a2c0c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a24d4:	4803      	ldr	r0, [pc, #12]	; (80a24e4 <_Z22__fetch_global_Serial1v+0x44>)
 80a24d6:	bd38      	pop	{r3, r4, r5, pc}
 80a24d8:	20000278 	.word	0x20000278
 80a24dc:	2000027c 	.word	0x2000027c
 80a24e0:	20000300 	.word	0x20000300
 80a24e4:	20000384 	.word	0x20000384
 80a24e8:	20000148 	.word	0x20000148
 80a24ec:	080a23fd 	.word	0x080a23fd

080a24f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a24f0:	7441      	strb	r1, [r0, #17]
}
 80a24f2:	4770      	bx	lr

080a24f4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a24f4:	4770      	bx	lr

080a24f6 <_ZN9USBSerial4readEv>:
{
 80a24f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a24f8:	2100      	movs	r1, #0
 80a24fa:	7c00      	ldrb	r0, [r0, #16]
 80a24fc:	f7fe ff62 	bl	80a13c4 <HAL_USB_USART_Receive_Data>
}
 80a2500:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2504:	bd08      	pop	{r3, pc}

080a2506 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a2506:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2508:	2101      	movs	r1, #1
 80a250a:	7c00      	ldrb	r0, [r0, #16]
 80a250c:	f7fe ff5a 	bl	80a13c4 <HAL_USB_USART_Receive_Data>
}
 80a2510:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2514:	bd08      	pop	{r3, pc}

080a2516 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2516:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2518:	7c00      	ldrb	r0, [r0, #16]
 80a251a:	f7fe ff4b 	bl	80a13b4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a251e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2522:	bd08      	pop	{r3, pc}

080a2524 <_ZN9USBSerial9availableEv>:
{
 80a2524:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2526:	7c00      	ldrb	r0, [r0, #16]
 80a2528:	f7fe ff3c 	bl	80a13a4 <HAL_USB_USART_Available_Data>
}
 80a252c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2530:	bd08      	pop	{r3, pc}

080a2532 <_ZN9USBSerial5writeEh>:
{
 80a2532:	b538      	push	{r3, r4, r5, lr}
 80a2534:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2536:	7c00      	ldrb	r0, [r0, #16]
{
 80a2538:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a253a:	f7fe ff3b 	bl	80a13b4 <HAL_USB_USART_Available_Data_For_Write>
 80a253e:	2800      	cmp	r0, #0
 80a2540:	dc01      	bgt.n	80a2546 <_ZN9USBSerial5writeEh+0x14>
 80a2542:	7c60      	ldrb	r0, [r4, #17]
 80a2544:	b128      	cbz	r0, 80a2552 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2546:	4629      	mov	r1, r5
 80a2548:	7c20      	ldrb	r0, [r4, #16]
 80a254a:	f7fe ff43 	bl	80a13d4 <HAL_USB_USART_Send_Data>
 80a254e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2552:	bd38      	pop	{r3, r4, r5, pc}

080a2554 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2554:	7c00      	ldrb	r0, [r0, #16]
 80a2556:	f7fe bf45 	b.w	80a13e4 <HAL_USB_USART_Flush_Data>

080a255a <_ZN9USBSerialD0Ev>:
 80a255a:	b510      	push	{r4, lr}
 80a255c:	4604      	mov	r4, r0
 80a255e:	2114      	movs	r1, #20
 80a2560:	f000 fb59 	bl	80a2c16 <_ZdlPvj>
 80a2564:	4620      	mov	r0, r4
 80a2566:	bd10      	pop	{r4, pc}

080a2568 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2568:	b510      	push	{r4, lr}
 80a256a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a256e:	4604      	mov	r4, r0
 80a2570:	4608      	mov	r0, r1
 80a2572:	2100      	movs	r1, #0
 80a2574:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2578:	4b04      	ldr	r3, [pc, #16]	; (80a258c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a257a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a257c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a257e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2580:	4611      	mov	r1, r2
  _blocking = true;
 80a2582:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2584:	f7fe ff06 	bl	80a1394 <HAL_USB_USART_Init>
}
 80a2588:	4620      	mov	r0, r4
 80a258a:	bd10      	pop	{r4, pc}
 80a258c:	080a4e04 	.word	0x080a4e04

080a2590 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2590:	b510      	push	{r4, lr}
 80a2592:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2594:	2214      	movs	r2, #20
 80a2596:	2100      	movs	r1, #0
 80a2598:	f001 fcd6 	bl	80a3f48 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a259c:	4b05      	ldr	r3, [pc, #20]	; (80a25b4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a259e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a25a0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a25a2:	4b05      	ldr	r3, [pc, #20]	; (80a25b8 <_Z19acquireSerialBufferv+0x28>)
 80a25a4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a25a6:	f240 1301 	movw	r3, #257	; 0x101
 80a25aa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a25ac:	2381      	movs	r3, #129	; 0x81
 80a25ae:	8223      	strh	r3, [r4, #16]
}
 80a25b0:	bd10      	pop	{r4, pc}
 80a25b2:	bf00      	nop
 80a25b4:	200003c8 	.word	0x200003c8
 80a25b8:	200004c9 	.word	0x200004c9

080a25bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a25bc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a25be:	4d0f      	ldr	r5, [pc, #60]	; (80a25fc <_Z16_fetch_usbserialv+0x40>)
{
 80a25c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a25c2:	a801      	add	r0, sp, #4
 80a25c4:	f7ff ffe4 	bl	80a2590 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a25c8:	7829      	ldrb	r1, [r5, #0]
 80a25ca:	f3bf 8f5b 	dmb	ish
 80a25ce:	f011 0401 	ands.w	r4, r1, #1
 80a25d2:	d110      	bne.n	80a25f6 <_Z16_fetch_usbserialv+0x3a>
 80a25d4:	4628      	mov	r0, r5
 80a25d6:	f7fd fd66 	bl	80a00a6 <__cxa_guard_acquire>
 80a25da:	b160      	cbz	r0, 80a25f6 <_Z16_fetch_usbserialv+0x3a>
 80a25dc:	4621      	mov	r1, r4
 80a25de:	aa01      	add	r2, sp, #4
 80a25e0:	4807      	ldr	r0, [pc, #28]	; (80a2600 <_Z16_fetch_usbserialv+0x44>)
 80a25e2:	f7ff ffc1 	bl	80a2568 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a25e6:	4628      	mov	r0, r5
 80a25e8:	f7fd fd62 	bl	80a00b0 <__cxa_guard_release>
 80a25ec:	4a05      	ldr	r2, [pc, #20]	; (80a2604 <_Z16_fetch_usbserialv+0x48>)
 80a25ee:	4906      	ldr	r1, [pc, #24]	; (80a2608 <_Z16_fetch_usbserialv+0x4c>)
 80a25f0:	4803      	ldr	r0, [pc, #12]	; (80a2600 <_Z16_fetch_usbserialv+0x44>)
 80a25f2:	f000 fb0b 	bl	80a2c0c <__aeabi_atexit>
	return _usbserial;
}
 80a25f6:	4802      	ldr	r0, [pc, #8]	; (80a2600 <_Z16_fetch_usbserialv+0x44>)
 80a25f8:	b007      	add	sp, #28
 80a25fa:	bd30      	pop	{r4, r5, pc}
 80a25fc:	20000398 	.word	0x20000398
 80a2600:	200003a0 	.word	0x200003a0
 80a2604:	20000148 	.word	0x20000148
 80a2608:	080a24f5 	.word	0x080a24f5

080a260c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a260c:	b510      	push	{r4, lr}
 80a260e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2610:	2214      	movs	r2, #20
 80a2612:	2100      	movs	r1, #0
 80a2614:	f001 fc98 	bl	80a3f48 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2618:	4b05      	ldr	r3, [pc, #20]	; (80a2630 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a261a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a261c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a261e:	4b05      	ldr	r3, [pc, #20]	; (80a2634 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2620:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2622:	f240 1301 	movw	r3, #257	; 0x101
 80a2626:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2628:	2381      	movs	r3, #129	; 0x81
 80a262a:	8223      	strh	r3, [r4, #16]
}
 80a262c:	bd10      	pop	{r4, pc}
 80a262e:	bf00      	nop
 80a2630:	2000054a 	.word	0x2000054a
 80a2634:	2000064b 	.word	0x2000064b

080a2638 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2638:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a263a:	4c0f      	ldr	r4, [pc, #60]	; (80a2678 <_Z17_fetch_usbserial1v+0x40>)
{
 80a263c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a263e:	a801      	add	r0, sp, #4
 80a2640:	f7ff ffe4 	bl	80a260c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2644:	7823      	ldrb	r3, [r4, #0]
 80a2646:	f3bf 8f5b 	dmb	ish
 80a264a:	07db      	lsls	r3, r3, #31
 80a264c:	d410      	bmi.n	80a2670 <_Z17_fetch_usbserial1v+0x38>
 80a264e:	4620      	mov	r0, r4
 80a2650:	f7fd fd29 	bl	80a00a6 <__cxa_guard_acquire>
 80a2654:	b160      	cbz	r0, 80a2670 <_Z17_fetch_usbserial1v+0x38>
 80a2656:	2101      	movs	r1, #1
 80a2658:	aa01      	add	r2, sp, #4
 80a265a:	4808      	ldr	r0, [pc, #32]	; (80a267c <_Z17_fetch_usbserial1v+0x44>)
 80a265c:	f7ff ff84 	bl	80a2568 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2660:	4620      	mov	r0, r4
 80a2662:	f7fd fd25 	bl	80a00b0 <__cxa_guard_release>
 80a2666:	4a06      	ldr	r2, [pc, #24]	; (80a2680 <_Z17_fetch_usbserial1v+0x48>)
 80a2668:	4906      	ldr	r1, [pc, #24]	; (80a2684 <_Z17_fetch_usbserial1v+0x4c>)
 80a266a:	4804      	ldr	r0, [pc, #16]	; (80a267c <_Z17_fetch_usbserial1v+0x44>)
 80a266c:	f000 face 	bl	80a2c0c <__aeabi_atexit>
  return _usbserial1;
}
 80a2670:	4802      	ldr	r0, [pc, #8]	; (80a267c <_Z17_fetch_usbserial1v+0x44>)
 80a2672:	b006      	add	sp, #24
 80a2674:	bd10      	pop	{r4, pc}
 80a2676:	bf00      	nop
 80a2678:	2000039c 	.word	0x2000039c
 80a267c:	200003b4 	.word	0x200003b4
 80a2680:	20000148 	.word	0x20000148
 80a2684:	080a24f5 	.word	0x080a24f5

080a2688 <_ZN10WiFiSignalD1Ev>:
    virtual ~WiFiSignal() {};
 80a2688:	4770      	bx	lr

080a268a <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a268a:	2001      	movs	r0, #1
 80a268c:	4770      	bx	lr

080a268e <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a268e:	2200      	movs	r2, #0
 80a2690:	6840      	ldr	r0, [r0, #4]
 80a2692:	4611      	mov	r1, r2
 80a2694:	f7fe bf74 	b.w	80a1580 <network_ready>

080a2698 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
 80a2698:	b510      	push	{r4, lr}
 80a269a:	4604      	mov	r4, r0
 80a269c:	2124      	movs	r1, #36	; 0x24
 80a269e:	f000 faba 	bl	80a2c16 <_ZdlPvj>
 80a26a2:	4620      	mov	r0, r4
 80a26a4:	bd10      	pop	{r4, pc}

080a26a6 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a26a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a26a8:	4615      	mov	r5, r2
 80a26aa:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a26ac:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a26ae:	460e      	mov	r6, r1
 80a26b0:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a26b2:	2100      	movs	r1, #0
 80a26b4:	a803      	add	r0, sp, #12
 80a26b6:	f001 fc47 	bl	80a3f48 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a26ba:	4628      	mov	r0, r5
 80a26bc:	f001 fc9d 	bl	80a3ffa <strlen>
 80a26c0:	2700      	movs	r7, #0
 80a26c2:	b281      	uxth	r1, r0
 80a26c4:	6873      	ldr	r3, [r6, #4]
 80a26c6:	4628      	mov	r0, r5
 80a26c8:	9700      	str	r7, [sp, #0]
 80a26ca:	aa03      	add	r2, sp, #12
 80a26cc:	f7fe fe92 	bl	80a13f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a26d0:	b130      	cbz	r0, 80a26e0 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a26d2:	4639      	mov	r1, r7
 80a26d4:	4620      	mov	r0, r4
 80a26d6:	f7ff fb8b 	bl	80a1df0 <_ZN9IPAddressC1Em>
    }
 80a26da:	4620      	mov	r0, r4
 80a26dc:	b009      	add	sp, #36	; 0x24
 80a26de:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a26e0:	4620      	mov	r0, r4
 80a26e2:	a903      	add	r1, sp, #12
 80a26e4:	f7ff fb72 	bl	80a1dcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a26e8:	e7f7      	b.n	80a26da <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a26ea <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a26ea:	2200      	movs	r2, #0
 80a26ec:	6840      	ldr	r0, [r0, #4]
 80a26ee:	4611      	mov	r1, r2
 80a26f0:	f7fe bf66 	b.w	80a15c0 <network_listening>

080a26f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a26f4:	2200      	movs	r2, #0
 80a26f6:	6840      	ldr	r0, [r0, #4]
 80a26f8:	4611      	mov	r1, r2
 80a26fa:	f7fe bf71 	b.w	80a15e0 <network_get_listen_timeout>

080a26fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a26fe:	2200      	movs	r2, #0
 80a2700:	6840      	ldr	r0, [r0, #4]
 80a2702:	f7fe bf65 	b.w	80a15d0 <network_set_listen_timeout>

080a2706 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2706:	2200      	movs	r2, #0
 80a2708:	6840      	ldr	r0, [r0, #4]
 80a270a:	f081 0101 	eor.w	r1, r1, #1
 80a270e:	f7fe bf4f 	b.w	80a15b0 <network_listen>

080a2712 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2712:	2300      	movs	r3, #0
 80a2714:	6840      	ldr	r0, [r0, #4]
 80a2716:	461a      	mov	r2, r3
 80a2718:	4619      	mov	r1, r3
 80a271a:	f7fe bf41 	b.w	80a15a0 <network_off>

080a271e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a271e:	2300      	movs	r3, #0
 80a2720:	6840      	ldr	r0, [r0, #4]
 80a2722:	461a      	mov	r2, r3
 80a2724:	4619      	mov	r1, r3
 80a2726:	f7fe bf33 	b.w	80a1590 <network_on>

080a272a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a272a:	2200      	movs	r2, #0
 80a272c:	6840      	ldr	r0, [r0, #4]
 80a272e:	4611      	mov	r1, r2
 80a2730:	f7fe bf16 	b.w	80a1560 <network_connecting>

080a2734 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2734:	2200      	movs	r2, #0
 80a2736:	2102      	movs	r1, #2
 80a2738:	6840      	ldr	r0, [r0, #4]
 80a273a:	f7fe bf19 	b.w	80a1570 <network_disconnect>

080a273e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a273e:	2300      	movs	r3, #0
 80a2740:	6840      	ldr	r0, [r0, #4]
 80a2742:	461a      	mov	r2, r3
 80a2744:	f7fe bf04 	b.w	80a1550 <network_connect>

080a2748 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
 80a2748:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a274a:	8983      	ldrh	r3, [r0, #12]
 80a274c:	b15b      	cbz	r3, 80a2766 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a274e:	6940      	ldr	r0, [r0, #20]
 80a2750:	2800      	cmp	r0, #0
 80a2752:	db08      	blt.n	80a2766 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a2754:	f000 ff0e 	bl	80a3574 <__aeabi_i2f>
 80a2758:	4904      	ldr	r1, [pc, #16]	; (80a276c <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a275a:	f001 f813 	bl	80a3784 <__aeabi_fdiv>
 80a275e:	4904      	ldr	r1, [pc, #16]	; (80a2770 <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a2760:	f000 ff5c 	bl	80a361c <__aeabi_fmul>
    }
    return -1.0f;
}
 80a2764:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a2766:	4803      	ldr	r0, [pc, #12]	; (80a2774 <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
 80a2768:	e7fc      	b.n	80a2764 <_ZNK10WiFiSignal11getStrengthEv+0x1c>
 80a276a:	bf00      	nop
 80a276c:	477fff00 	.word	0x477fff00
 80a2770:	42c80000 	.word	0x42c80000
 80a2774:	bf800000 	.word	0xbf800000

080a2778 <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
 80a2778:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a277a:	8983      	ldrh	r3, [r0, #12]
 80a277c:	b14b      	cbz	r3, 80a2792 <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
 80a277e:	6900      	ldr	r0, [r0, #16]
 80a2780:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a2784:	d005      	beq.n	80a2792 <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
        return inf_.rssi / 100.0f;
 80a2786:	f000 fef5 	bl	80a3574 <__aeabi_i2f>
 80a278a:	4903      	ldr	r1, [pc, #12]	; (80a2798 <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a278c:	f000 fffa 	bl	80a3784 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a2790:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a2792:	2000      	movs	r0, #0
 80a2794:	e7fc      	b.n	80a2790 <_ZNK10WiFiSignal16getStrengthValueEv+0x18>
 80a2796:	bf00      	nop
 80a2798:	42c80000 	.word	0x42c80000

080a279c <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
 80a279c:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a279e:	8983      	ldrh	r3, [r0, #12]
 80a27a0:	b15b      	cbz	r3, 80a27ba <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a27a2:	6a00      	ldr	r0, [r0, #32]
 80a27a4:	2800      	cmp	r0, #0
 80a27a6:	db08      	blt.n	80a27ba <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a27a8:	f000 fee4 	bl	80a3574 <__aeabi_i2f>
 80a27ac:	4904      	ldr	r1, [pc, #16]	; (80a27c0 <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a27ae:	f000 ffe9 	bl	80a3784 <__aeabi_fdiv>
 80a27b2:	4904      	ldr	r1, [pc, #16]	; (80a27c4 <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a27b4:	f000 ff32 	bl	80a361c <__aeabi_fmul>
    }
    return -1.0f;
}
 80a27b8:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a27ba:	4803      	ldr	r0, [pc, #12]	; (80a27c8 <_ZNK10WiFiSignal10getQualityEv+0x2c>)
 80a27bc:	e7fc      	b.n	80a27b8 <_ZNK10WiFiSignal10getQualityEv+0x1c>
 80a27be:	bf00      	nop
 80a27c0:	477fff00 	.word	0x477fff00
 80a27c4:	42c80000 	.word	0x42c80000
 80a27c8:	bf800000 	.word	0xbf800000

080a27cc <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
 80a27cc:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a27ce:	8983      	ldrh	r3, [r0, #12]
 80a27d0:	b14b      	cbz	r3, 80a27e6 <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
 80a27d2:	6980      	ldr	r0, [r0, #24]
 80a27d4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a27d8:	d005      	beq.n	80a27e6 <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
        return inf_.snr / 100.0f;
 80a27da:	f000 fecb 	bl	80a3574 <__aeabi_i2f>
 80a27de:	4903      	ldr	r1, [pc, #12]	; (80a27ec <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a27e0:	f000 ffd0 	bl	80a3784 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a27e4:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a27e6:	2000      	movs	r0, #0
 80a27e8:	e7fc      	b.n	80a27e4 <_ZNK10WiFiSignal15getQualityValueEv+0x18>
 80a27ea:	bf00      	nop
 80a27ec:	42c80000 	.word	0x42c80000

080a27f0 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a27f0:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a27f2:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a27f4:	4606      	mov	r6, r0
    inf_ = inf;
 80a27f6:	f100 050c 	add.w	r5, r0, #12
 80a27fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a27fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a27fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a2802:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a2806:	6933      	ldr	r3, [r6, #16]
}
 80a2808:	2001      	movs	r0, #1
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a280a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a280e:	bf16      	itet	ne
 80a2810:	2264      	movne	r2, #100	; 0x64
 80a2812:	2302      	moveq	r3, #2
 80a2814:	fb93 f3f2 	sdivne	r3, r3, r2
 80a2818:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a281a:	69b3      	ldr	r3, [r6, #24]
 80a281c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2820:	bf16      	itet	ne
 80a2822:	2264      	movne	r2, #100	; 0x64
 80a2824:	2300      	moveq	r3, #0
 80a2826:	fb93 f3f2 	sdivne	r3, r3, r2
 80a282a:	60b3      	str	r3, [r6, #8]
}
 80a282c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2830 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a2830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
 80a2834:	2500      	movs	r5, #0
 80a2836:	f04f 0802 	mov.w	r8, #2
 80a283a:	2618      	movs	r6, #24
 80a283c:	460f      	mov	r7, r1
 80a283e:	4b14      	ldr	r3, [pc, #80]	; (80a2890 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a2840:	4632      	mov	r2, r6
 80a2842:	4629      	mov	r1, r5
 80a2844:	e9c0 8501 	strd	r8, r5, [r0, #4]
 80a2848:	b086      	sub	sp, #24
 80a284a:	6003      	str	r3, [r0, #0]
 80a284c:	4604      	mov	r4, r0
 80a284e:	300c      	adds	r0, #12
 80a2850:	f001 fb7a 	bl	80a3f48 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a2854:	462a      	mov	r2, r5
 80a2856:	4629      	mov	r1, r5
 80a2858:	6878      	ldr	r0, [r7, #4]
 80a285a:	f7fe fe91 	bl	80a1580 <network_ready>
 80a285e:	b180      	cbz	r0, 80a2882 <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a2860:	4632      	mov	r2, r6
 80a2862:	4629      	mov	r1, r5
 80a2864:	4668      	mov	r0, sp
 80a2866:	f001 fb6f 	bl	80a3f48 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a286a:	462a      	mov	r2, r5
 80a286c:	4669      	mov	r1, sp
 80a286e:	4628      	mov	r0, r5
        info.size = sizeof(info);
 80a2870:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a2874:	f7fe fdce 	bl	80a1414 <wlan_connected_info>
        if (r == 0) {
 80a2878:	b938      	cbnz	r0, 80a288a <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
 80a287a:	4669      	mov	r1, sp
 80a287c:	4620      	mov	r0, r4
 80a287e:	f7ff ffb7 	bl	80a27f0 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
 80a2882:	4620      	mov	r0, r4
 80a2884:	b006      	add	sp, #24
 80a2886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
 80a288a:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
 80a288e:	e7f8      	b.n	80a2882 <_ZN5spark9WiFiClass4RSSIEv+0x52>
 80a2890:	080a4e70 	.word	0x080a4e70

080a2894 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2894:	2204      	movs	r2, #4
 80a2896:	4b02      	ldr	r3, [pc, #8]	; (80a28a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2898:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a289a:	4a02      	ldr	r2, [pc, #8]	; (80a28a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a289c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a289e:	4770      	bx	lr
 80a28a0:	200006cc 	.word	0x200006cc
 80a28a4:	080a4e34 	.word	0x080a4e34

080a28a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a28a8:	4b01      	ldr	r3, [pc, #4]	; (80a28b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a28aa:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a28ac:	4770      	bx	lr
 80a28ae:	bf00      	nop
 80a28b0:	20000078 	.word	0x20000078

080a28b4 <serialEventRun>:
{
 80a28b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a28b6:	4b13      	ldr	r3, [pc, #76]	; (80a2904 <serialEventRun+0x50>)
 80a28b8:	b143      	cbz	r3, 80a28cc <serialEventRun+0x18>
 80a28ba:	f7ff fe7f 	bl	80a25bc <_Z16_fetch_usbserialv>
 80a28be:	6803      	ldr	r3, [r0, #0]
 80a28c0:	691b      	ldr	r3, [r3, #16]
 80a28c2:	4798      	blx	r3
 80a28c4:	2800      	cmp	r0, #0
 80a28c6:	dd01      	ble.n	80a28cc <serialEventRun+0x18>
        serialEvent();
 80a28c8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a28cc:	4b0e      	ldr	r3, [pc, #56]	; (80a2908 <serialEventRun+0x54>)
 80a28ce:	b143      	cbz	r3, 80a28e2 <serialEventRun+0x2e>
 80a28d0:	f7ff fde6 	bl	80a24a0 <_Z22__fetch_global_Serial1v>
 80a28d4:	6803      	ldr	r3, [r0, #0]
 80a28d6:	691b      	ldr	r3, [r3, #16]
 80a28d8:	4798      	blx	r3
 80a28da:	2800      	cmp	r0, #0
 80a28dc:	dd01      	ble.n	80a28e2 <serialEventRun+0x2e>
        serialEvent1();
 80a28de:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a28e2:	4b0a      	ldr	r3, [pc, #40]	; (80a290c <serialEventRun+0x58>)
 80a28e4:	b10b      	cbz	r3, 80a28ea <serialEventRun+0x36>
 80a28e6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a28ea:	4b09      	ldr	r3, [pc, #36]	; (80a2910 <serialEventRun+0x5c>)
 80a28ec:	b143      	cbz	r3, 80a2900 <serialEventRun+0x4c>
 80a28ee:	f7ff fea3 	bl	80a2638 <_Z17_fetch_usbserial1v>
 80a28f2:	6803      	ldr	r3, [r0, #0]
 80a28f4:	691b      	ldr	r3, [r3, #16]
 80a28f6:	4798      	blx	r3
 80a28f8:	2800      	cmp	r0, #0
 80a28fa:	dd01      	ble.n	80a2900 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a28fc:	f3af 8000 	nop.w
}
 80a2900:	bd08      	pop	{r3, pc}
 80a2902:	bf00      	nop
	...

080a2914 <_post_loop>:
{
 80a2914:	b508      	push	{r3, lr}
	serialEventRun();
 80a2916:	f7ff ffcd 	bl	80a28b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a291a:	f7fe fc39 	bl	80a1190 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a291e:	4b01      	ldr	r3, [pc, #4]	; (80a2924 <_post_loop+0x10>)
 80a2920:	6018      	str	r0, [r3, #0]
}
 80a2922:	bd08      	pop	{r3, pc}
 80a2924:	200006ec 	.word	0x200006ec

080a2928 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2928:	4802      	ldr	r0, [pc, #8]	; (80a2934 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a292a:	4a03      	ldr	r2, [pc, #12]	; (80a2938 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a292c:	4903      	ldr	r1, [pc, #12]	; (80a293c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a292e:	1a12      	subs	r2, r2, r0
 80a2930:	f001 bafc 	b.w	80a3f2c <memcpy>
 80a2934:	40024000 	.word	0x40024000
 80a2938:	40024004 	.word	0x40024004
 80a293c:	080a50b8 	.word	0x080a50b8

080a2940 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2940:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2942:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2944:	461a      	mov	r2, r3
 80a2946:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a294a:	9300      	str	r3, [sp, #0]
 80a294c:	f7fe fdac 	bl	80a14a8 <system_ctrl_set_result>
}
 80a2950:	b003      	add	sp, #12
 80a2952:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2958 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2958:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a295a:	8843      	ldrh	r3, [r0, #2]
 80a295c:	2b0a      	cmp	r3, #10
 80a295e:	d008      	beq.n	80a2972 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2960:	2b50      	cmp	r3, #80	; 0x50
 80a2962:	d10b      	bne.n	80a297c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2964:	4b09      	ldr	r3, [pc, #36]	; (80a298c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2966:	681b      	ldr	r3, [r3, #0]
 80a2968:	b14b      	cbz	r3, 80a297e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a296a:	b003      	add	sp, #12
 80a296c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2970:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2972:	f7ff ffe5 	bl	80a2940 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2976:	b003      	add	sp, #12
 80a2978:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a297c:	2300      	movs	r3, #0
 80a297e:	461a      	mov	r2, r3
 80a2980:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2984:	9300      	str	r3, [sp, #0]
 80a2986:	f7fe fd8f 	bl	80a14a8 <system_ctrl_set_result>
}
 80a298a:	e7f4      	b.n	80a2976 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a298c:	200006d8 	.word	0x200006d8

080a2990 <module_user_init_hook>:
{
 80a2990:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2992:	4c12      	ldr	r4, [pc, #72]	; (80a29dc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2994:	2100      	movs	r1, #0
 80a2996:	4812      	ldr	r0, [pc, #72]	; (80a29e0 <module_user_init_hook+0x50>)
 80a2998:	f7fe fe7a 	bl	80a1690 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a299c:	4d11      	ldr	r5, [pc, #68]	; (80a29e4 <module_user_init_hook+0x54>)
 80a299e:	6823      	ldr	r3, [r4, #0]
 80a29a0:	42ab      	cmp	r3, r5
 80a29a2:	bf0c      	ite	eq
 80a29a4:	2201      	moveq	r2, #1
 80a29a6:	2200      	movne	r2, #0
 80a29a8:	4b0f      	ldr	r3, [pc, #60]	; (80a29e8 <module_user_init_hook+0x58>)
 80a29aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a29ac:	d002      	beq.n	80a29b4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a29ae:	f7ff ffbb 	bl	80a2928 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a29b2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a29b4:	f7fe fbe4 	bl	80a1180 <HAL_RNG_GetRandomNumber>
 80a29b8:	4604      	mov	r4, r0
    srand(seed);
 80a29ba:	f001 facd 	bl	80a3f58 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a29be:	4b0b      	ldr	r3, [pc, #44]	; (80a29ec <module_user_init_hook+0x5c>)
 80a29c0:	b113      	cbz	r3, 80a29c8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a29c2:	4620      	mov	r0, r4
 80a29c4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a29c8:	2100      	movs	r1, #0
 80a29ca:	4808      	ldr	r0, [pc, #32]	; (80a29ec <module_user_init_hook+0x5c>)
 80a29cc:	f7fe fdb8 	bl	80a1540 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a29d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a29d4:	2100      	movs	r1, #0
 80a29d6:	4806      	ldr	r0, [pc, #24]	; (80a29f0 <module_user_init_hook+0x60>)
 80a29d8:	f7fe bd5c 	b.w	80a1494 <system_ctrl_set_app_request_handler>
 80a29dc:	40024000 	.word	0x40024000
 80a29e0:	080a28a9 	.word	0x080a28a9
 80a29e4:	9a271c1e 	.word	0x9a271c1e
 80a29e8:	200006d4 	.word	0x200006d4
 80a29ec:	00000000 	.word	0x00000000
 80a29f0:	080a2959 	.word	0x080a2959

080a29f4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a29f4:	b510      	push	{r4, lr}
 80a29f6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a29f8:	6880      	ldr	r0, [r0, #8]
 80a29fa:	b108      	cbz	r0, 80a2a00 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a29fc:	f7fe fba8 	bl	80a1150 <os_mutex_recursive_destroy>
 80a2a00:	4620      	mov	r0, r4
 80a2a02:	bd10      	pop	{r4, pc}

080a2a04 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2a04:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2a06:	b570      	push	{r4, r5, r6, lr}
 80a2a08:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2a0a:	d901      	bls.n	80a2a10 <pinAvailable+0xc>
    return false;
 80a2a0c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2a0e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2a10:	f1a0 030d 	sub.w	r3, r0, #13
 80a2a14:	2b02      	cmp	r3, #2
 80a2a16:	d90b      	bls.n	80a2a30 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2a18:	2801      	cmp	r0, #1
 80a2a1a:	d826      	bhi.n	80a2a6a <pinAvailable+0x66>
 80a2a1c:	f000 f8b6 	bl	80a2b8c <_Z19__fetch_global_Wirev>
 80a2a20:	2100      	movs	r1, #0
 80a2a22:	7c00      	ldrb	r0, [r0, #16]
 80a2a24:	f7fe fc54 	bl	80a12d0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2a28:	f080 0001 	eor.w	r0, r0, #1
 80a2a2c:	b2c0      	uxtb	r0, r0
 80a2a2e:	e7ee      	b.n	80a2a0e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2a30:	4e13      	ldr	r6, [pc, #76]	; (80a2a80 <pinAvailable+0x7c>)
 80a2a32:	7831      	ldrb	r1, [r6, #0]
 80a2a34:	f3bf 8f5b 	dmb	ish
 80a2a38:	f011 0501 	ands.w	r5, r1, #1
 80a2a3c:	d10f      	bne.n	80a2a5e <pinAvailable+0x5a>
 80a2a3e:	4630      	mov	r0, r6
 80a2a40:	f7fd fb31 	bl	80a00a6 <__cxa_guard_acquire>
 80a2a44:	b158      	cbz	r0, 80a2a5e <pinAvailable+0x5a>
 80a2a46:	4629      	mov	r1, r5
 80a2a48:	480e      	ldr	r0, [pc, #56]	; (80a2a84 <pinAvailable+0x80>)
 80a2a4a:	f7ff fac3 	bl	80a1fd4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2a4e:	4630      	mov	r0, r6
 80a2a50:	f7fd fb2e 	bl	80a00b0 <__cxa_guard_release>
 80a2a54:	4a0c      	ldr	r2, [pc, #48]	; (80a2a88 <pinAvailable+0x84>)
 80a2a56:	490d      	ldr	r1, [pc, #52]	; (80a2a8c <pinAvailable+0x88>)
 80a2a58:	480a      	ldr	r0, [pc, #40]	; (80a2a84 <pinAvailable+0x80>)
 80a2a5a:	f000 f8d7 	bl	80a2c0c <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2a5e:	4b09      	ldr	r3, [pc, #36]	; (80a2a84 <pinAvailable+0x80>)
 80a2a60:	7818      	ldrb	r0, [r3, #0]
 80a2a62:	f7fe fc4f 	bl	80a1304 <hal_spi_is_enabled>
 80a2a66:	2800      	cmp	r0, #0
 80a2a68:	d1d0      	bne.n	80a2a0c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2a6a:	3c12      	subs	r4, #18
 80a2a6c:	2c01      	cmp	r4, #1
 80a2a6e:	d805      	bhi.n	80a2a7c <pinAvailable+0x78>
 80a2a70:	f7ff fd16 	bl	80a24a0 <_Z22__fetch_global_Serial1v>
 80a2a74:	7c00      	ldrb	r0, [r0, #16]
 80a2a76:	f7fe fc7d 	bl	80a1374 <hal_usart_is_enabled>
 80a2a7a:	e7d5      	b.n	80a2a28 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2a7c:	2001      	movs	r0, #1
 80a2a7e:	e7c6      	b.n	80a2a0e <pinAvailable+0xa>
 80a2a80:	200006dc 	.word	0x200006dc
 80a2a84:	200006e0 	.word	0x200006e0
 80a2a88:	20000148 	.word	0x20000148
 80a2a8c:	080a29f5 	.word	0x080a29f5

080a2a90 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2a90:	2817      	cmp	r0, #23
{
 80a2a92:	b538      	push	{r3, r4, r5, lr}
 80a2a94:	4604      	mov	r4, r0
 80a2a96:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2a98:	d80a      	bhi.n	80a2ab0 <pinMode+0x20>
 80a2a9a:	29ff      	cmp	r1, #255	; 0xff
 80a2a9c:	d008      	beq.n	80a2ab0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2a9e:	f7ff ffb1 	bl	80a2a04 <pinAvailable>
 80a2aa2:	b128      	cbz	r0, 80a2ab0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2aa4:	4629      	mov	r1, r5
 80a2aa6:	4620      	mov	r0, r4
}
 80a2aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2aac:	f7fe bbb0 	b.w	80a1210 <HAL_Pin_Mode>
}
 80a2ab0:	bd38      	pop	{r3, r4, r5, pc}

080a2ab2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2ab2:	b538      	push	{r3, r4, r5, lr}
 80a2ab4:	4604      	mov	r4, r0
 80a2ab6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2ab8:	f7fe fbb2 	bl	80a1220 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2abc:	28ff      	cmp	r0, #255	; 0xff
 80a2abe:	d010      	beq.n	80a2ae2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2ac0:	2806      	cmp	r0, #6
 80a2ac2:	d804      	bhi.n	80a2ace <digitalWrite+0x1c>
 80a2ac4:	234d      	movs	r3, #77	; 0x4d
 80a2ac6:	fa23 f000 	lsr.w	r0, r3, r0
 80a2aca:	07c3      	lsls	r3, r0, #31
 80a2acc:	d409      	bmi.n	80a2ae2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2ace:	4620      	mov	r0, r4
 80a2ad0:	f7ff ff98 	bl	80a2a04 <pinAvailable>
 80a2ad4:	b128      	cbz	r0, 80a2ae2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2ad6:	4629      	mov	r1, r5
 80a2ad8:	4620      	mov	r0, r4
}
 80a2ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2ade:	f7fe bba7 	b.w	80a1230 <HAL_GPIO_Write>
}
 80a2ae2:	bd38      	pop	{r3, r4, r5, pc}

080a2ae4 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a2ae4:	b538      	push	{r3, r4, r5, lr}
 80a2ae6:	4604      	mov	r4, r0
 80a2ae8:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a2aea:	f7ff ff8b 	bl	80a2a04 <pinAvailable>
 80a2aee:	b1f0      	cbz	r0, 80a2b2e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a2af0:	2104      	movs	r1, #4
 80a2af2:	4620      	mov	r0, r4
 80a2af4:	f7fe fb84 	bl	80a1200 <HAL_Validate_Pin_Function>
 80a2af8:	2804      	cmp	r0, #4
 80a2afa:	d105      	bne.n	80a2b08 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a2afc:	4620      	mov	r0, r4
 80a2afe:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 80a2b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 80a2b04:	f7fe bbac 	b.w	80a1260 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a2b08:	2102      	movs	r1, #2
 80a2b0a:	4620      	mov	r0, r4
 80a2b0c:	f7fe fb78 	bl	80a1200 <HAL_Validate_Pin_Function>
 80a2b10:	2802      	cmp	r0, #2
 80a2b12:	d10c      	bne.n	80a2b2e <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2b14:	4620      	mov	r0, r4
 80a2b16:	f7fe fb83 	bl	80a1220 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a2b1a:	2801      	cmp	r0, #1
 80a2b1c:	d001      	beq.n	80a2b22 <_Z11analogWritetm+0x3e>
 80a2b1e:	2804      	cmp	r0, #4
 80a2b20:	d105      	bne.n	80a2b2e <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 80a2b22:	4629      	mov	r1, r5
 80a2b24:	4620      	mov	r0, r4
}
 80a2b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 80a2b2a:	f7fe bba1 	b.w	80a1270 <hal_pwm_write_ext>
}
 80a2b2e:	bd38      	pop	{r3, r4, r5, pc}

080a2b30 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a2b30:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a2b32:	4c08      	ldr	r4, [pc, #32]	; (80a2b54 <_Z21__fetch_global_EEPROMv+0x24>)
 80a2b34:	7823      	ldrb	r3, [r4, #0]
 80a2b36:	f3bf 8f5b 	dmb	ish
 80a2b3a:	07db      	lsls	r3, r3, #31
 80a2b3c:	d408      	bmi.n	80a2b50 <_Z21__fetch_global_EEPROMv+0x20>
 80a2b3e:	4620      	mov	r0, r4
 80a2b40:	f7fd fab1 	bl	80a00a6 <__cxa_guard_acquire>
 80a2b44:	b120      	cbz	r0, 80a2b50 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a2b46:	f7fe fb2b 	bl	80a11a0 <HAL_EEPROM_Init>
 80a2b4a:	4620      	mov	r0, r4
 80a2b4c:	f7fd fab0 	bl	80a00b0 <__cxa_guard_release>
	return eeprom;
}
 80a2b50:	4801      	ldr	r0, [pc, #4]	; (80a2b58 <_Z21__fetch_global_EEPROMv+0x28>)
 80a2b52:	bd10      	pop	{r4, pc}
 80a2b54:	200006f0 	.word	0x200006f0
 80a2b58:	200006f4 	.word	0x200006f4

080a2b5c <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a2b5c:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a2b5e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2b60:	2520      	movs	r5, #32
 80a2b62:	8043      	strh	r3, [r0, #2]
 80a2b64:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2b66:	4e08      	ldr	r6, [pc, #32]	; (80a2b88 <_Z17acquireWireBufferv+0x2c>)
{
 80a2b68:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2b6a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2b6c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2b6e:	6085      	str	r5, [r0, #8]
 80a2b70:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2b72:	4628      	mov	r0, r5
 80a2b74:	f000 f851 	bl	80a2c1a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2b78:	4631      	mov	r1, r6
	};
 80a2b7a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2b7c:	4628      	mov	r0, r5
 80a2b7e:	f000 f84c 	bl	80a2c1a <_ZnajRKSt9nothrow_t>
	};
 80a2b82:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a2b84:	4620      	mov	r0, r4
 80a2b86:	bd70      	pop	{r4, r5, r6, pc}
 80a2b88:	080a4e8c 	.word	0x080a4e8c

080a2b8c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2b8c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2b8e:	4d0f      	ldr	r5, [pc, #60]	; (80a2bcc <_Z19__fetch_global_Wirev+0x40>)
{
 80a2b90:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2b92:	7829      	ldrb	r1, [r5, #0]
 80a2b94:	f3bf 8f5b 	dmb	ish
 80a2b98:	f011 0401 	ands.w	r4, r1, #1
 80a2b9c:	d113      	bne.n	80a2bc6 <_Z19__fetch_global_Wirev+0x3a>
 80a2b9e:	4628      	mov	r0, r5
 80a2ba0:	f7fd fa81 	bl	80a00a6 <__cxa_guard_acquire>
 80a2ba4:	b178      	cbz	r0, 80a2bc6 <_Z19__fetch_global_Wirev+0x3a>
 80a2ba6:	a801      	add	r0, sp, #4
 80a2ba8:	f7ff ffd8 	bl	80a2b5c <_Z17acquireWireBufferv>
 80a2bac:	4621      	mov	r1, r4
 80a2bae:	aa01      	add	r2, sp, #4
 80a2bb0:	4807      	ldr	r0, [pc, #28]	; (80a2bd0 <_Z19__fetch_global_Wirev+0x44>)
 80a2bb2:	f7ff f89d 	bl	80a1cf0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2bb6:	4628      	mov	r0, r5
 80a2bb8:	f7fd fa7a 	bl	80a00b0 <__cxa_guard_release>
 80a2bbc:	4a05      	ldr	r2, [pc, #20]	; (80a2bd4 <_Z19__fetch_global_Wirev+0x48>)
 80a2bbe:	4906      	ldr	r1, [pc, #24]	; (80a2bd8 <_Z19__fetch_global_Wirev+0x4c>)
 80a2bc0:	4803      	ldr	r0, [pc, #12]	; (80a2bd0 <_Z19__fetch_global_Wirev+0x44>)
 80a2bc2:	f000 f823 	bl	80a2c0c <__aeabi_atexit>
	return wire;
}
 80a2bc6:	4802      	ldr	r0, [pc, #8]	; (80a2bd0 <_Z19__fetch_global_Wirev+0x44>)
 80a2bc8:	b007      	add	sp, #28
 80a2bca:	bd30      	pop	{r4, r5, pc}
 80a2bcc:	200006f8 	.word	0x200006f8
 80a2bd0:	200006fc 	.word	0x200006fc
 80a2bd4:	20000148 	.word	0x20000148
 80a2bd8:	080a1c99 	.word	0x080a1c99

080a2bdc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2bdc:	2300      	movs	r3, #0
 80a2bde:	b513      	push	{r0, r1, r4, lr}
 80a2be0:	4c07      	ldr	r4, [pc, #28]	; (80a2c00 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2be2:	461a      	mov	r2, r3
 80a2be4:	4619      	mov	r1, r3
 80a2be6:	4620      	mov	r0, r4
 80a2be8:	9300      	str	r3, [sp, #0]
 80a2bea:	f7ff f917 	bl	80a1e1c <_ZN9IPAddressC1Ehhhh>
 80a2bee:	4620      	mov	r0, r4
 80a2bf0:	4a04      	ldr	r2, [pc, #16]	; (80a2c04 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2bf2:	4905      	ldr	r1, [pc, #20]	; (80a2c08 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2bf4:	b002      	add	sp, #8
 80a2bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2bfa:	f000 b807 	b.w	80a2c0c <__aeabi_atexit>
 80a2bfe:	bf00      	nop
 80a2c00:	20000710 	.word	0x20000710
 80a2c04:	20000148 	.word	0x20000148
 80a2c08:	080a1d6d 	.word	0x080a1d6d

080a2c0c <__aeabi_atexit>:
 80a2c0c:	460b      	mov	r3, r1
 80a2c0e:	4601      	mov	r1, r0
 80a2c10:	4618      	mov	r0, r3
 80a2c12:	f001 b887 	b.w	80a3d24 <__cxa_atexit>

080a2c16 <_ZdlPvj>:
 80a2c16:	f7fd ba44 	b.w	80a00a2 <_ZdlPv>

080a2c1a <_ZnajRKSt9nothrow_t>:
 80a2c1a:	f7fd ba40 	b.w	80a009e <_Znaj>

080a2c1e <_ZSt25__throw_bad_function_callv>:
 80a2c1e:	b508      	push	{r3, lr}
 80a2c20:	f7fe fd26 	bl	80a1670 <abort>

080a2c24 <__aeabi_drsub>:
 80a2c24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2c28:	e002      	b.n	80a2c30 <__adddf3>
 80a2c2a:	bf00      	nop

080a2c2c <__aeabi_dsub>:
 80a2c2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2c30 <__adddf3>:
 80a2c30:	b530      	push	{r4, r5, lr}
 80a2c32:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2c36:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2c3a:	ea94 0f05 	teq	r4, r5
 80a2c3e:	bf08      	it	eq
 80a2c40:	ea90 0f02 	teqeq	r0, r2
 80a2c44:	bf1f      	itttt	ne
 80a2c46:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2c4a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2c4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2c52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2c56:	f000 80e2 	beq.w	80a2e1e <__adddf3+0x1ee>
 80a2c5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2c5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2c62:	bfb8      	it	lt
 80a2c64:	426d      	neglt	r5, r5
 80a2c66:	dd0c      	ble.n	80a2c82 <__adddf3+0x52>
 80a2c68:	442c      	add	r4, r5
 80a2c6a:	ea80 0202 	eor.w	r2, r0, r2
 80a2c6e:	ea81 0303 	eor.w	r3, r1, r3
 80a2c72:	ea82 0000 	eor.w	r0, r2, r0
 80a2c76:	ea83 0101 	eor.w	r1, r3, r1
 80a2c7a:	ea80 0202 	eor.w	r2, r0, r2
 80a2c7e:	ea81 0303 	eor.w	r3, r1, r3
 80a2c82:	2d36      	cmp	r5, #54	; 0x36
 80a2c84:	bf88      	it	hi
 80a2c86:	bd30      	pophi	{r4, r5, pc}
 80a2c88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2c8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2c90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2c94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2c98:	d002      	beq.n	80a2ca0 <__adddf3+0x70>
 80a2c9a:	4240      	negs	r0, r0
 80a2c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2ca0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2ca4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2ca8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2cac:	d002      	beq.n	80a2cb4 <__adddf3+0x84>
 80a2cae:	4252      	negs	r2, r2
 80a2cb0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2cb4:	ea94 0f05 	teq	r4, r5
 80a2cb8:	f000 80a7 	beq.w	80a2e0a <__adddf3+0x1da>
 80a2cbc:	f1a4 0401 	sub.w	r4, r4, #1
 80a2cc0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2cc4:	db0d      	blt.n	80a2ce2 <__adddf3+0xb2>
 80a2cc6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2cca:	fa22 f205 	lsr.w	r2, r2, r5
 80a2cce:	1880      	adds	r0, r0, r2
 80a2cd0:	f141 0100 	adc.w	r1, r1, #0
 80a2cd4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2cd8:	1880      	adds	r0, r0, r2
 80a2cda:	fa43 f305 	asr.w	r3, r3, r5
 80a2cde:	4159      	adcs	r1, r3
 80a2ce0:	e00e      	b.n	80a2d00 <__adddf3+0xd0>
 80a2ce2:	f1a5 0520 	sub.w	r5, r5, #32
 80a2ce6:	f10e 0e20 	add.w	lr, lr, #32
 80a2cea:	2a01      	cmp	r2, #1
 80a2cec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2cf0:	bf28      	it	cs
 80a2cf2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2cf6:	fa43 f305 	asr.w	r3, r3, r5
 80a2cfa:	18c0      	adds	r0, r0, r3
 80a2cfc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2d00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2d04:	d507      	bpl.n	80a2d16 <__adddf3+0xe6>
 80a2d06:	f04f 0e00 	mov.w	lr, #0
 80a2d0a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2d0e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2d12:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2d16:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2d1a:	d31b      	bcc.n	80a2d54 <__adddf3+0x124>
 80a2d1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2d20:	d30c      	bcc.n	80a2d3c <__adddf3+0x10c>
 80a2d22:	0849      	lsrs	r1, r1, #1
 80a2d24:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2d28:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2d2c:	f104 0401 	add.w	r4, r4, #1
 80a2d30:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2d34:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2d38:	f080 809a 	bcs.w	80a2e70 <__adddf3+0x240>
 80a2d3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2d40:	bf08      	it	eq
 80a2d42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2d46:	f150 0000 	adcs.w	r0, r0, #0
 80a2d4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2d4e:	ea41 0105 	orr.w	r1, r1, r5
 80a2d52:	bd30      	pop	{r4, r5, pc}
 80a2d54:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2d58:	4140      	adcs	r0, r0
 80a2d5a:	eb41 0101 	adc.w	r1, r1, r1
 80a2d5e:	3c01      	subs	r4, #1
 80a2d60:	bf28      	it	cs
 80a2d62:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a2d66:	d2e9      	bcs.n	80a2d3c <__adddf3+0x10c>
 80a2d68:	f091 0f00 	teq	r1, #0
 80a2d6c:	bf04      	itt	eq
 80a2d6e:	4601      	moveq	r1, r0
 80a2d70:	2000      	moveq	r0, #0
 80a2d72:	fab1 f381 	clz	r3, r1
 80a2d76:	bf08      	it	eq
 80a2d78:	3320      	addeq	r3, #32
 80a2d7a:	f1a3 030b 	sub.w	r3, r3, #11
 80a2d7e:	f1b3 0220 	subs.w	r2, r3, #32
 80a2d82:	da0c      	bge.n	80a2d9e <__adddf3+0x16e>
 80a2d84:	320c      	adds	r2, #12
 80a2d86:	dd08      	ble.n	80a2d9a <__adddf3+0x16a>
 80a2d88:	f102 0c14 	add.w	ip, r2, #20
 80a2d8c:	f1c2 020c 	rsb	r2, r2, #12
 80a2d90:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2d94:	fa21 f102 	lsr.w	r1, r1, r2
 80a2d98:	e00c      	b.n	80a2db4 <__adddf3+0x184>
 80a2d9a:	f102 0214 	add.w	r2, r2, #20
 80a2d9e:	bfd8      	it	le
 80a2da0:	f1c2 0c20 	rsble	ip, r2, #32
 80a2da4:	fa01 f102 	lsl.w	r1, r1, r2
 80a2da8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2dac:	bfdc      	itt	le
 80a2dae:	ea41 010c 	orrle.w	r1, r1, ip
 80a2db2:	4090      	lslle	r0, r2
 80a2db4:	1ae4      	subs	r4, r4, r3
 80a2db6:	bfa2      	ittt	ge
 80a2db8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2dbc:	4329      	orrge	r1, r5
 80a2dbe:	bd30      	popge	{r4, r5, pc}
 80a2dc0:	ea6f 0404 	mvn.w	r4, r4
 80a2dc4:	3c1f      	subs	r4, #31
 80a2dc6:	da1c      	bge.n	80a2e02 <__adddf3+0x1d2>
 80a2dc8:	340c      	adds	r4, #12
 80a2dca:	dc0e      	bgt.n	80a2dea <__adddf3+0x1ba>
 80a2dcc:	f104 0414 	add.w	r4, r4, #20
 80a2dd0:	f1c4 0220 	rsb	r2, r4, #32
 80a2dd4:	fa20 f004 	lsr.w	r0, r0, r4
 80a2dd8:	fa01 f302 	lsl.w	r3, r1, r2
 80a2ddc:	ea40 0003 	orr.w	r0, r0, r3
 80a2de0:	fa21 f304 	lsr.w	r3, r1, r4
 80a2de4:	ea45 0103 	orr.w	r1, r5, r3
 80a2de8:	bd30      	pop	{r4, r5, pc}
 80a2dea:	f1c4 040c 	rsb	r4, r4, #12
 80a2dee:	f1c4 0220 	rsb	r2, r4, #32
 80a2df2:	fa20 f002 	lsr.w	r0, r0, r2
 80a2df6:	fa01 f304 	lsl.w	r3, r1, r4
 80a2dfa:	ea40 0003 	orr.w	r0, r0, r3
 80a2dfe:	4629      	mov	r1, r5
 80a2e00:	bd30      	pop	{r4, r5, pc}
 80a2e02:	fa21 f004 	lsr.w	r0, r1, r4
 80a2e06:	4629      	mov	r1, r5
 80a2e08:	bd30      	pop	{r4, r5, pc}
 80a2e0a:	f094 0f00 	teq	r4, #0
 80a2e0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2e12:	bf06      	itte	eq
 80a2e14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2e18:	3401      	addeq	r4, #1
 80a2e1a:	3d01      	subne	r5, #1
 80a2e1c:	e74e      	b.n	80a2cbc <__adddf3+0x8c>
 80a2e1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2e22:	bf18      	it	ne
 80a2e24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2e28:	d029      	beq.n	80a2e7e <__adddf3+0x24e>
 80a2e2a:	ea94 0f05 	teq	r4, r5
 80a2e2e:	bf08      	it	eq
 80a2e30:	ea90 0f02 	teqeq	r0, r2
 80a2e34:	d005      	beq.n	80a2e42 <__adddf3+0x212>
 80a2e36:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2e3a:	bf04      	itt	eq
 80a2e3c:	4619      	moveq	r1, r3
 80a2e3e:	4610      	moveq	r0, r2
 80a2e40:	bd30      	pop	{r4, r5, pc}
 80a2e42:	ea91 0f03 	teq	r1, r3
 80a2e46:	bf1e      	ittt	ne
 80a2e48:	2100      	movne	r1, #0
 80a2e4a:	2000      	movne	r0, #0
 80a2e4c:	bd30      	popne	{r4, r5, pc}
 80a2e4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2e52:	d105      	bne.n	80a2e60 <__adddf3+0x230>
 80a2e54:	0040      	lsls	r0, r0, #1
 80a2e56:	4149      	adcs	r1, r1
 80a2e58:	bf28      	it	cs
 80a2e5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2e5e:	bd30      	pop	{r4, r5, pc}
 80a2e60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2e64:	bf3c      	itt	cc
 80a2e66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2e6a:	bd30      	popcc	{r4, r5, pc}
 80a2e6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2e70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2e74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2e78:	f04f 0000 	mov.w	r0, #0
 80a2e7c:	bd30      	pop	{r4, r5, pc}
 80a2e7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2e82:	bf1a      	itte	ne
 80a2e84:	4619      	movne	r1, r3
 80a2e86:	4610      	movne	r0, r2
 80a2e88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2e8c:	bf1c      	itt	ne
 80a2e8e:	460b      	movne	r3, r1
 80a2e90:	4602      	movne	r2, r0
 80a2e92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2e96:	bf06      	itte	eq
 80a2e98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2e9c:	ea91 0f03 	teqeq	r1, r3
 80a2ea0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2ea4:	bd30      	pop	{r4, r5, pc}
 80a2ea6:	bf00      	nop

080a2ea8 <__aeabi_ui2d>:
 80a2ea8:	f090 0f00 	teq	r0, #0
 80a2eac:	bf04      	itt	eq
 80a2eae:	2100      	moveq	r1, #0
 80a2eb0:	4770      	bxeq	lr
 80a2eb2:	b530      	push	{r4, r5, lr}
 80a2eb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2eb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2ebc:	f04f 0500 	mov.w	r5, #0
 80a2ec0:	f04f 0100 	mov.w	r1, #0
 80a2ec4:	e750      	b.n	80a2d68 <__adddf3+0x138>
 80a2ec6:	bf00      	nop

080a2ec8 <__aeabi_i2d>:
 80a2ec8:	f090 0f00 	teq	r0, #0
 80a2ecc:	bf04      	itt	eq
 80a2ece:	2100      	moveq	r1, #0
 80a2ed0:	4770      	bxeq	lr
 80a2ed2:	b530      	push	{r4, r5, lr}
 80a2ed4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2ed8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2edc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2ee0:	bf48      	it	mi
 80a2ee2:	4240      	negmi	r0, r0
 80a2ee4:	f04f 0100 	mov.w	r1, #0
 80a2ee8:	e73e      	b.n	80a2d68 <__adddf3+0x138>
 80a2eea:	bf00      	nop

080a2eec <__aeabi_f2d>:
 80a2eec:	0042      	lsls	r2, r0, #1
 80a2eee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2ef2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2ef6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2efa:	bf1f      	itttt	ne
 80a2efc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2f00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2f04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2f08:	4770      	bxne	lr
 80a2f0a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a2f0e:	bf08      	it	eq
 80a2f10:	4770      	bxeq	lr
 80a2f12:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a2f16:	bf04      	itt	eq
 80a2f18:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a2f1c:	4770      	bxeq	lr
 80a2f1e:	b530      	push	{r4, r5, lr}
 80a2f20:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2f24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2f28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2f2c:	e71c      	b.n	80a2d68 <__adddf3+0x138>
 80a2f2e:	bf00      	nop

080a2f30 <__aeabi_ul2d>:
 80a2f30:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f34:	bf08      	it	eq
 80a2f36:	4770      	bxeq	lr
 80a2f38:	b530      	push	{r4, r5, lr}
 80a2f3a:	f04f 0500 	mov.w	r5, #0
 80a2f3e:	e00a      	b.n	80a2f56 <__aeabi_l2d+0x16>

080a2f40 <__aeabi_l2d>:
 80a2f40:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f44:	bf08      	it	eq
 80a2f46:	4770      	bxeq	lr
 80a2f48:	b530      	push	{r4, r5, lr}
 80a2f4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2f4e:	d502      	bpl.n	80a2f56 <__aeabi_l2d+0x16>
 80a2f50:	4240      	negs	r0, r0
 80a2f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2f56:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2f5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2f5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2f62:	f43f aed8 	beq.w	80a2d16 <__adddf3+0xe6>
 80a2f66:	f04f 0203 	mov.w	r2, #3
 80a2f6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2f6e:	bf18      	it	ne
 80a2f70:	3203      	addne	r2, #3
 80a2f72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2f76:	bf18      	it	ne
 80a2f78:	3203      	addne	r2, #3
 80a2f7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2f7e:	f1c2 0320 	rsb	r3, r2, #32
 80a2f82:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2f86:	fa20 f002 	lsr.w	r0, r0, r2
 80a2f8a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2f8e:	ea40 000e 	orr.w	r0, r0, lr
 80a2f92:	fa21 f102 	lsr.w	r1, r1, r2
 80a2f96:	4414      	add	r4, r2
 80a2f98:	e6bd      	b.n	80a2d16 <__adddf3+0xe6>
 80a2f9a:	bf00      	nop

080a2f9c <__aeabi_dmul>:
 80a2f9c:	b570      	push	{r4, r5, r6, lr}
 80a2f9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2fa2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2fa6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2faa:	bf1d      	ittte	ne
 80a2fac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2fb0:	ea94 0f0c 	teqne	r4, ip
 80a2fb4:	ea95 0f0c 	teqne	r5, ip
 80a2fb8:	f000 f8de 	bleq	80a3178 <__aeabi_dmul+0x1dc>
 80a2fbc:	442c      	add	r4, r5
 80a2fbe:	ea81 0603 	eor.w	r6, r1, r3
 80a2fc2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2fc6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2fca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2fce:	bf18      	it	ne
 80a2fd0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2fd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2fdc:	d038      	beq.n	80a3050 <__aeabi_dmul+0xb4>
 80a2fde:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2fe2:	f04f 0500 	mov.w	r5, #0
 80a2fe6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2fea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2fee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2ff2:	f04f 0600 	mov.w	r6, #0
 80a2ff6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2ffa:	f09c 0f00 	teq	ip, #0
 80a2ffe:	bf18      	it	ne
 80a3000:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3004:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3008:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a300c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3010:	d204      	bcs.n	80a301c <__aeabi_dmul+0x80>
 80a3012:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3016:	416d      	adcs	r5, r5
 80a3018:	eb46 0606 	adc.w	r6, r6, r6
 80a301c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3020:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3024:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3028:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a302c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3030:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3034:	bf88      	it	hi
 80a3036:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a303a:	d81e      	bhi.n	80a307a <__aeabi_dmul+0xde>
 80a303c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3040:	bf08      	it	eq
 80a3042:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3046:	f150 0000 	adcs.w	r0, r0, #0
 80a304a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a304e:	bd70      	pop	{r4, r5, r6, pc}
 80a3050:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3054:	ea46 0101 	orr.w	r1, r6, r1
 80a3058:	ea40 0002 	orr.w	r0, r0, r2
 80a305c:	ea81 0103 	eor.w	r1, r1, r3
 80a3060:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3064:	bfc2      	ittt	gt
 80a3066:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a306a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a306e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3070:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3074:	f04f 0e00 	mov.w	lr, #0
 80a3078:	3c01      	subs	r4, #1
 80a307a:	f300 80ab 	bgt.w	80a31d4 <__aeabi_dmul+0x238>
 80a307e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3082:	bfde      	ittt	le
 80a3084:	2000      	movle	r0, #0
 80a3086:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a308a:	bd70      	pople	{r4, r5, r6, pc}
 80a308c:	f1c4 0400 	rsb	r4, r4, #0
 80a3090:	3c20      	subs	r4, #32
 80a3092:	da35      	bge.n	80a3100 <__aeabi_dmul+0x164>
 80a3094:	340c      	adds	r4, #12
 80a3096:	dc1b      	bgt.n	80a30d0 <__aeabi_dmul+0x134>
 80a3098:	f104 0414 	add.w	r4, r4, #20
 80a309c:	f1c4 0520 	rsb	r5, r4, #32
 80a30a0:	fa00 f305 	lsl.w	r3, r0, r5
 80a30a4:	fa20 f004 	lsr.w	r0, r0, r4
 80a30a8:	fa01 f205 	lsl.w	r2, r1, r5
 80a30ac:	ea40 0002 	orr.w	r0, r0, r2
 80a30b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a30b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a30b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a30bc:	fa21 f604 	lsr.w	r6, r1, r4
 80a30c0:	eb42 0106 	adc.w	r1, r2, r6
 80a30c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a30c8:	bf08      	it	eq
 80a30ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a30ce:	bd70      	pop	{r4, r5, r6, pc}
 80a30d0:	f1c4 040c 	rsb	r4, r4, #12
 80a30d4:	f1c4 0520 	rsb	r5, r4, #32
 80a30d8:	fa00 f304 	lsl.w	r3, r0, r4
 80a30dc:	fa20 f005 	lsr.w	r0, r0, r5
 80a30e0:	fa01 f204 	lsl.w	r2, r1, r4
 80a30e4:	ea40 0002 	orr.w	r0, r0, r2
 80a30e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a30ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a30f0:	f141 0100 	adc.w	r1, r1, #0
 80a30f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a30f8:	bf08      	it	eq
 80a30fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a30fe:	bd70      	pop	{r4, r5, r6, pc}
 80a3100:	f1c4 0520 	rsb	r5, r4, #32
 80a3104:	fa00 f205 	lsl.w	r2, r0, r5
 80a3108:	ea4e 0e02 	orr.w	lr, lr, r2
 80a310c:	fa20 f304 	lsr.w	r3, r0, r4
 80a3110:	fa01 f205 	lsl.w	r2, r1, r5
 80a3114:	ea43 0302 	orr.w	r3, r3, r2
 80a3118:	fa21 f004 	lsr.w	r0, r1, r4
 80a311c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3120:	fa21 f204 	lsr.w	r2, r1, r4
 80a3124:	ea20 0002 	bic.w	r0, r0, r2
 80a3128:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a312c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3130:	bf08      	it	eq
 80a3132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3136:	bd70      	pop	{r4, r5, r6, pc}
 80a3138:	f094 0f00 	teq	r4, #0
 80a313c:	d10f      	bne.n	80a315e <__aeabi_dmul+0x1c2>
 80a313e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3142:	0040      	lsls	r0, r0, #1
 80a3144:	eb41 0101 	adc.w	r1, r1, r1
 80a3148:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a314c:	bf08      	it	eq
 80a314e:	3c01      	subeq	r4, #1
 80a3150:	d0f7      	beq.n	80a3142 <__aeabi_dmul+0x1a6>
 80a3152:	ea41 0106 	orr.w	r1, r1, r6
 80a3156:	f095 0f00 	teq	r5, #0
 80a315a:	bf18      	it	ne
 80a315c:	4770      	bxne	lr
 80a315e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3162:	0052      	lsls	r2, r2, #1
 80a3164:	eb43 0303 	adc.w	r3, r3, r3
 80a3168:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a316c:	bf08      	it	eq
 80a316e:	3d01      	subeq	r5, #1
 80a3170:	d0f7      	beq.n	80a3162 <__aeabi_dmul+0x1c6>
 80a3172:	ea43 0306 	orr.w	r3, r3, r6
 80a3176:	4770      	bx	lr
 80a3178:	ea94 0f0c 	teq	r4, ip
 80a317c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3180:	bf18      	it	ne
 80a3182:	ea95 0f0c 	teqne	r5, ip
 80a3186:	d00c      	beq.n	80a31a2 <__aeabi_dmul+0x206>
 80a3188:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a318c:	bf18      	it	ne
 80a318e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3192:	d1d1      	bne.n	80a3138 <__aeabi_dmul+0x19c>
 80a3194:	ea81 0103 	eor.w	r1, r1, r3
 80a3198:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a319c:	f04f 0000 	mov.w	r0, #0
 80a31a0:	bd70      	pop	{r4, r5, r6, pc}
 80a31a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a31a6:	bf06      	itte	eq
 80a31a8:	4610      	moveq	r0, r2
 80a31aa:	4619      	moveq	r1, r3
 80a31ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a31b0:	d019      	beq.n	80a31e6 <__aeabi_dmul+0x24a>
 80a31b2:	ea94 0f0c 	teq	r4, ip
 80a31b6:	d102      	bne.n	80a31be <__aeabi_dmul+0x222>
 80a31b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a31bc:	d113      	bne.n	80a31e6 <__aeabi_dmul+0x24a>
 80a31be:	ea95 0f0c 	teq	r5, ip
 80a31c2:	d105      	bne.n	80a31d0 <__aeabi_dmul+0x234>
 80a31c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a31c8:	bf1c      	itt	ne
 80a31ca:	4610      	movne	r0, r2
 80a31cc:	4619      	movne	r1, r3
 80a31ce:	d10a      	bne.n	80a31e6 <__aeabi_dmul+0x24a>
 80a31d0:	ea81 0103 	eor.w	r1, r1, r3
 80a31d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a31d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a31dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a31e0:	f04f 0000 	mov.w	r0, #0
 80a31e4:	bd70      	pop	{r4, r5, r6, pc}
 80a31e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a31ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a31ee:	bd70      	pop	{r4, r5, r6, pc}

080a31f0 <__aeabi_ddiv>:
 80a31f0:	b570      	push	{r4, r5, r6, lr}
 80a31f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a31f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a31fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a31fe:	bf1d      	ittte	ne
 80a3200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3204:	ea94 0f0c 	teqne	r4, ip
 80a3208:	ea95 0f0c 	teqne	r5, ip
 80a320c:	f000 f8a7 	bleq	80a335e <__aeabi_ddiv+0x16e>
 80a3210:	eba4 0405 	sub.w	r4, r4, r5
 80a3214:	ea81 0e03 	eor.w	lr, r1, r3
 80a3218:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a321c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3220:	f000 8088 	beq.w	80a3334 <__aeabi_ddiv+0x144>
 80a3224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3228:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a322c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3230:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3234:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3238:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a323c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3240:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3244:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3248:	429d      	cmp	r5, r3
 80a324a:	bf08      	it	eq
 80a324c:	4296      	cmpeq	r6, r2
 80a324e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3252:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3256:	d202      	bcs.n	80a325e <__aeabi_ddiv+0x6e>
 80a3258:	085b      	lsrs	r3, r3, #1
 80a325a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a325e:	1ab6      	subs	r6, r6, r2
 80a3260:	eb65 0503 	sbc.w	r5, r5, r3
 80a3264:	085b      	lsrs	r3, r3, #1
 80a3266:	ea4f 0232 	mov.w	r2, r2, rrx
 80a326a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a326e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3272:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3276:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a327a:	bf22      	ittt	cs
 80a327c:	1ab6      	subcs	r6, r6, r2
 80a327e:	4675      	movcs	r5, lr
 80a3280:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3284:	085b      	lsrs	r3, r3, #1
 80a3286:	ea4f 0232 	mov.w	r2, r2, rrx
 80a328a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a328e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3292:	bf22      	ittt	cs
 80a3294:	1ab6      	subcs	r6, r6, r2
 80a3296:	4675      	movcs	r5, lr
 80a3298:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a329c:	085b      	lsrs	r3, r3, #1
 80a329e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a32a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a32aa:	bf22      	ittt	cs
 80a32ac:	1ab6      	subcs	r6, r6, r2
 80a32ae:	4675      	movcs	r5, lr
 80a32b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a32b4:	085b      	lsrs	r3, r3, #1
 80a32b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80a32be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a32c2:	bf22      	ittt	cs
 80a32c4:	1ab6      	subcs	r6, r6, r2
 80a32c6:	4675      	movcs	r5, lr
 80a32c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a32cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80a32d0:	d018      	beq.n	80a3304 <__aeabi_ddiv+0x114>
 80a32d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a32d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a32da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a32de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a32e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a32e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a32ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a32ee:	d1c0      	bne.n	80a3272 <__aeabi_ddiv+0x82>
 80a32f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a32f4:	d10b      	bne.n	80a330e <__aeabi_ddiv+0x11e>
 80a32f6:	ea41 0100 	orr.w	r1, r1, r0
 80a32fa:	f04f 0000 	mov.w	r0, #0
 80a32fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3302:	e7b6      	b.n	80a3272 <__aeabi_ddiv+0x82>
 80a3304:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3308:	bf04      	itt	eq
 80a330a:	4301      	orreq	r1, r0
 80a330c:	2000      	moveq	r0, #0
 80a330e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3312:	bf88      	it	hi
 80a3314:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3318:	f63f aeaf 	bhi.w	80a307a <__aeabi_dmul+0xde>
 80a331c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3320:	bf04      	itt	eq
 80a3322:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a332a:	f150 0000 	adcs.w	r0, r0, #0
 80a332e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3332:	bd70      	pop	{r4, r5, r6, pc}
 80a3334:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3338:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a333c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3340:	bfc2      	ittt	gt
 80a3342:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3346:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a334a:	bd70      	popgt	{r4, r5, r6, pc}
 80a334c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3350:	f04f 0e00 	mov.w	lr, #0
 80a3354:	3c01      	subs	r4, #1
 80a3356:	e690      	b.n	80a307a <__aeabi_dmul+0xde>
 80a3358:	ea45 0e06 	orr.w	lr, r5, r6
 80a335c:	e68d      	b.n	80a307a <__aeabi_dmul+0xde>
 80a335e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3362:	ea94 0f0c 	teq	r4, ip
 80a3366:	bf08      	it	eq
 80a3368:	ea95 0f0c 	teqeq	r5, ip
 80a336c:	f43f af3b 	beq.w	80a31e6 <__aeabi_dmul+0x24a>
 80a3370:	ea94 0f0c 	teq	r4, ip
 80a3374:	d10a      	bne.n	80a338c <__aeabi_ddiv+0x19c>
 80a3376:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a337a:	f47f af34 	bne.w	80a31e6 <__aeabi_dmul+0x24a>
 80a337e:	ea95 0f0c 	teq	r5, ip
 80a3382:	f47f af25 	bne.w	80a31d0 <__aeabi_dmul+0x234>
 80a3386:	4610      	mov	r0, r2
 80a3388:	4619      	mov	r1, r3
 80a338a:	e72c      	b.n	80a31e6 <__aeabi_dmul+0x24a>
 80a338c:	ea95 0f0c 	teq	r5, ip
 80a3390:	d106      	bne.n	80a33a0 <__aeabi_ddiv+0x1b0>
 80a3392:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3396:	f43f aefd 	beq.w	80a3194 <__aeabi_dmul+0x1f8>
 80a339a:	4610      	mov	r0, r2
 80a339c:	4619      	mov	r1, r3
 80a339e:	e722      	b.n	80a31e6 <__aeabi_dmul+0x24a>
 80a33a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a33a4:	bf18      	it	ne
 80a33a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a33aa:	f47f aec5 	bne.w	80a3138 <__aeabi_dmul+0x19c>
 80a33ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a33b2:	f47f af0d 	bne.w	80a31d0 <__aeabi_dmul+0x234>
 80a33b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a33ba:	f47f aeeb 	bne.w	80a3194 <__aeabi_dmul+0x1f8>
 80a33be:	e712      	b.n	80a31e6 <__aeabi_dmul+0x24a>

080a33c0 <__aeabi_d2uiz>:
 80a33c0:	004a      	lsls	r2, r1, #1
 80a33c2:	d211      	bcs.n	80a33e8 <__aeabi_d2uiz+0x28>
 80a33c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a33c8:	d211      	bcs.n	80a33ee <__aeabi_d2uiz+0x2e>
 80a33ca:	d50d      	bpl.n	80a33e8 <__aeabi_d2uiz+0x28>
 80a33cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a33d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a33d4:	d40e      	bmi.n	80a33f4 <__aeabi_d2uiz+0x34>
 80a33d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a33da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a33de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a33e2:	fa23 f002 	lsr.w	r0, r3, r2
 80a33e6:	4770      	bx	lr
 80a33e8:	f04f 0000 	mov.w	r0, #0
 80a33ec:	4770      	bx	lr
 80a33ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a33f2:	d102      	bne.n	80a33fa <__aeabi_d2uiz+0x3a>
 80a33f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a33f8:	4770      	bx	lr
 80a33fa:	f04f 0000 	mov.w	r0, #0
 80a33fe:	4770      	bx	lr

080a3400 <__aeabi_frsub>:
 80a3400:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3404:	e002      	b.n	80a340c <__addsf3>
 80a3406:	bf00      	nop

080a3408 <__aeabi_fsub>:
 80a3408:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a340c <__addsf3>:
 80a340c:	0042      	lsls	r2, r0, #1
 80a340e:	bf1f      	itttt	ne
 80a3410:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3414:	ea92 0f03 	teqne	r2, r3
 80a3418:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a341c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3420:	d06a      	beq.n	80a34f8 <__addsf3+0xec>
 80a3422:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3426:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a342a:	bfc1      	itttt	gt
 80a342c:	18d2      	addgt	r2, r2, r3
 80a342e:	4041      	eorgt	r1, r0
 80a3430:	4048      	eorgt	r0, r1
 80a3432:	4041      	eorgt	r1, r0
 80a3434:	bfb8      	it	lt
 80a3436:	425b      	neglt	r3, r3
 80a3438:	2b19      	cmp	r3, #25
 80a343a:	bf88      	it	hi
 80a343c:	4770      	bxhi	lr
 80a343e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3442:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a344a:	bf18      	it	ne
 80a344c:	4240      	negne	r0, r0
 80a344e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3452:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3456:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a345a:	bf18      	it	ne
 80a345c:	4249      	negne	r1, r1
 80a345e:	ea92 0f03 	teq	r2, r3
 80a3462:	d03f      	beq.n	80a34e4 <__addsf3+0xd8>
 80a3464:	f1a2 0201 	sub.w	r2, r2, #1
 80a3468:	fa41 fc03 	asr.w	ip, r1, r3
 80a346c:	eb10 000c 	adds.w	r0, r0, ip
 80a3470:	f1c3 0320 	rsb	r3, r3, #32
 80a3474:	fa01 f103 	lsl.w	r1, r1, r3
 80a3478:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a347c:	d502      	bpl.n	80a3484 <__addsf3+0x78>
 80a347e:	4249      	negs	r1, r1
 80a3480:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3484:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3488:	d313      	bcc.n	80a34b2 <__addsf3+0xa6>
 80a348a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a348e:	d306      	bcc.n	80a349e <__addsf3+0x92>
 80a3490:	0840      	lsrs	r0, r0, #1
 80a3492:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3496:	f102 0201 	add.w	r2, r2, #1
 80a349a:	2afe      	cmp	r2, #254	; 0xfe
 80a349c:	d251      	bcs.n	80a3542 <__addsf3+0x136>
 80a349e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a34a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a34a6:	bf08      	it	eq
 80a34a8:	f020 0001 	biceq.w	r0, r0, #1
 80a34ac:	ea40 0003 	orr.w	r0, r0, r3
 80a34b0:	4770      	bx	lr
 80a34b2:	0049      	lsls	r1, r1, #1
 80a34b4:	eb40 0000 	adc.w	r0, r0, r0
 80a34b8:	3a01      	subs	r2, #1
 80a34ba:	bf28      	it	cs
 80a34bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a34c0:	d2ed      	bcs.n	80a349e <__addsf3+0x92>
 80a34c2:	fab0 fc80 	clz	ip, r0
 80a34c6:	f1ac 0c08 	sub.w	ip, ip, #8
 80a34ca:	ebb2 020c 	subs.w	r2, r2, ip
 80a34ce:	fa00 f00c 	lsl.w	r0, r0, ip
 80a34d2:	bfaa      	itet	ge
 80a34d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a34d8:	4252      	neglt	r2, r2
 80a34da:	4318      	orrge	r0, r3
 80a34dc:	bfbc      	itt	lt
 80a34de:	40d0      	lsrlt	r0, r2
 80a34e0:	4318      	orrlt	r0, r3
 80a34e2:	4770      	bx	lr
 80a34e4:	f092 0f00 	teq	r2, #0
 80a34e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a34ec:	bf06      	itte	eq
 80a34ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a34f2:	3201      	addeq	r2, #1
 80a34f4:	3b01      	subne	r3, #1
 80a34f6:	e7b5      	b.n	80a3464 <__addsf3+0x58>
 80a34f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a34fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3500:	bf18      	it	ne
 80a3502:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3506:	d021      	beq.n	80a354c <__addsf3+0x140>
 80a3508:	ea92 0f03 	teq	r2, r3
 80a350c:	d004      	beq.n	80a3518 <__addsf3+0x10c>
 80a350e:	f092 0f00 	teq	r2, #0
 80a3512:	bf08      	it	eq
 80a3514:	4608      	moveq	r0, r1
 80a3516:	4770      	bx	lr
 80a3518:	ea90 0f01 	teq	r0, r1
 80a351c:	bf1c      	itt	ne
 80a351e:	2000      	movne	r0, #0
 80a3520:	4770      	bxne	lr
 80a3522:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3526:	d104      	bne.n	80a3532 <__addsf3+0x126>
 80a3528:	0040      	lsls	r0, r0, #1
 80a352a:	bf28      	it	cs
 80a352c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3530:	4770      	bx	lr
 80a3532:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3536:	bf3c      	itt	cc
 80a3538:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a353c:	4770      	bxcc	lr
 80a353e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3542:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3546:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a354a:	4770      	bx	lr
 80a354c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3550:	bf16      	itet	ne
 80a3552:	4608      	movne	r0, r1
 80a3554:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3558:	4601      	movne	r1, r0
 80a355a:	0242      	lsls	r2, r0, #9
 80a355c:	bf06      	itte	eq
 80a355e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3562:	ea90 0f01 	teqeq	r0, r1
 80a3566:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a356a:	4770      	bx	lr

080a356c <__aeabi_ui2f>:
 80a356c:	f04f 0300 	mov.w	r3, #0
 80a3570:	e004      	b.n	80a357c <__aeabi_i2f+0x8>
 80a3572:	bf00      	nop

080a3574 <__aeabi_i2f>:
 80a3574:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3578:	bf48      	it	mi
 80a357a:	4240      	negmi	r0, r0
 80a357c:	ea5f 0c00 	movs.w	ip, r0
 80a3580:	bf08      	it	eq
 80a3582:	4770      	bxeq	lr
 80a3584:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3588:	4601      	mov	r1, r0
 80a358a:	f04f 0000 	mov.w	r0, #0
 80a358e:	e01c      	b.n	80a35ca <__aeabi_l2f+0x2a>

080a3590 <__aeabi_ul2f>:
 80a3590:	ea50 0201 	orrs.w	r2, r0, r1
 80a3594:	bf08      	it	eq
 80a3596:	4770      	bxeq	lr
 80a3598:	f04f 0300 	mov.w	r3, #0
 80a359c:	e00a      	b.n	80a35b4 <__aeabi_l2f+0x14>
 80a359e:	bf00      	nop

080a35a0 <__aeabi_l2f>:
 80a35a0:	ea50 0201 	orrs.w	r2, r0, r1
 80a35a4:	bf08      	it	eq
 80a35a6:	4770      	bxeq	lr
 80a35a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a35ac:	d502      	bpl.n	80a35b4 <__aeabi_l2f+0x14>
 80a35ae:	4240      	negs	r0, r0
 80a35b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a35b4:	ea5f 0c01 	movs.w	ip, r1
 80a35b8:	bf02      	ittt	eq
 80a35ba:	4684      	moveq	ip, r0
 80a35bc:	4601      	moveq	r1, r0
 80a35be:	2000      	moveq	r0, #0
 80a35c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a35c4:	bf08      	it	eq
 80a35c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a35ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a35ce:	fabc f28c 	clz	r2, ip
 80a35d2:	3a08      	subs	r2, #8
 80a35d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a35d8:	db10      	blt.n	80a35fc <__aeabi_l2f+0x5c>
 80a35da:	fa01 fc02 	lsl.w	ip, r1, r2
 80a35de:	4463      	add	r3, ip
 80a35e0:	fa00 fc02 	lsl.w	ip, r0, r2
 80a35e4:	f1c2 0220 	rsb	r2, r2, #32
 80a35e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a35ec:	fa20 f202 	lsr.w	r2, r0, r2
 80a35f0:	eb43 0002 	adc.w	r0, r3, r2
 80a35f4:	bf08      	it	eq
 80a35f6:	f020 0001 	biceq.w	r0, r0, #1
 80a35fa:	4770      	bx	lr
 80a35fc:	f102 0220 	add.w	r2, r2, #32
 80a3600:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3604:	f1c2 0220 	rsb	r2, r2, #32
 80a3608:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a360c:	fa21 f202 	lsr.w	r2, r1, r2
 80a3610:	eb43 0002 	adc.w	r0, r3, r2
 80a3614:	bf08      	it	eq
 80a3616:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a361a:	4770      	bx	lr

080a361c <__aeabi_fmul>:
 80a361c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3620:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3624:	bf1e      	ittt	ne
 80a3626:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a362a:	ea92 0f0c 	teqne	r2, ip
 80a362e:	ea93 0f0c 	teqne	r3, ip
 80a3632:	d06f      	beq.n	80a3714 <__aeabi_fmul+0xf8>
 80a3634:	441a      	add	r2, r3
 80a3636:	ea80 0c01 	eor.w	ip, r0, r1
 80a363a:	0240      	lsls	r0, r0, #9
 80a363c:	bf18      	it	ne
 80a363e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3642:	d01e      	beq.n	80a3682 <__aeabi_fmul+0x66>
 80a3644:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3648:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a364c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3650:	fba0 3101 	umull	r3, r1, r0, r1
 80a3654:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3658:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a365c:	bf3e      	ittt	cc
 80a365e:	0049      	lslcc	r1, r1, #1
 80a3660:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3664:	005b      	lslcc	r3, r3, #1
 80a3666:	ea40 0001 	orr.w	r0, r0, r1
 80a366a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a366e:	2afd      	cmp	r2, #253	; 0xfd
 80a3670:	d81d      	bhi.n	80a36ae <__aeabi_fmul+0x92>
 80a3672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3676:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a367a:	bf08      	it	eq
 80a367c:	f020 0001 	biceq.w	r0, r0, #1
 80a3680:	4770      	bx	lr
 80a3682:	f090 0f00 	teq	r0, #0
 80a3686:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a368a:	bf08      	it	eq
 80a368c:	0249      	lsleq	r1, r1, #9
 80a368e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3692:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3696:	3a7f      	subs	r2, #127	; 0x7f
 80a3698:	bfc2      	ittt	gt
 80a369a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a369e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a36a2:	4770      	bxgt	lr
 80a36a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a36a8:	f04f 0300 	mov.w	r3, #0
 80a36ac:	3a01      	subs	r2, #1
 80a36ae:	dc5d      	bgt.n	80a376c <__aeabi_fmul+0x150>
 80a36b0:	f112 0f19 	cmn.w	r2, #25
 80a36b4:	bfdc      	itt	le
 80a36b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a36ba:	4770      	bxle	lr
 80a36bc:	f1c2 0200 	rsb	r2, r2, #0
 80a36c0:	0041      	lsls	r1, r0, #1
 80a36c2:	fa21 f102 	lsr.w	r1, r1, r2
 80a36c6:	f1c2 0220 	rsb	r2, r2, #32
 80a36ca:	fa00 fc02 	lsl.w	ip, r0, r2
 80a36ce:	ea5f 0031 	movs.w	r0, r1, rrx
 80a36d2:	f140 0000 	adc.w	r0, r0, #0
 80a36d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a36da:	bf08      	it	eq
 80a36dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a36e0:	4770      	bx	lr
 80a36e2:	f092 0f00 	teq	r2, #0
 80a36e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a36ea:	bf02      	ittt	eq
 80a36ec:	0040      	lsleq	r0, r0, #1
 80a36ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a36f2:	3a01      	subeq	r2, #1
 80a36f4:	d0f9      	beq.n	80a36ea <__aeabi_fmul+0xce>
 80a36f6:	ea40 000c 	orr.w	r0, r0, ip
 80a36fa:	f093 0f00 	teq	r3, #0
 80a36fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3702:	bf02      	ittt	eq
 80a3704:	0049      	lsleq	r1, r1, #1
 80a3706:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a370a:	3b01      	subeq	r3, #1
 80a370c:	d0f9      	beq.n	80a3702 <__aeabi_fmul+0xe6>
 80a370e:	ea41 010c 	orr.w	r1, r1, ip
 80a3712:	e78f      	b.n	80a3634 <__aeabi_fmul+0x18>
 80a3714:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3718:	ea92 0f0c 	teq	r2, ip
 80a371c:	bf18      	it	ne
 80a371e:	ea93 0f0c 	teqne	r3, ip
 80a3722:	d00a      	beq.n	80a373a <__aeabi_fmul+0x11e>
 80a3724:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3728:	bf18      	it	ne
 80a372a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a372e:	d1d8      	bne.n	80a36e2 <__aeabi_fmul+0xc6>
 80a3730:	ea80 0001 	eor.w	r0, r0, r1
 80a3734:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3738:	4770      	bx	lr
 80a373a:	f090 0f00 	teq	r0, #0
 80a373e:	bf17      	itett	ne
 80a3740:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3744:	4608      	moveq	r0, r1
 80a3746:	f091 0f00 	teqne	r1, #0
 80a374a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a374e:	d014      	beq.n	80a377a <__aeabi_fmul+0x15e>
 80a3750:	ea92 0f0c 	teq	r2, ip
 80a3754:	d101      	bne.n	80a375a <__aeabi_fmul+0x13e>
 80a3756:	0242      	lsls	r2, r0, #9
 80a3758:	d10f      	bne.n	80a377a <__aeabi_fmul+0x15e>
 80a375a:	ea93 0f0c 	teq	r3, ip
 80a375e:	d103      	bne.n	80a3768 <__aeabi_fmul+0x14c>
 80a3760:	024b      	lsls	r3, r1, #9
 80a3762:	bf18      	it	ne
 80a3764:	4608      	movne	r0, r1
 80a3766:	d108      	bne.n	80a377a <__aeabi_fmul+0x15e>
 80a3768:	ea80 0001 	eor.w	r0, r0, r1
 80a376c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3770:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3774:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3778:	4770      	bx	lr
 80a377a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a377e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3782:	4770      	bx	lr

080a3784 <__aeabi_fdiv>:
 80a3784:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3788:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a378c:	bf1e      	ittt	ne
 80a378e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3792:	ea92 0f0c 	teqne	r2, ip
 80a3796:	ea93 0f0c 	teqne	r3, ip
 80a379a:	d069      	beq.n	80a3870 <__aeabi_fdiv+0xec>
 80a379c:	eba2 0203 	sub.w	r2, r2, r3
 80a37a0:	ea80 0c01 	eor.w	ip, r0, r1
 80a37a4:	0249      	lsls	r1, r1, #9
 80a37a6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a37aa:	d037      	beq.n	80a381c <__aeabi_fdiv+0x98>
 80a37ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a37b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a37b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a37b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a37bc:	428b      	cmp	r3, r1
 80a37be:	bf38      	it	cc
 80a37c0:	005b      	lslcc	r3, r3, #1
 80a37c2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a37c6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a37ca:	428b      	cmp	r3, r1
 80a37cc:	bf24      	itt	cs
 80a37ce:	1a5b      	subcs	r3, r3, r1
 80a37d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a37d4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a37d8:	bf24      	itt	cs
 80a37da:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a37de:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a37e2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a37e6:	bf24      	itt	cs
 80a37e8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a37ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a37f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a37f4:	bf24      	itt	cs
 80a37f6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a37fa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a37fe:	011b      	lsls	r3, r3, #4
 80a3800:	bf18      	it	ne
 80a3802:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3806:	d1e0      	bne.n	80a37ca <__aeabi_fdiv+0x46>
 80a3808:	2afd      	cmp	r2, #253	; 0xfd
 80a380a:	f63f af50 	bhi.w	80a36ae <__aeabi_fmul+0x92>
 80a380e:	428b      	cmp	r3, r1
 80a3810:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3814:	bf08      	it	eq
 80a3816:	f020 0001 	biceq.w	r0, r0, #1
 80a381a:	4770      	bx	lr
 80a381c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3820:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3824:	327f      	adds	r2, #127	; 0x7f
 80a3826:	bfc2      	ittt	gt
 80a3828:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a382c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3830:	4770      	bxgt	lr
 80a3832:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3836:	f04f 0300 	mov.w	r3, #0
 80a383a:	3a01      	subs	r2, #1
 80a383c:	e737      	b.n	80a36ae <__aeabi_fmul+0x92>
 80a383e:	f092 0f00 	teq	r2, #0
 80a3842:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3846:	bf02      	ittt	eq
 80a3848:	0040      	lsleq	r0, r0, #1
 80a384a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a384e:	3a01      	subeq	r2, #1
 80a3850:	d0f9      	beq.n	80a3846 <__aeabi_fdiv+0xc2>
 80a3852:	ea40 000c 	orr.w	r0, r0, ip
 80a3856:	f093 0f00 	teq	r3, #0
 80a385a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a385e:	bf02      	ittt	eq
 80a3860:	0049      	lsleq	r1, r1, #1
 80a3862:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3866:	3b01      	subeq	r3, #1
 80a3868:	d0f9      	beq.n	80a385e <__aeabi_fdiv+0xda>
 80a386a:	ea41 010c 	orr.w	r1, r1, ip
 80a386e:	e795      	b.n	80a379c <__aeabi_fdiv+0x18>
 80a3870:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3874:	ea92 0f0c 	teq	r2, ip
 80a3878:	d108      	bne.n	80a388c <__aeabi_fdiv+0x108>
 80a387a:	0242      	lsls	r2, r0, #9
 80a387c:	f47f af7d 	bne.w	80a377a <__aeabi_fmul+0x15e>
 80a3880:	ea93 0f0c 	teq	r3, ip
 80a3884:	f47f af70 	bne.w	80a3768 <__aeabi_fmul+0x14c>
 80a3888:	4608      	mov	r0, r1
 80a388a:	e776      	b.n	80a377a <__aeabi_fmul+0x15e>
 80a388c:	ea93 0f0c 	teq	r3, ip
 80a3890:	d104      	bne.n	80a389c <__aeabi_fdiv+0x118>
 80a3892:	024b      	lsls	r3, r1, #9
 80a3894:	f43f af4c 	beq.w	80a3730 <__aeabi_fmul+0x114>
 80a3898:	4608      	mov	r0, r1
 80a389a:	e76e      	b.n	80a377a <__aeabi_fmul+0x15e>
 80a389c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a38a0:	bf18      	it	ne
 80a38a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a38a6:	d1ca      	bne.n	80a383e <__aeabi_fdiv+0xba>
 80a38a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a38ac:	f47f af5c 	bne.w	80a3768 <__aeabi_fmul+0x14c>
 80a38b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a38b4:	f47f af3c 	bne.w	80a3730 <__aeabi_fmul+0x114>
 80a38b8:	e75f      	b.n	80a377a <__aeabi_fmul+0x15e>
 80a38ba:	bf00      	nop

080a38bc <__gesf2>:
 80a38bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a38c0:	e006      	b.n	80a38d0 <__cmpsf2+0x4>
 80a38c2:	bf00      	nop

080a38c4 <__lesf2>:
 80a38c4:	f04f 0c01 	mov.w	ip, #1
 80a38c8:	e002      	b.n	80a38d0 <__cmpsf2+0x4>
 80a38ca:	bf00      	nop

080a38cc <__cmpsf2>:
 80a38cc:	f04f 0c01 	mov.w	ip, #1
 80a38d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a38d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a38d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a38dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a38e0:	bf18      	it	ne
 80a38e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a38e6:	d011      	beq.n	80a390c <__cmpsf2+0x40>
 80a38e8:	b001      	add	sp, #4
 80a38ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a38ee:	bf18      	it	ne
 80a38f0:	ea90 0f01 	teqne	r0, r1
 80a38f4:	bf58      	it	pl
 80a38f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80a38fa:	bf88      	it	hi
 80a38fc:	17c8      	asrhi	r0, r1, #31
 80a38fe:	bf38      	it	cc
 80a3900:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3904:	bf18      	it	ne
 80a3906:	f040 0001 	orrne.w	r0, r0, #1
 80a390a:	4770      	bx	lr
 80a390c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3910:	d102      	bne.n	80a3918 <__cmpsf2+0x4c>
 80a3912:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3916:	d105      	bne.n	80a3924 <__cmpsf2+0x58>
 80a3918:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a391c:	d1e4      	bne.n	80a38e8 <__cmpsf2+0x1c>
 80a391e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a3922:	d0e1      	beq.n	80a38e8 <__cmpsf2+0x1c>
 80a3924:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3928:	4770      	bx	lr
 80a392a:	bf00      	nop

080a392c <__aeabi_cfrcmple>:
 80a392c:	4684      	mov	ip, r0
 80a392e:	4608      	mov	r0, r1
 80a3930:	4661      	mov	r1, ip
 80a3932:	e7ff      	b.n	80a3934 <__aeabi_cfcmpeq>

080a3934 <__aeabi_cfcmpeq>:
 80a3934:	b50f      	push	{r0, r1, r2, r3, lr}
 80a3936:	f7ff ffc9 	bl	80a38cc <__cmpsf2>
 80a393a:	2800      	cmp	r0, #0
 80a393c:	bf48      	it	mi
 80a393e:	f110 0f00 	cmnmi.w	r0, #0
 80a3942:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3944 <__aeabi_fcmpeq>:
 80a3944:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3948:	f7ff fff4 	bl	80a3934 <__aeabi_cfcmpeq>
 80a394c:	bf0c      	ite	eq
 80a394e:	2001      	moveq	r0, #1
 80a3950:	2000      	movne	r0, #0
 80a3952:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3956:	bf00      	nop

080a3958 <__aeabi_fcmplt>:
 80a3958:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a395c:	f7ff ffea 	bl	80a3934 <__aeabi_cfcmpeq>
 80a3960:	bf34      	ite	cc
 80a3962:	2001      	movcc	r0, #1
 80a3964:	2000      	movcs	r0, #0
 80a3966:	f85d fb08 	ldr.w	pc, [sp], #8
 80a396a:	bf00      	nop

080a396c <__aeabi_fcmple>:
 80a396c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3970:	f7ff ffe0 	bl	80a3934 <__aeabi_cfcmpeq>
 80a3974:	bf94      	ite	ls
 80a3976:	2001      	movls	r0, #1
 80a3978:	2000      	movhi	r0, #0
 80a397a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a397e:	bf00      	nop

080a3980 <__aeabi_fcmpge>:
 80a3980:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3984:	f7ff ffd2 	bl	80a392c <__aeabi_cfrcmple>
 80a3988:	bf94      	ite	ls
 80a398a:	2001      	movls	r0, #1
 80a398c:	2000      	movhi	r0, #0
 80a398e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3992:	bf00      	nop

080a3994 <__aeabi_fcmpgt>:
 80a3994:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3998:	f7ff ffc8 	bl	80a392c <__aeabi_cfrcmple>
 80a399c:	bf34      	ite	cc
 80a399e:	2001      	movcc	r0, #1
 80a39a0:	2000      	movcs	r0, #0
 80a39a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a39a6:	bf00      	nop

080a39a8 <__aeabi_f2lz>:
 80a39a8:	b510      	push	{r4, lr}
 80a39aa:	2100      	movs	r1, #0
 80a39ac:	4604      	mov	r4, r0
 80a39ae:	f7ff ffd3 	bl	80a3958 <__aeabi_fcmplt>
 80a39b2:	b920      	cbnz	r0, 80a39be <__aeabi_f2lz+0x16>
 80a39b4:	4620      	mov	r0, r4
 80a39b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a39ba:	f000 b809 	b.w	80a39d0 <__aeabi_f2ulz>
 80a39be:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a39c2:	f000 f805 	bl	80a39d0 <__aeabi_f2ulz>
 80a39c6:	4240      	negs	r0, r0
 80a39c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a39cc:	bd10      	pop	{r4, pc}
 80a39ce:	bf00      	nop

080a39d0 <__aeabi_f2ulz>:
 80a39d0:	b5d0      	push	{r4, r6, r7, lr}
 80a39d2:	f7ff fa8b 	bl	80a2eec <__aeabi_f2d>
 80a39d6:	2200      	movs	r2, #0
 80a39d8:	4b0b      	ldr	r3, [pc, #44]	; (80a3a08 <__aeabi_f2ulz+0x38>)
 80a39da:	4606      	mov	r6, r0
 80a39dc:	460f      	mov	r7, r1
 80a39de:	f7ff fadd 	bl	80a2f9c <__aeabi_dmul>
 80a39e2:	f7ff fced 	bl	80a33c0 <__aeabi_d2uiz>
 80a39e6:	4604      	mov	r4, r0
 80a39e8:	f7ff fa5e 	bl	80a2ea8 <__aeabi_ui2d>
 80a39ec:	2200      	movs	r2, #0
 80a39ee:	4b07      	ldr	r3, [pc, #28]	; (80a3a0c <__aeabi_f2ulz+0x3c>)
 80a39f0:	f7ff fad4 	bl	80a2f9c <__aeabi_dmul>
 80a39f4:	4602      	mov	r2, r0
 80a39f6:	460b      	mov	r3, r1
 80a39f8:	4630      	mov	r0, r6
 80a39fa:	4639      	mov	r1, r7
 80a39fc:	f7ff f916 	bl	80a2c2c <__aeabi_dsub>
 80a3a00:	f7ff fcde 	bl	80a33c0 <__aeabi_d2uiz>
 80a3a04:	4621      	mov	r1, r4
 80a3a06:	bdd0      	pop	{r4, r6, r7, pc}
 80a3a08:	3df00000 	.word	0x3df00000
 80a3a0c:	41f00000 	.word	0x41f00000

080a3a10 <__udivmoddi4>:
 80a3a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3a14:	9e08      	ldr	r6, [sp, #32]
 80a3a16:	460d      	mov	r5, r1
 80a3a18:	4604      	mov	r4, r0
 80a3a1a:	468e      	mov	lr, r1
 80a3a1c:	2b00      	cmp	r3, #0
 80a3a1e:	f040 8083 	bne.w	80a3b28 <__udivmoddi4+0x118>
 80a3a22:	428a      	cmp	r2, r1
 80a3a24:	4617      	mov	r7, r2
 80a3a26:	d947      	bls.n	80a3ab8 <__udivmoddi4+0xa8>
 80a3a28:	fab2 f382 	clz	r3, r2
 80a3a2c:	b14b      	cbz	r3, 80a3a42 <__udivmoddi4+0x32>
 80a3a2e:	f1c3 0120 	rsb	r1, r3, #32
 80a3a32:	fa05 fe03 	lsl.w	lr, r5, r3
 80a3a36:	fa20 f101 	lsr.w	r1, r0, r1
 80a3a3a:	409f      	lsls	r7, r3
 80a3a3c:	ea41 0e0e 	orr.w	lr, r1, lr
 80a3a40:	409c      	lsls	r4, r3
 80a3a42:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3a46:	fbbe fcf8 	udiv	ip, lr, r8
 80a3a4a:	fa1f f987 	uxth.w	r9, r7
 80a3a4e:	fb08 e21c 	mls	r2, r8, ip, lr
 80a3a52:	fb0c f009 	mul.w	r0, ip, r9
 80a3a56:	0c21      	lsrs	r1, r4, #16
 80a3a58:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a3a5c:	4290      	cmp	r0, r2
 80a3a5e:	d90a      	bls.n	80a3a76 <__udivmoddi4+0x66>
 80a3a60:	18ba      	adds	r2, r7, r2
 80a3a62:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a3a66:	f080 8118 	bcs.w	80a3c9a <__udivmoddi4+0x28a>
 80a3a6a:	4290      	cmp	r0, r2
 80a3a6c:	f240 8115 	bls.w	80a3c9a <__udivmoddi4+0x28a>
 80a3a70:	f1ac 0c02 	sub.w	ip, ip, #2
 80a3a74:	443a      	add	r2, r7
 80a3a76:	1a12      	subs	r2, r2, r0
 80a3a78:	fbb2 f0f8 	udiv	r0, r2, r8
 80a3a7c:	fb08 2210 	mls	r2, r8, r0, r2
 80a3a80:	fb00 f109 	mul.w	r1, r0, r9
 80a3a84:	b2a4      	uxth	r4, r4
 80a3a86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a3a8a:	42a1      	cmp	r1, r4
 80a3a8c:	d909      	bls.n	80a3aa2 <__udivmoddi4+0x92>
 80a3a8e:	193c      	adds	r4, r7, r4
 80a3a90:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a3a94:	f080 8103 	bcs.w	80a3c9e <__udivmoddi4+0x28e>
 80a3a98:	42a1      	cmp	r1, r4
 80a3a9a:	f240 8100 	bls.w	80a3c9e <__udivmoddi4+0x28e>
 80a3a9e:	3802      	subs	r0, #2
 80a3aa0:	443c      	add	r4, r7
 80a3aa2:	1a64      	subs	r4, r4, r1
 80a3aa4:	2100      	movs	r1, #0
 80a3aa6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a3aaa:	b11e      	cbz	r6, 80a3ab4 <__udivmoddi4+0xa4>
 80a3aac:	2200      	movs	r2, #0
 80a3aae:	40dc      	lsrs	r4, r3
 80a3ab0:	e9c6 4200 	strd	r4, r2, [r6]
 80a3ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3ab8:	b902      	cbnz	r2, 80a3abc <__udivmoddi4+0xac>
 80a3aba:	deff      	udf	#255	; 0xff
 80a3abc:	fab2 f382 	clz	r3, r2
 80a3ac0:	2b00      	cmp	r3, #0
 80a3ac2:	d14f      	bne.n	80a3b64 <__udivmoddi4+0x154>
 80a3ac4:	1a8d      	subs	r5, r1, r2
 80a3ac6:	2101      	movs	r1, #1
 80a3ac8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a3acc:	fa1f f882 	uxth.w	r8, r2
 80a3ad0:	fbb5 fcfe 	udiv	ip, r5, lr
 80a3ad4:	fb0e 551c 	mls	r5, lr, ip, r5
 80a3ad8:	fb08 f00c 	mul.w	r0, r8, ip
 80a3adc:	0c22      	lsrs	r2, r4, #16
 80a3ade:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a3ae2:	42a8      	cmp	r0, r5
 80a3ae4:	d907      	bls.n	80a3af6 <__udivmoddi4+0xe6>
 80a3ae6:	197d      	adds	r5, r7, r5
 80a3ae8:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80a3aec:	d202      	bcs.n	80a3af4 <__udivmoddi4+0xe4>
 80a3aee:	42a8      	cmp	r0, r5
 80a3af0:	f200 80e9 	bhi.w	80a3cc6 <__udivmoddi4+0x2b6>
 80a3af4:	4694      	mov	ip, r2
 80a3af6:	1a2d      	subs	r5, r5, r0
 80a3af8:	fbb5 f0fe 	udiv	r0, r5, lr
 80a3afc:	fb0e 5510 	mls	r5, lr, r0, r5
 80a3b00:	fb08 f800 	mul.w	r8, r8, r0
 80a3b04:	b2a4      	uxth	r4, r4
 80a3b06:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a3b0a:	45a0      	cmp	r8, r4
 80a3b0c:	d907      	bls.n	80a3b1e <__udivmoddi4+0x10e>
 80a3b0e:	193c      	adds	r4, r7, r4
 80a3b10:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a3b14:	d202      	bcs.n	80a3b1c <__udivmoddi4+0x10c>
 80a3b16:	45a0      	cmp	r8, r4
 80a3b18:	f200 80d9 	bhi.w	80a3cce <__udivmoddi4+0x2be>
 80a3b1c:	4610      	mov	r0, r2
 80a3b1e:	eba4 0408 	sub.w	r4, r4, r8
 80a3b22:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a3b26:	e7c0      	b.n	80a3aaa <__udivmoddi4+0x9a>
 80a3b28:	428b      	cmp	r3, r1
 80a3b2a:	d908      	bls.n	80a3b3e <__udivmoddi4+0x12e>
 80a3b2c:	2e00      	cmp	r6, #0
 80a3b2e:	f000 80b1 	beq.w	80a3c94 <__udivmoddi4+0x284>
 80a3b32:	2100      	movs	r1, #0
 80a3b34:	e9c6 0500 	strd	r0, r5, [r6]
 80a3b38:	4608      	mov	r0, r1
 80a3b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3b3e:	fab3 f183 	clz	r1, r3
 80a3b42:	2900      	cmp	r1, #0
 80a3b44:	d14b      	bne.n	80a3bde <__udivmoddi4+0x1ce>
 80a3b46:	42ab      	cmp	r3, r5
 80a3b48:	d302      	bcc.n	80a3b50 <__udivmoddi4+0x140>
 80a3b4a:	4282      	cmp	r2, r0
 80a3b4c:	f200 80b9 	bhi.w	80a3cc2 <__udivmoddi4+0x2b2>
 80a3b50:	1a84      	subs	r4, r0, r2
 80a3b52:	eb65 0303 	sbc.w	r3, r5, r3
 80a3b56:	2001      	movs	r0, #1
 80a3b58:	469e      	mov	lr, r3
 80a3b5a:	2e00      	cmp	r6, #0
 80a3b5c:	d0aa      	beq.n	80a3ab4 <__udivmoddi4+0xa4>
 80a3b5e:	e9c6 4e00 	strd	r4, lr, [r6]
 80a3b62:	e7a7      	b.n	80a3ab4 <__udivmoddi4+0xa4>
 80a3b64:	409f      	lsls	r7, r3
 80a3b66:	f1c3 0220 	rsb	r2, r3, #32
 80a3b6a:	40d1      	lsrs	r1, r2
 80a3b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a3b70:	fbb1 f0fe 	udiv	r0, r1, lr
 80a3b74:	fa1f f887 	uxth.w	r8, r7
 80a3b78:	fb0e 1110 	mls	r1, lr, r0, r1
 80a3b7c:	fa24 f202 	lsr.w	r2, r4, r2
 80a3b80:	409d      	lsls	r5, r3
 80a3b82:	fb00 fc08 	mul.w	ip, r0, r8
 80a3b86:	432a      	orrs	r2, r5
 80a3b88:	0c15      	lsrs	r5, r2, #16
 80a3b8a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a3b8e:	45ac      	cmp	ip, r5
 80a3b90:	fa04 f403 	lsl.w	r4, r4, r3
 80a3b94:	d909      	bls.n	80a3baa <__udivmoddi4+0x19a>
 80a3b96:	197d      	adds	r5, r7, r5
 80a3b98:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80a3b9c:	f080 808f 	bcs.w	80a3cbe <__udivmoddi4+0x2ae>
 80a3ba0:	45ac      	cmp	ip, r5
 80a3ba2:	f240 808c 	bls.w	80a3cbe <__udivmoddi4+0x2ae>
 80a3ba6:	3802      	subs	r0, #2
 80a3ba8:	443d      	add	r5, r7
 80a3baa:	eba5 050c 	sub.w	r5, r5, ip
 80a3bae:	fbb5 f1fe 	udiv	r1, r5, lr
 80a3bb2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a3bb6:	fb01 f908 	mul.w	r9, r1, r8
 80a3bba:	b295      	uxth	r5, r2
 80a3bbc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a3bc0:	45a9      	cmp	r9, r5
 80a3bc2:	d907      	bls.n	80a3bd4 <__udivmoddi4+0x1c4>
 80a3bc4:	197d      	adds	r5, r7, r5
 80a3bc6:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80a3bca:	d274      	bcs.n	80a3cb6 <__udivmoddi4+0x2a6>
 80a3bcc:	45a9      	cmp	r9, r5
 80a3bce:	d972      	bls.n	80a3cb6 <__udivmoddi4+0x2a6>
 80a3bd0:	3902      	subs	r1, #2
 80a3bd2:	443d      	add	r5, r7
 80a3bd4:	eba5 0509 	sub.w	r5, r5, r9
 80a3bd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a3bdc:	e778      	b.n	80a3ad0 <__udivmoddi4+0xc0>
 80a3bde:	f1c1 0720 	rsb	r7, r1, #32
 80a3be2:	408b      	lsls	r3, r1
 80a3be4:	fa22 fc07 	lsr.w	ip, r2, r7
 80a3be8:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3bec:	fa25 f407 	lsr.w	r4, r5, r7
 80a3bf0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a3bf4:	fbb4 f9fe 	udiv	r9, r4, lr
 80a3bf8:	fa1f f88c 	uxth.w	r8, ip
 80a3bfc:	fb0e 4419 	mls	r4, lr, r9, r4
 80a3c00:	fa20 f307 	lsr.w	r3, r0, r7
 80a3c04:	fb09 fa08 	mul.w	sl, r9, r8
 80a3c08:	408d      	lsls	r5, r1
 80a3c0a:	431d      	orrs	r5, r3
 80a3c0c:	0c2b      	lsrs	r3, r5, #16
 80a3c0e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a3c12:	45a2      	cmp	sl, r4
 80a3c14:	fa02 f201 	lsl.w	r2, r2, r1
 80a3c18:	fa00 f301 	lsl.w	r3, r0, r1
 80a3c1c:	d909      	bls.n	80a3c32 <__udivmoddi4+0x222>
 80a3c1e:	eb1c 0404 	adds.w	r4, ip, r4
 80a3c22:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80a3c26:	d248      	bcs.n	80a3cba <__udivmoddi4+0x2aa>
 80a3c28:	45a2      	cmp	sl, r4
 80a3c2a:	d946      	bls.n	80a3cba <__udivmoddi4+0x2aa>
 80a3c2c:	f1a9 0902 	sub.w	r9, r9, #2
 80a3c30:	4464      	add	r4, ip
 80a3c32:	eba4 040a 	sub.w	r4, r4, sl
 80a3c36:	fbb4 f0fe 	udiv	r0, r4, lr
 80a3c3a:	fb0e 4410 	mls	r4, lr, r0, r4
 80a3c3e:	fb00 fa08 	mul.w	sl, r0, r8
 80a3c42:	b2ad      	uxth	r5, r5
 80a3c44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a3c48:	45a2      	cmp	sl, r4
 80a3c4a:	d908      	bls.n	80a3c5e <__udivmoddi4+0x24e>
 80a3c4c:	eb1c 0404 	adds.w	r4, ip, r4
 80a3c50:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80a3c54:	d22d      	bcs.n	80a3cb2 <__udivmoddi4+0x2a2>
 80a3c56:	45a2      	cmp	sl, r4
 80a3c58:	d92b      	bls.n	80a3cb2 <__udivmoddi4+0x2a2>
 80a3c5a:	3802      	subs	r0, #2
 80a3c5c:	4464      	add	r4, ip
 80a3c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a3c62:	fba0 8902 	umull	r8, r9, r0, r2
 80a3c66:	eba4 040a 	sub.w	r4, r4, sl
 80a3c6a:	454c      	cmp	r4, r9
 80a3c6c:	46c6      	mov	lr, r8
 80a3c6e:	464d      	mov	r5, r9
 80a3c70:	d319      	bcc.n	80a3ca6 <__udivmoddi4+0x296>
 80a3c72:	d016      	beq.n	80a3ca2 <__udivmoddi4+0x292>
 80a3c74:	b15e      	cbz	r6, 80a3c8e <__udivmoddi4+0x27e>
 80a3c76:	ebb3 020e 	subs.w	r2, r3, lr
 80a3c7a:	eb64 0405 	sbc.w	r4, r4, r5
 80a3c7e:	fa04 f707 	lsl.w	r7, r4, r7
 80a3c82:	fa22 f301 	lsr.w	r3, r2, r1
 80a3c86:	431f      	orrs	r7, r3
 80a3c88:	40cc      	lsrs	r4, r1
 80a3c8a:	e9c6 7400 	strd	r7, r4, [r6]
 80a3c8e:	2100      	movs	r1, #0
 80a3c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3c94:	4631      	mov	r1, r6
 80a3c96:	4630      	mov	r0, r6
 80a3c98:	e70c      	b.n	80a3ab4 <__udivmoddi4+0xa4>
 80a3c9a:	468c      	mov	ip, r1
 80a3c9c:	e6eb      	b.n	80a3a76 <__udivmoddi4+0x66>
 80a3c9e:	4610      	mov	r0, r2
 80a3ca0:	e6ff      	b.n	80a3aa2 <__udivmoddi4+0x92>
 80a3ca2:	4543      	cmp	r3, r8
 80a3ca4:	d2e6      	bcs.n	80a3c74 <__udivmoddi4+0x264>
 80a3ca6:	ebb8 0e02 	subs.w	lr, r8, r2
 80a3caa:	eb69 050c 	sbc.w	r5, r9, ip
 80a3cae:	3801      	subs	r0, #1
 80a3cb0:	e7e0      	b.n	80a3c74 <__udivmoddi4+0x264>
 80a3cb2:	4628      	mov	r0, r5
 80a3cb4:	e7d3      	b.n	80a3c5e <__udivmoddi4+0x24e>
 80a3cb6:	4611      	mov	r1, r2
 80a3cb8:	e78c      	b.n	80a3bd4 <__udivmoddi4+0x1c4>
 80a3cba:	4681      	mov	r9, r0
 80a3cbc:	e7b9      	b.n	80a3c32 <__udivmoddi4+0x222>
 80a3cbe:	4608      	mov	r0, r1
 80a3cc0:	e773      	b.n	80a3baa <__udivmoddi4+0x19a>
 80a3cc2:	4608      	mov	r0, r1
 80a3cc4:	e749      	b.n	80a3b5a <__udivmoddi4+0x14a>
 80a3cc6:	f1ac 0c02 	sub.w	ip, ip, #2
 80a3cca:	443d      	add	r5, r7
 80a3ccc:	e713      	b.n	80a3af6 <__udivmoddi4+0xe6>
 80a3cce:	3802      	subs	r0, #2
 80a3cd0:	443c      	add	r4, r7
 80a3cd2:	e724      	b.n	80a3b1e <__udivmoddi4+0x10e>

080a3cd4 <__aeabi_idiv0>:
 80a3cd4:	4770      	bx	lr
 80a3cd6:	bf00      	nop

080a3cd8 <asctime_r>:
 80a3cd8:	b510      	push	{r4, lr}
 80a3cda:	460c      	mov	r4, r1
 80a3cdc:	6941      	ldr	r1, [r0, #20]
 80a3cde:	b086      	sub	sp, #24
 80a3ce0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a3ce4:	6903      	ldr	r3, [r0, #16]
 80a3ce6:	6982      	ldr	r2, [r0, #24]
 80a3ce8:	9104      	str	r1, [sp, #16]
 80a3cea:	6801      	ldr	r1, [r0, #0]
 80a3cec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a3cf0:	9103      	str	r1, [sp, #12]
 80a3cf2:	6841      	ldr	r1, [r0, #4]
 80a3cf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a3cf8:	9102      	str	r1, [sp, #8]
 80a3cfa:	6881      	ldr	r1, [r0, #8]
 80a3cfc:	9101      	str	r1, [sp, #4]
 80a3cfe:	68c1      	ldr	r1, [r0, #12]
 80a3d00:	4620      	mov	r0, r4
 80a3d02:	9100      	str	r1, [sp, #0]
 80a3d04:	4904      	ldr	r1, [pc, #16]	; (80a3d18 <asctime_r+0x40>)
 80a3d06:	440b      	add	r3, r1
 80a3d08:	4904      	ldr	r1, [pc, #16]	; (80a3d1c <asctime_r+0x44>)
 80a3d0a:	440a      	add	r2, r1
 80a3d0c:	4904      	ldr	r1, [pc, #16]	; (80a3d20 <asctime_r+0x48>)
 80a3d0e:	f7fd fc97 	bl	80a1640 <siprintf>
 80a3d12:	4620      	mov	r0, r4
 80a3d14:	b006      	add	sp, #24
 80a3d16:	bd10      	pop	{r4, pc}
 80a3d18:	080a4ec2 	.word	0x080a4ec2
 80a3d1c:	080a4ead 	.word	0x080a4ead
 80a3d20:	080a4e8d 	.word	0x080a4e8d

080a3d24 <__cxa_atexit>:
 80a3d24:	b510      	push	{r4, lr}
 80a3d26:	4604      	mov	r4, r0
 80a3d28:	4804      	ldr	r0, [pc, #16]	; (80a3d3c <__cxa_atexit+0x18>)
 80a3d2a:	4613      	mov	r3, r2
 80a3d2c:	b120      	cbz	r0, 80a3d38 <__cxa_atexit+0x14>
 80a3d2e:	460a      	mov	r2, r1
 80a3d30:	2002      	movs	r0, #2
 80a3d32:	4621      	mov	r1, r4
 80a3d34:	f3af 8000 	nop.w
 80a3d38:	bd10      	pop	{r4, pc}
 80a3d3a:	bf00      	nop
 80a3d3c:	00000000 	.word	0x00000000

080a3d40 <localtime_r>:
 80a3d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3d44:	460c      	mov	r4, r1
 80a3d46:	4607      	mov	r7, r0
 80a3d48:	f000 fd0a 	bl	80a4760 <__gettzinfo>
 80a3d4c:	4621      	mov	r1, r4
 80a3d4e:	4680      	mov	r8, r0
 80a3d50:	4638      	mov	r0, r7
 80a3d52:	f000 fd09 	bl	80a4768 <gmtime_r>
 80a3d56:	6943      	ldr	r3, [r0, #20]
 80a3d58:	4604      	mov	r4, r0
 80a3d5a:	079a      	lsls	r2, r3, #30
 80a3d5c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a3d60:	d105      	bne.n	80a3d6e <localtime_r+0x2e>
 80a3d62:	2264      	movs	r2, #100	; 0x64
 80a3d64:	fb96 f3f2 	sdiv	r3, r6, r2
 80a3d68:	fb02 6313 	mls	r3, r2, r3, r6
 80a3d6c:	bb7b      	cbnz	r3, 80a3dce <localtime_r+0x8e>
 80a3d6e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a3d72:	fb96 f5f3 	sdiv	r5, r6, r3
 80a3d76:	fb03 6515 	mls	r5, r3, r5, r6
 80a3d7a:	fab5 f585 	clz	r5, r5
 80a3d7e:	096d      	lsrs	r5, r5, #5
 80a3d80:	2230      	movs	r2, #48	; 0x30
 80a3d82:	4b68      	ldr	r3, [pc, #416]	; (80a3f24 <localtime_r+0x1e4>)
 80a3d84:	fb02 3505 	mla	r5, r2, r5, r3
 80a3d88:	f000 fb16 	bl	80a43b8 <__tz_lock>
 80a3d8c:	f000 fb20 	bl	80a43d0 <_tzset_unlocked>
 80a3d90:	4b65      	ldr	r3, [pc, #404]	; (80a3f28 <localtime_r+0x1e8>)
 80a3d92:	681b      	ldr	r3, [r3, #0]
 80a3d94:	b353      	cbz	r3, 80a3dec <localtime_r+0xac>
 80a3d96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a3d9a:	42b3      	cmp	r3, r6
 80a3d9c:	d119      	bne.n	80a3dd2 <localtime_r+0x92>
 80a3d9e:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a3da2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a3da6:	f8d8 1000 	ldr.w	r1, [r8]
 80a3daa:	b9d1      	cbnz	r1, 80a3de2 <localtime_r+0xa2>
 80a3dac:	4296      	cmp	r6, r2
 80a3dae:	eb77 0303 	sbcs.w	r3, r7, r3
 80a3db2:	da23      	bge.n	80a3dfc <localtime_r+0xbc>
 80a3db4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a3db8:	4296      	cmp	r6, r2
 80a3dba:	eb77 0303 	sbcs.w	r3, r7, r3
 80a3dbe:	bfb4      	ite	lt
 80a3dc0:	2301      	movlt	r3, #1
 80a3dc2:	2300      	movge	r3, #0
 80a3dc4:	6223      	str	r3, [r4, #32]
 80a3dc6:	db1b      	blt.n	80a3e00 <localtime_r+0xc0>
 80a3dc8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a3dcc:	e01a      	b.n	80a3e04 <localtime_r+0xc4>
 80a3dce:	2501      	movs	r5, #1
 80a3dd0:	e7d6      	b.n	80a3d80 <localtime_r+0x40>
 80a3dd2:	4630      	mov	r0, r6
 80a3dd4:	f000 fa48 	bl	80a4268 <__tzcalc_limits>
 80a3dd8:	2800      	cmp	r0, #0
 80a3dda:	d1e0      	bne.n	80a3d9e <localtime_r+0x5e>
 80a3ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a3de0:	e004      	b.n	80a3dec <localtime_r+0xac>
 80a3de2:	4296      	cmp	r6, r2
 80a3de4:	eb77 0303 	sbcs.w	r3, r7, r3
 80a3de8:	da02      	bge.n	80a3df0 <localtime_r+0xb0>
 80a3dea:	2300      	movs	r3, #0
 80a3dec:	6223      	str	r3, [r4, #32]
 80a3dee:	e7eb      	b.n	80a3dc8 <localtime_r+0x88>
 80a3df0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a3df4:	4296      	cmp	r6, r2
 80a3df6:	eb77 0303 	sbcs.w	r3, r7, r3
 80a3dfa:	daf6      	bge.n	80a3dea <localtime_r+0xaa>
 80a3dfc:	2301      	movs	r3, #1
 80a3dfe:	6223      	str	r3, [r4, #32]
 80a3e00:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a3e04:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a3e08:	fb91 f6f3 	sdiv	r6, r1, r3
 80a3e0c:	203c      	movs	r0, #60	; 0x3c
 80a3e0e:	fb03 1316 	mls	r3, r3, r6, r1
 80a3e12:	fb93 f2f0 	sdiv	r2, r3, r0
 80a3e16:	fb00 3012 	mls	r0, r0, r2, r3
 80a3e1a:	6861      	ldr	r1, [r4, #4]
 80a3e1c:	6823      	ldr	r3, [r4, #0]
 80a3e1e:	1a89      	subs	r1, r1, r2
 80a3e20:	68a2      	ldr	r2, [r4, #8]
 80a3e22:	1a1b      	subs	r3, r3, r0
 80a3e24:	1b92      	subs	r2, r2, r6
 80a3e26:	2b3b      	cmp	r3, #59	; 0x3b
 80a3e28:	6023      	str	r3, [r4, #0]
 80a3e2a:	6061      	str	r1, [r4, #4]
 80a3e2c:	60a2      	str	r2, [r4, #8]
 80a3e2e:	dd34      	ble.n	80a3e9a <localtime_r+0x15a>
 80a3e30:	3101      	adds	r1, #1
 80a3e32:	6061      	str	r1, [r4, #4]
 80a3e34:	3b3c      	subs	r3, #60	; 0x3c
 80a3e36:	6023      	str	r3, [r4, #0]
 80a3e38:	6863      	ldr	r3, [r4, #4]
 80a3e3a:	2b3b      	cmp	r3, #59	; 0x3b
 80a3e3c:	dd33      	ble.n	80a3ea6 <localtime_r+0x166>
 80a3e3e:	3201      	adds	r2, #1
 80a3e40:	60a2      	str	r2, [r4, #8]
 80a3e42:	3b3c      	subs	r3, #60	; 0x3c
 80a3e44:	6063      	str	r3, [r4, #4]
 80a3e46:	68a3      	ldr	r3, [r4, #8]
 80a3e48:	2b17      	cmp	r3, #23
 80a3e4a:	dd32      	ble.n	80a3eb2 <localtime_r+0x172>
 80a3e4c:	69e2      	ldr	r2, [r4, #28]
 80a3e4e:	3b18      	subs	r3, #24
 80a3e50:	3201      	adds	r2, #1
 80a3e52:	61e2      	str	r2, [r4, #28]
 80a3e54:	69a2      	ldr	r2, [r4, #24]
 80a3e56:	60a3      	str	r3, [r4, #8]
 80a3e58:	3201      	adds	r2, #1
 80a3e5a:	2a06      	cmp	r2, #6
 80a3e5c:	bfc8      	it	gt
 80a3e5e:	2200      	movgt	r2, #0
 80a3e60:	61a2      	str	r2, [r4, #24]
 80a3e62:	68e2      	ldr	r2, [r4, #12]
 80a3e64:	6923      	ldr	r3, [r4, #16]
 80a3e66:	3201      	adds	r2, #1
 80a3e68:	60e2      	str	r2, [r4, #12]
 80a3e6a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a3e6e:	428a      	cmp	r2, r1
 80a3e70:	dd0e      	ble.n	80a3e90 <localtime_r+0x150>
 80a3e72:	2b0b      	cmp	r3, #11
 80a3e74:	eba2 0201 	sub.w	r2, r2, r1
 80a3e78:	60e2      	str	r2, [r4, #12]
 80a3e7a:	f103 0201 	add.w	r2, r3, #1
 80a3e7e:	bf05      	ittet	eq
 80a3e80:	2200      	moveq	r2, #0
 80a3e82:	6963      	ldreq	r3, [r4, #20]
 80a3e84:	6122      	strne	r2, [r4, #16]
 80a3e86:	3301      	addeq	r3, #1
 80a3e88:	bf02      	ittt	eq
 80a3e8a:	6122      	streq	r2, [r4, #16]
 80a3e8c:	6163      	streq	r3, [r4, #20]
 80a3e8e:	61e2      	streq	r2, [r4, #28]
 80a3e90:	f000 fa98 	bl	80a43c4 <__tz_unlock>
 80a3e94:	4620      	mov	r0, r4
 80a3e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3e9a:	2b00      	cmp	r3, #0
 80a3e9c:	dacc      	bge.n	80a3e38 <localtime_r+0xf8>
 80a3e9e:	3901      	subs	r1, #1
 80a3ea0:	6061      	str	r1, [r4, #4]
 80a3ea2:	333c      	adds	r3, #60	; 0x3c
 80a3ea4:	e7c7      	b.n	80a3e36 <localtime_r+0xf6>
 80a3ea6:	2b00      	cmp	r3, #0
 80a3ea8:	dacd      	bge.n	80a3e46 <localtime_r+0x106>
 80a3eaa:	3a01      	subs	r2, #1
 80a3eac:	60a2      	str	r2, [r4, #8]
 80a3eae:	333c      	adds	r3, #60	; 0x3c
 80a3eb0:	e7c8      	b.n	80a3e44 <localtime_r+0x104>
 80a3eb2:	2b00      	cmp	r3, #0
 80a3eb4:	daec      	bge.n	80a3e90 <localtime_r+0x150>
 80a3eb6:	69e2      	ldr	r2, [r4, #28]
 80a3eb8:	3318      	adds	r3, #24
 80a3eba:	3a01      	subs	r2, #1
 80a3ebc:	61e2      	str	r2, [r4, #28]
 80a3ebe:	69a2      	ldr	r2, [r4, #24]
 80a3ec0:	60a3      	str	r3, [r4, #8]
 80a3ec2:	3a01      	subs	r2, #1
 80a3ec4:	bf48      	it	mi
 80a3ec6:	2206      	movmi	r2, #6
 80a3ec8:	61a2      	str	r2, [r4, #24]
 80a3eca:	68e2      	ldr	r2, [r4, #12]
 80a3ecc:	3a01      	subs	r2, #1
 80a3ece:	60e2      	str	r2, [r4, #12]
 80a3ed0:	2a00      	cmp	r2, #0
 80a3ed2:	d1dd      	bne.n	80a3e90 <localtime_r+0x150>
 80a3ed4:	6923      	ldr	r3, [r4, #16]
 80a3ed6:	3b01      	subs	r3, #1
 80a3ed8:	d405      	bmi.n	80a3ee6 <localtime_r+0x1a6>
 80a3eda:	6123      	str	r3, [r4, #16]
 80a3edc:	6923      	ldr	r3, [r4, #16]
 80a3ede:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a3ee2:	60e3      	str	r3, [r4, #12]
 80a3ee4:	e7d4      	b.n	80a3e90 <localtime_r+0x150>
 80a3ee6:	230b      	movs	r3, #11
 80a3ee8:	6123      	str	r3, [r4, #16]
 80a3eea:	6963      	ldr	r3, [r4, #20]
 80a3eec:	1e5a      	subs	r2, r3, #1
 80a3eee:	6162      	str	r2, [r4, #20]
 80a3ef0:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a3ef4:	0793      	lsls	r3, r2, #30
 80a3ef6:	d105      	bne.n	80a3f04 <localtime_r+0x1c4>
 80a3ef8:	2164      	movs	r1, #100	; 0x64
 80a3efa:	fb92 f3f1 	sdiv	r3, r2, r1
 80a3efe:	fb01 2313 	mls	r3, r1, r3, r2
 80a3f02:	b963      	cbnz	r3, 80a3f1e <localtime_r+0x1de>
 80a3f04:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a3f08:	fb92 f3f1 	sdiv	r3, r2, r1
 80a3f0c:	fb01 2313 	mls	r3, r1, r3, r2
 80a3f10:	fab3 f383 	clz	r3, r3
 80a3f14:	095b      	lsrs	r3, r3, #5
 80a3f16:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a3f1a:	61e3      	str	r3, [r4, #28]
 80a3f1c:	e7de      	b.n	80a3edc <localtime_r+0x19c>
 80a3f1e:	2301      	movs	r3, #1
 80a3f20:	e7f9      	b.n	80a3f16 <localtime_r+0x1d6>
 80a3f22:	bf00      	nop
 80a3f24:	080a4ee8 	.word	0x080a4ee8
 80a3f28:	20000744 	.word	0x20000744

080a3f2c <memcpy>:
 80a3f2c:	440a      	add	r2, r1
 80a3f2e:	4291      	cmp	r1, r2
 80a3f30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3f34:	d100      	bne.n	80a3f38 <memcpy+0xc>
 80a3f36:	4770      	bx	lr
 80a3f38:	b510      	push	{r4, lr}
 80a3f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3f3e:	4291      	cmp	r1, r2
 80a3f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3f44:	d1f9      	bne.n	80a3f3a <memcpy+0xe>
 80a3f46:	bd10      	pop	{r4, pc}

080a3f48 <memset>:
 80a3f48:	4603      	mov	r3, r0
 80a3f4a:	4402      	add	r2, r0
 80a3f4c:	4293      	cmp	r3, r2
 80a3f4e:	d100      	bne.n	80a3f52 <memset+0xa>
 80a3f50:	4770      	bx	lr
 80a3f52:	f803 1b01 	strb.w	r1, [r3], #1
 80a3f56:	e7f9      	b.n	80a3f4c <memset+0x4>

080a3f58 <srand>:
 80a3f58:	b538      	push	{r3, r4, r5, lr}
 80a3f5a:	4b0d      	ldr	r3, [pc, #52]	; (80a3f90 <srand+0x38>)
 80a3f5c:	4604      	mov	r4, r0
 80a3f5e:	681d      	ldr	r5, [r3, #0]
 80a3f60:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3f62:	b97b      	cbnz	r3, 80a3f84 <srand+0x2c>
 80a3f64:	2018      	movs	r0, #24
 80a3f66:	f7fd fb53 	bl	80a1610 <malloc>
 80a3f6a:	4a0a      	ldr	r2, [pc, #40]	; (80a3f94 <srand+0x3c>)
 80a3f6c:	4b0a      	ldr	r3, [pc, #40]	; (80a3f98 <srand+0x40>)
 80a3f6e:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3f70:	e9c0 2300 	strd	r2, r3, [r0]
 80a3f74:	4b09      	ldr	r3, [pc, #36]	; (80a3f9c <srand+0x44>)
 80a3f76:	2201      	movs	r2, #1
 80a3f78:	6083      	str	r3, [r0, #8]
 80a3f7a:	230b      	movs	r3, #11
 80a3f7c:	8183      	strh	r3, [r0, #12]
 80a3f7e:	2300      	movs	r3, #0
 80a3f80:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3f84:	2200      	movs	r2, #0
 80a3f86:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3f88:	611c      	str	r4, [r3, #16]
 80a3f8a:	615a      	str	r2, [r3, #20]
 80a3f8c:	bd38      	pop	{r3, r4, r5, pc}
 80a3f8e:	bf00      	nop
 80a3f90:	20000078 	.word	0x20000078
 80a3f94:	abcd330e 	.word	0xabcd330e
 80a3f98:	e66d1234 	.word	0xe66d1234
 80a3f9c:	0005deec 	.word	0x0005deec

080a3fa0 <strcmp>:
 80a3fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a3fa8:	2a01      	cmp	r2, #1
 80a3faa:	bf28      	it	cs
 80a3fac:	429a      	cmpcs	r2, r3
 80a3fae:	d0f7      	beq.n	80a3fa0 <strcmp>
 80a3fb0:	1ad0      	subs	r0, r2, r3
 80a3fb2:	4770      	bx	lr

080a3fb4 <strcpy>:
 80a3fb4:	4603      	mov	r3, r0
 80a3fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3fba:	f803 2b01 	strb.w	r2, [r3], #1
 80a3fbe:	2a00      	cmp	r2, #0
 80a3fc0:	d1f9      	bne.n	80a3fb6 <strcpy+0x2>
 80a3fc2:	4770      	bx	lr

080a3fc4 <strdup>:
 80a3fc4:	4b02      	ldr	r3, [pc, #8]	; (80a3fd0 <strdup+0xc>)
 80a3fc6:	4601      	mov	r1, r0
 80a3fc8:	6818      	ldr	r0, [r3, #0]
 80a3fca:	f000 b803 	b.w	80a3fd4 <_strdup_r>
 80a3fce:	bf00      	nop
 80a3fd0:	20000078 	.word	0x20000078

080a3fd4 <_strdup_r>:
 80a3fd4:	b570      	push	{r4, r5, r6, lr}
 80a3fd6:	4604      	mov	r4, r0
 80a3fd8:	4608      	mov	r0, r1
 80a3fda:	460d      	mov	r5, r1
 80a3fdc:	f000 f80d 	bl	80a3ffa <strlen>
 80a3fe0:	1c46      	adds	r6, r0, #1
 80a3fe2:	4631      	mov	r1, r6
 80a3fe4:	4620      	mov	r0, r4
 80a3fe6:	f7fd fb4b 	bl	80a1680 <_malloc_r>
 80a3fea:	4604      	mov	r4, r0
 80a3fec:	b118      	cbz	r0, 80a3ff6 <_strdup_r+0x22>
 80a3fee:	4632      	mov	r2, r6
 80a3ff0:	4629      	mov	r1, r5
 80a3ff2:	f7ff ff9b 	bl	80a3f2c <memcpy>
 80a3ff6:	4620      	mov	r0, r4
 80a3ff8:	bd70      	pop	{r4, r5, r6, pc}

080a3ffa <strlen>:
 80a3ffa:	4603      	mov	r3, r0
 80a3ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4000:	2a00      	cmp	r2, #0
 80a4002:	d1fb      	bne.n	80a3ffc <strlen+0x2>
 80a4004:	1a18      	subs	r0, r3, r0
 80a4006:	3801      	subs	r0, #1
 80a4008:	4770      	bx	lr

080a400a <strncmp>:
 80a400a:	b510      	push	{r4, lr}
 80a400c:	b16a      	cbz	r2, 80a402a <strncmp+0x20>
 80a400e:	3901      	subs	r1, #1
 80a4010:	1884      	adds	r4, r0, r2
 80a4012:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a4016:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a401a:	4293      	cmp	r3, r2
 80a401c:	d103      	bne.n	80a4026 <strncmp+0x1c>
 80a401e:	42a0      	cmp	r0, r4
 80a4020:	d001      	beq.n	80a4026 <strncmp+0x1c>
 80a4022:	2b00      	cmp	r3, #0
 80a4024:	d1f5      	bne.n	80a4012 <strncmp+0x8>
 80a4026:	1a98      	subs	r0, r3, r2
 80a4028:	bd10      	pop	{r4, pc}
 80a402a:	4610      	mov	r0, r2
 80a402c:	e7fc      	b.n	80a4028 <strncmp+0x1e>

080a402e <strncpy>:
 80a402e:	4603      	mov	r3, r0
 80a4030:	b510      	push	{r4, lr}
 80a4032:	3901      	subs	r1, #1
 80a4034:	b132      	cbz	r2, 80a4044 <strncpy+0x16>
 80a4036:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a403a:	3a01      	subs	r2, #1
 80a403c:	f803 4b01 	strb.w	r4, [r3], #1
 80a4040:	2c00      	cmp	r4, #0
 80a4042:	d1f7      	bne.n	80a4034 <strncpy+0x6>
 80a4044:	2100      	movs	r1, #0
 80a4046:	441a      	add	r2, r3
 80a4048:	4293      	cmp	r3, r2
 80a404a:	d100      	bne.n	80a404e <strncpy+0x20>
 80a404c:	bd10      	pop	{r4, pc}
 80a404e:	f803 1b01 	strb.w	r1, [r3], #1
 80a4052:	e7f9      	b.n	80a4048 <strncpy+0x1a>

080a4054 <_strtol_l.isra.0>:
 80a4054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4058:	468c      	mov	ip, r1
 80a405a:	4686      	mov	lr, r0
 80a405c:	4e39      	ldr	r6, [pc, #228]	; (80a4144 <_strtol_l.isra.0+0xf0>)
 80a405e:	4660      	mov	r0, ip
 80a4060:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a4064:	5da5      	ldrb	r5, [r4, r6]
 80a4066:	f015 0508 	ands.w	r5, r5, #8
 80a406a:	d1f8      	bne.n	80a405e <_strtol_l.isra.0+0xa>
 80a406c:	2c2d      	cmp	r4, #45	; 0x2d
 80a406e:	d133      	bne.n	80a40d8 <_strtol_l.isra.0+0x84>
 80a4070:	f04f 0801 	mov.w	r8, #1
 80a4074:	f89c 4000 	ldrb.w	r4, [ip]
 80a4078:	f100 0c02 	add.w	ip, r0, #2
 80a407c:	2b00      	cmp	r3, #0
 80a407e:	d05c      	beq.n	80a413a <_strtol_l.isra.0+0xe6>
 80a4080:	2b10      	cmp	r3, #16
 80a4082:	d10c      	bne.n	80a409e <_strtol_l.isra.0+0x4a>
 80a4084:	2c30      	cmp	r4, #48	; 0x30
 80a4086:	d10a      	bne.n	80a409e <_strtol_l.isra.0+0x4a>
 80a4088:	f89c 0000 	ldrb.w	r0, [ip]
 80a408c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a4090:	2858      	cmp	r0, #88	; 0x58
 80a4092:	d14d      	bne.n	80a4130 <_strtol_l.isra.0+0xdc>
 80a4094:	2310      	movs	r3, #16
 80a4096:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a409a:	f10c 0c02 	add.w	ip, ip, #2
 80a409e:	2600      	movs	r6, #0
 80a40a0:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a40a4:	3f01      	subs	r7, #1
 80a40a6:	fbb7 f9f3 	udiv	r9, r7, r3
 80a40aa:	4630      	mov	r0, r6
 80a40ac:	fb03 7a19 	mls	sl, r3, r9, r7
 80a40b0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a40b4:	2d09      	cmp	r5, #9
 80a40b6:	d818      	bhi.n	80a40ea <_strtol_l.isra.0+0x96>
 80a40b8:	462c      	mov	r4, r5
 80a40ba:	42a3      	cmp	r3, r4
 80a40bc:	dd24      	ble.n	80a4108 <_strtol_l.isra.0+0xb4>
 80a40be:	1c75      	adds	r5, r6, #1
 80a40c0:	d007      	beq.n	80a40d2 <_strtol_l.isra.0+0x7e>
 80a40c2:	4581      	cmp	r9, r0
 80a40c4:	d31d      	bcc.n	80a4102 <_strtol_l.isra.0+0xae>
 80a40c6:	d101      	bne.n	80a40cc <_strtol_l.isra.0+0x78>
 80a40c8:	45a2      	cmp	sl, r4
 80a40ca:	db1a      	blt.n	80a4102 <_strtol_l.isra.0+0xae>
 80a40cc:	2601      	movs	r6, #1
 80a40ce:	fb00 4003 	mla	r0, r0, r3, r4
 80a40d2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a40d6:	e7eb      	b.n	80a40b0 <_strtol_l.isra.0+0x5c>
 80a40d8:	2c2b      	cmp	r4, #43	; 0x2b
 80a40da:	bf08      	it	eq
 80a40dc:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a40e0:	46a8      	mov	r8, r5
 80a40e2:	bf08      	it	eq
 80a40e4:	f100 0c02 	addeq.w	ip, r0, #2
 80a40e8:	e7c8      	b.n	80a407c <_strtol_l.isra.0+0x28>
 80a40ea:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a40ee:	2d19      	cmp	r5, #25
 80a40f0:	d801      	bhi.n	80a40f6 <_strtol_l.isra.0+0xa2>
 80a40f2:	3c37      	subs	r4, #55	; 0x37
 80a40f4:	e7e1      	b.n	80a40ba <_strtol_l.isra.0+0x66>
 80a40f6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a40fa:	2d19      	cmp	r5, #25
 80a40fc:	d804      	bhi.n	80a4108 <_strtol_l.isra.0+0xb4>
 80a40fe:	3c57      	subs	r4, #87	; 0x57
 80a4100:	e7db      	b.n	80a40ba <_strtol_l.isra.0+0x66>
 80a4102:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a4106:	e7e4      	b.n	80a40d2 <_strtol_l.isra.0+0x7e>
 80a4108:	1c73      	adds	r3, r6, #1
 80a410a:	d106      	bne.n	80a411a <_strtol_l.isra.0+0xc6>
 80a410c:	2322      	movs	r3, #34	; 0x22
 80a410e:	4638      	mov	r0, r7
 80a4110:	f8ce 3000 	str.w	r3, [lr]
 80a4114:	b942      	cbnz	r2, 80a4128 <_strtol_l.isra.0+0xd4>
 80a4116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a411a:	f1b8 0f00 	cmp.w	r8, #0
 80a411e:	d000      	beq.n	80a4122 <_strtol_l.isra.0+0xce>
 80a4120:	4240      	negs	r0, r0
 80a4122:	2a00      	cmp	r2, #0
 80a4124:	d0f7      	beq.n	80a4116 <_strtol_l.isra.0+0xc2>
 80a4126:	b10e      	cbz	r6, 80a412c <_strtol_l.isra.0+0xd8>
 80a4128:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a412c:	6011      	str	r1, [r2, #0]
 80a412e:	e7f2      	b.n	80a4116 <_strtol_l.isra.0+0xc2>
 80a4130:	2430      	movs	r4, #48	; 0x30
 80a4132:	2b00      	cmp	r3, #0
 80a4134:	d1b3      	bne.n	80a409e <_strtol_l.isra.0+0x4a>
 80a4136:	2308      	movs	r3, #8
 80a4138:	e7b1      	b.n	80a409e <_strtol_l.isra.0+0x4a>
 80a413a:	2c30      	cmp	r4, #48	; 0x30
 80a413c:	d0a4      	beq.n	80a4088 <_strtol_l.isra.0+0x34>
 80a413e:	230a      	movs	r3, #10
 80a4140:	e7ad      	b.n	80a409e <_strtol_l.isra.0+0x4a>
 80a4142:	bf00      	nop
 80a4144:	080a4f85 	.word	0x080a4f85

080a4148 <strtol>:
 80a4148:	4613      	mov	r3, r2
 80a414a:	460a      	mov	r2, r1
 80a414c:	4601      	mov	r1, r0
 80a414e:	4802      	ldr	r0, [pc, #8]	; (80a4158 <strtol+0x10>)
 80a4150:	6800      	ldr	r0, [r0, #0]
 80a4152:	f7ff bf7f 	b.w	80a4054 <_strtol_l.isra.0>
 80a4156:	bf00      	nop
 80a4158:	20000078 	.word	0x20000078

080a415c <_strtoul_l.isra.0>:
 80a415c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4160:	468c      	mov	ip, r1
 80a4162:	4686      	mov	lr, r0
 80a4164:	4e3a      	ldr	r6, [pc, #232]	; (80a4250 <_strtoul_l.isra.0+0xf4>)
 80a4166:	4660      	mov	r0, ip
 80a4168:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a416c:	5da5      	ldrb	r5, [r4, r6]
 80a416e:	f015 0508 	ands.w	r5, r5, #8
 80a4172:	d1f8      	bne.n	80a4166 <_strtoul_l.isra.0+0xa>
 80a4174:	2c2d      	cmp	r4, #45	; 0x2d
 80a4176:	d134      	bne.n	80a41e2 <_strtoul_l.isra.0+0x86>
 80a4178:	f04f 0801 	mov.w	r8, #1
 80a417c:	f89c 4000 	ldrb.w	r4, [ip]
 80a4180:	f100 0c02 	add.w	ip, r0, #2
 80a4184:	2b00      	cmp	r3, #0
 80a4186:	d05e      	beq.n	80a4246 <_strtoul_l.isra.0+0xea>
 80a4188:	2b10      	cmp	r3, #16
 80a418a:	d10c      	bne.n	80a41a6 <_strtoul_l.isra.0+0x4a>
 80a418c:	2c30      	cmp	r4, #48	; 0x30
 80a418e:	d10a      	bne.n	80a41a6 <_strtoul_l.isra.0+0x4a>
 80a4190:	f89c 0000 	ldrb.w	r0, [ip]
 80a4194:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a4198:	2858      	cmp	r0, #88	; 0x58
 80a419a:	d14f      	bne.n	80a423c <_strtoul_l.isra.0+0xe0>
 80a419c:	2310      	movs	r3, #16
 80a419e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a41a2:	f10c 0c02 	add.w	ip, ip, #2
 80a41a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a41aa:	fbb7 f7f3 	udiv	r7, r7, r3
 80a41ae:	2500      	movs	r5, #0
 80a41b0:	fb03 f907 	mul.w	r9, r3, r7
 80a41b4:	4628      	mov	r0, r5
 80a41b6:	ea6f 0909 	mvn.w	r9, r9
 80a41ba:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a41be:	2e09      	cmp	r6, #9
 80a41c0:	d818      	bhi.n	80a41f4 <_strtoul_l.isra.0+0x98>
 80a41c2:	4634      	mov	r4, r6
 80a41c4:	42a3      	cmp	r3, r4
 80a41c6:	dd24      	ble.n	80a4212 <_strtoul_l.isra.0+0xb6>
 80a41c8:	2d00      	cmp	r5, #0
 80a41ca:	db1f      	blt.n	80a420c <_strtoul_l.isra.0+0xb0>
 80a41cc:	4287      	cmp	r7, r0
 80a41ce:	d31d      	bcc.n	80a420c <_strtoul_l.isra.0+0xb0>
 80a41d0:	d101      	bne.n	80a41d6 <_strtoul_l.isra.0+0x7a>
 80a41d2:	45a1      	cmp	r9, r4
 80a41d4:	db1a      	blt.n	80a420c <_strtoul_l.isra.0+0xb0>
 80a41d6:	2501      	movs	r5, #1
 80a41d8:	fb00 4003 	mla	r0, r0, r3, r4
 80a41dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a41e0:	e7eb      	b.n	80a41ba <_strtoul_l.isra.0+0x5e>
 80a41e2:	2c2b      	cmp	r4, #43	; 0x2b
 80a41e4:	bf08      	it	eq
 80a41e6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a41ea:	46a8      	mov	r8, r5
 80a41ec:	bf08      	it	eq
 80a41ee:	f100 0c02 	addeq.w	ip, r0, #2
 80a41f2:	e7c7      	b.n	80a4184 <_strtoul_l.isra.0+0x28>
 80a41f4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a41f8:	2e19      	cmp	r6, #25
 80a41fa:	d801      	bhi.n	80a4200 <_strtoul_l.isra.0+0xa4>
 80a41fc:	3c37      	subs	r4, #55	; 0x37
 80a41fe:	e7e1      	b.n	80a41c4 <_strtoul_l.isra.0+0x68>
 80a4200:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a4204:	2e19      	cmp	r6, #25
 80a4206:	d804      	bhi.n	80a4212 <_strtoul_l.isra.0+0xb6>
 80a4208:	3c57      	subs	r4, #87	; 0x57
 80a420a:	e7db      	b.n	80a41c4 <_strtoul_l.isra.0+0x68>
 80a420c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a4210:	e7e4      	b.n	80a41dc <_strtoul_l.isra.0+0x80>
 80a4212:	2d00      	cmp	r5, #0
 80a4214:	da07      	bge.n	80a4226 <_strtoul_l.isra.0+0xca>
 80a4216:	2322      	movs	r3, #34	; 0x22
 80a4218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a421c:	f8ce 3000 	str.w	r3, [lr]
 80a4220:	b942      	cbnz	r2, 80a4234 <_strtoul_l.isra.0+0xd8>
 80a4222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a4226:	f1b8 0f00 	cmp.w	r8, #0
 80a422a:	d000      	beq.n	80a422e <_strtoul_l.isra.0+0xd2>
 80a422c:	4240      	negs	r0, r0
 80a422e:	2a00      	cmp	r2, #0
 80a4230:	d0f7      	beq.n	80a4222 <_strtoul_l.isra.0+0xc6>
 80a4232:	b10d      	cbz	r5, 80a4238 <_strtoul_l.isra.0+0xdc>
 80a4234:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a4238:	6011      	str	r1, [r2, #0]
 80a423a:	e7f2      	b.n	80a4222 <_strtoul_l.isra.0+0xc6>
 80a423c:	2430      	movs	r4, #48	; 0x30
 80a423e:	2b00      	cmp	r3, #0
 80a4240:	d1b1      	bne.n	80a41a6 <_strtoul_l.isra.0+0x4a>
 80a4242:	2308      	movs	r3, #8
 80a4244:	e7af      	b.n	80a41a6 <_strtoul_l.isra.0+0x4a>
 80a4246:	2c30      	cmp	r4, #48	; 0x30
 80a4248:	d0a2      	beq.n	80a4190 <_strtoul_l.isra.0+0x34>
 80a424a:	230a      	movs	r3, #10
 80a424c:	e7ab      	b.n	80a41a6 <_strtoul_l.isra.0+0x4a>
 80a424e:	bf00      	nop
 80a4250:	080a4f85 	.word	0x080a4f85

080a4254 <strtoul>:
 80a4254:	4613      	mov	r3, r2
 80a4256:	460a      	mov	r2, r1
 80a4258:	4601      	mov	r1, r0
 80a425a:	4802      	ldr	r0, [pc, #8]	; (80a4264 <strtoul+0x10>)
 80a425c:	6800      	ldr	r0, [r0, #0]
 80a425e:	f7ff bf7d 	b.w	80a415c <_strtoul_l.isra.0>
 80a4262:	bf00      	nop
 80a4264:	20000078 	.word	0x20000078

080a4268 <__tzcalc_limits>:
 80a4268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a426c:	4680      	mov	r8, r0
 80a426e:	f000 fa77 	bl	80a4760 <__gettzinfo>
 80a4272:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a4276:	4598      	cmp	r8, r3
 80a4278:	f340 8097 	ble.w	80a43aa <__tzcalc_limits+0x142>
 80a427c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a4280:	f240 126d 	movw	r2, #365	; 0x16d
 80a4284:	4443      	add	r3, r8
 80a4286:	109b      	asrs	r3, r3, #2
 80a4288:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a428c:	fb02 3505 	mla	r5, r2, r5, r3
 80a4290:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a4294:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a4298:	fb93 f3f2 	sdiv	r3, r3, r2
 80a429c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a42a0:	441d      	add	r5, r3
 80a42a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a42a6:	4442      	add	r2, r8
 80a42a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80a42ac:	fb98 f7f3 	sdiv	r7, r8, r3
 80a42b0:	4415      	add	r5, r2
 80a42b2:	2264      	movs	r2, #100	; 0x64
 80a42b4:	fb03 8717 	mls	r7, r3, r7, r8
 80a42b8:	fb98 f6f2 	sdiv	r6, r8, r2
 80a42bc:	fab7 fc87 	clz	ip, r7
 80a42c0:	4604      	mov	r4, r0
 80a42c2:	f04f 0e07 	mov.w	lr, #7
 80a42c6:	fb02 8616 	mls	r6, r2, r6, r8
 80a42ca:	f008 0303 	and.w	r3, r8, #3
 80a42ce:	f8c0 8004 	str.w	r8, [r0, #4]
 80a42d2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a42d6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a42da:	9300      	str	r3, [sp, #0]
 80a42dc:	7a22      	ldrb	r2, [r4, #8]
 80a42de:	6963      	ldr	r3, [r4, #20]
 80a42e0:	2a4a      	cmp	r2, #74	; 0x4a
 80a42e2:	d128      	bne.n	80a4336 <__tzcalc_limits+0xce>
 80a42e4:	9900      	ldr	r1, [sp, #0]
 80a42e6:	18ea      	adds	r2, r5, r3
 80a42e8:	b901      	cbnz	r1, 80a42ec <__tzcalc_limits+0x84>
 80a42ea:	b906      	cbnz	r6, 80a42ee <__tzcalc_limits+0x86>
 80a42ec:	bb0f      	cbnz	r7, 80a4332 <__tzcalc_limits+0xca>
 80a42ee:	2b3b      	cmp	r3, #59	; 0x3b
 80a42f0:	bfd4      	ite	le
 80a42f2:	2300      	movle	r3, #0
 80a42f4:	2301      	movgt	r3, #1
 80a42f6:	4413      	add	r3, r2
 80a42f8:	1e5a      	subs	r2, r3, #1
 80a42fa:	69a3      	ldr	r3, [r4, #24]
 80a42fc:	492c      	ldr	r1, [pc, #176]	; (80a43b0 <__tzcalc_limits+0x148>)
 80a42fe:	3428      	adds	r4, #40	; 0x28
 80a4300:	fb01 3202 	mla	r2, r1, r2, r3
 80a4304:	6823      	ldr	r3, [r4, #0]
 80a4306:	4413      	add	r3, r2
 80a4308:	461a      	mov	r2, r3
 80a430a:	17db      	asrs	r3, r3, #31
 80a430c:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a4310:	45a3      	cmp	fp, r4
 80a4312:	d1e3      	bne.n	80a42dc <__tzcalc_limits+0x74>
 80a4314:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a4318:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a431c:	4294      	cmp	r4, r2
 80a431e:	eb75 0303 	sbcs.w	r3, r5, r3
 80a4322:	bfb4      	ite	lt
 80a4324:	2301      	movlt	r3, #1
 80a4326:	2300      	movge	r3, #0
 80a4328:	6003      	str	r3, [r0, #0]
 80a432a:	2001      	movs	r0, #1
 80a432c:	b003      	add	sp, #12
 80a432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4332:	2300      	movs	r3, #0
 80a4334:	e7df      	b.n	80a42f6 <__tzcalc_limits+0x8e>
 80a4336:	2a44      	cmp	r2, #68	; 0x44
 80a4338:	d101      	bne.n	80a433e <__tzcalc_limits+0xd6>
 80a433a:	18ea      	adds	r2, r5, r3
 80a433c:	e7dd      	b.n	80a42fa <__tzcalc_limits+0x92>
 80a433e:	9a00      	ldr	r2, [sp, #0]
 80a4340:	bb6a      	cbnz	r2, 80a439e <__tzcalc_limits+0x136>
 80a4342:	2e00      	cmp	r6, #0
 80a4344:	bf0c      	ite	eq
 80a4346:	46e0      	moveq	r8, ip
 80a4348:	f04f 0801 	movne.w	r8, #1
 80a434c:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a4350:	68e2      	ldr	r2, [r4, #12]
 80a4352:	f04f 0900 	mov.w	r9, #0
 80a4356:	9201      	str	r2, [sp, #4]
 80a4358:	462a      	mov	r2, r5
 80a435a:	4916      	ldr	r1, [pc, #88]	; (80a43b4 <__tzcalc_limits+0x14c>)
 80a435c:	fb0a 1808 	mla	r8, sl, r8, r1
 80a4360:	f1a8 0804 	sub.w	r8, r8, #4
 80a4364:	9901      	ldr	r1, [sp, #4]
 80a4366:	f109 0901 	add.w	r9, r9, #1
 80a436a:	4549      	cmp	r1, r9
 80a436c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a4370:	dc17      	bgt.n	80a43a2 <__tzcalc_limits+0x13a>
 80a4372:	f102 0804 	add.w	r8, r2, #4
 80a4376:	fb98 f9fe 	sdiv	r9, r8, lr
 80a437a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a437e:	eba8 0909 	sub.w	r9, r8, r9
 80a4382:	ebb3 0909 	subs.w	r9, r3, r9
 80a4386:	6923      	ldr	r3, [r4, #16]
 80a4388:	bf48      	it	mi
 80a438a:	f109 0907 	addmi.w	r9, r9, #7
 80a438e:	3b01      	subs	r3, #1
 80a4390:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a4394:	444b      	add	r3, r9
 80a4396:	4553      	cmp	r3, sl
 80a4398:	da05      	bge.n	80a43a6 <__tzcalc_limits+0x13e>
 80a439a:	441a      	add	r2, r3
 80a439c:	e7ad      	b.n	80a42fa <__tzcalc_limits+0x92>
 80a439e:	46e0      	mov	r8, ip
 80a43a0:	e7d4      	b.n	80a434c <__tzcalc_limits+0xe4>
 80a43a2:	4452      	add	r2, sl
 80a43a4:	e7de      	b.n	80a4364 <__tzcalc_limits+0xfc>
 80a43a6:	3b07      	subs	r3, #7
 80a43a8:	e7f5      	b.n	80a4396 <__tzcalc_limits+0x12e>
 80a43aa:	2000      	movs	r0, #0
 80a43ac:	e7be      	b.n	80a432c <__tzcalc_limits+0xc4>
 80a43ae:	bf00      	nop
 80a43b0:	00015180 	.word	0x00015180
 80a43b4:	080a4ee8 	.word	0x080a4ee8

080a43b8 <__tz_lock>:
 80a43b8:	4801      	ldr	r0, [pc, #4]	; (80a43c0 <__tz_lock+0x8>)
 80a43ba:	f000 ba85 	b.w	80a48c8 <__retarget_lock_acquire>
 80a43be:	bf00      	nop
 80a43c0:	20000757 	.word	0x20000757

080a43c4 <__tz_unlock>:
 80a43c4:	4801      	ldr	r0, [pc, #4]	; (80a43cc <__tz_unlock+0x8>)
 80a43c6:	f000 ba81 	b.w	80a48cc <__retarget_lock_release>
 80a43ca:	bf00      	nop
 80a43cc:	20000757 	.word	0x20000757

080a43d0 <_tzset_unlocked>:
 80a43d0:	4b01      	ldr	r3, [pc, #4]	; (80a43d8 <_tzset_unlocked+0x8>)
 80a43d2:	6818      	ldr	r0, [r3, #0]
 80a43d4:	f000 b802 	b.w	80a43dc <_tzset_unlocked_r>
 80a43d8:	20000078 	.word	0x20000078

080a43dc <_tzset_unlocked_r>:
 80a43dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a43e0:	b08d      	sub	sp, #52	; 0x34
 80a43e2:	4607      	mov	r7, r0
 80a43e4:	f000 f9bc 	bl	80a4760 <__gettzinfo>
 80a43e8:	49b0      	ldr	r1, [pc, #704]	; (80a46ac <_tzset_unlocked_r+0x2d0>)
 80a43ea:	4605      	mov	r5, r0
 80a43ec:	4638      	mov	r0, r7
 80a43ee:	f000 f9af 	bl	80a4750 <_getenv_r>
 80a43f2:	4eaf      	ldr	r6, [pc, #700]	; (80a46b0 <_tzset_unlocked_r+0x2d4>)
 80a43f4:	4604      	mov	r4, r0
 80a43f6:	b970      	cbnz	r0, 80a4416 <_tzset_unlocked_r+0x3a>
 80a43f8:	4bae      	ldr	r3, [pc, #696]	; (80a46b4 <_tzset_unlocked_r+0x2d8>)
 80a43fa:	4aaf      	ldr	r2, [pc, #700]	; (80a46b8 <_tzset_unlocked_r+0x2dc>)
 80a43fc:	6018      	str	r0, [r3, #0]
 80a43fe:	4baf      	ldr	r3, [pc, #700]	; (80a46bc <_tzset_unlocked_r+0x2e0>)
 80a4400:	6018      	str	r0, [r3, #0]
 80a4402:	4baf      	ldr	r3, [pc, #700]	; (80a46c0 <_tzset_unlocked_r+0x2e4>)
 80a4404:	6830      	ldr	r0, [r6, #0]
 80a4406:	e9c3 2200 	strd	r2, r2, [r3]
 80a440a:	f7fd f909 	bl	80a1620 <free>
 80a440e:	6034      	str	r4, [r6, #0]
 80a4410:	b00d      	add	sp, #52	; 0x34
 80a4412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4416:	6831      	ldr	r1, [r6, #0]
 80a4418:	2900      	cmp	r1, #0
 80a441a:	d15f      	bne.n	80a44dc <_tzset_unlocked_r+0x100>
 80a441c:	6830      	ldr	r0, [r6, #0]
 80a441e:	f7fd f8ff 	bl	80a1620 <free>
 80a4422:	4620      	mov	r0, r4
 80a4424:	f7ff fde9 	bl	80a3ffa <strlen>
 80a4428:	1c41      	adds	r1, r0, #1
 80a442a:	4638      	mov	r0, r7
 80a442c:	f7fd f928 	bl	80a1680 <_malloc_r>
 80a4430:	6030      	str	r0, [r6, #0]
 80a4432:	2800      	cmp	r0, #0
 80a4434:	d157      	bne.n	80a44e6 <_tzset_unlocked_r+0x10a>
 80a4436:	7823      	ldrb	r3, [r4, #0]
 80a4438:	ae0a      	add	r6, sp, #40	; 0x28
 80a443a:	2b3a      	cmp	r3, #58	; 0x3a
 80a443c:	bf08      	it	eq
 80a443e:	3401      	addeq	r4, #1
 80a4440:	4633      	mov	r3, r6
 80a4442:	4620      	mov	r0, r4
 80a4444:	4a9f      	ldr	r2, [pc, #636]	; (80a46c4 <_tzset_unlocked_r+0x2e8>)
 80a4446:	49a0      	ldr	r1, [pc, #640]	; (80a46c8 <_tzset_unlocked_r+0x2ec>)
 80a4448:	f7fd f902 	bl	80a1650 <siscanf>
 80a444c:	2800      	cmp	r0, #0
 80a444e:	dddf      	ble.n	80a4410 <_tzset_unlocked_r+0x34>
 80a4450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4452:	18e7      	adds	r7, r4, r3
 80a4454:	5ce3      	ldrb	r3, [r4, r3]
 80a4456:	2b2d      	cmp	r3, #45	; 0x2d
 80a4458:	d149      	bne.n	80a44ee <_tzset_unlocked_r+0x112>
 80a445a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a445e:	3701      	adds	r7, #1
 80a4460:	f04f 0800 	mov.w	r8, #0
 80a4464:	f10d 0a20 	add.w	sl, sp, #32
 80a4468:	f10d 0b1e 	add.w	fp, sp, #30
 80a446c:	4633      	mov	r3, r6
 80a446e:	4638      	mov	r0, r7
 80a4470:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a4474:	4995      	ldr	r1, [pc, #596]	; (80a46cc <_tzset_unlocked_r+0x2f0>)
 80a4476:	9603      	str	r6, [sp, #12]
 80a4478:	f8cd b000 	str.w	fp, [sp]
 80a447c:	aa07      	add	r2, sp, #28
 80a447e:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a4482:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a4486:	f7fd f8e3 	bl	80a1650 <siscanf>
 80a448a:	4540      	cmp	r0, r8
 80a448c:	ddc0      	ble.n	80a4410 <_tzset_unlocked_r+0x34>
 80a448e:	213c      	movs	r1, #60	; 0x3c
 80a4490:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a4494:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a4498:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a46d8 <_tzset_unlocked_r+0x2fc>
 80a449c:	fb01 2203 	mla	r2, r1, r3, r2
 80a44a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a44a4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a44a8:	fb01 2303 	mla	r3, r1, r3, r2
 80a44ac:	435c      	muls	r4, r3
 80a44ae:	4b85      	ldr	r3, [pc, #532]	; (80a46c4 <_tzset_unlocked_r+0x2e8>)
 80a44b0:	62ac      	str	r4, [r5, #40]	; 0x28
 80a44b2:	4c83      	ldr	r4, [pc, #524]	; (80a46c0 <_tzset_unlocked_r+0x2e4>)
 80a44b4:	464a      	mov	r2, r9
 80a44b6:	6023      	str	r3, [r4, #0]
 80a44b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a44ba:	4983      	ldr	r1, [pc, #524]	; (80a46c8 <_tzset_unlocked_r+0x2ec>)
 80a44bc:	441f      	add	r7, r3
 80a44be:	4638      	mov	r0, r7
 80a44c0:	4633      	mov	r3, r6
 80a44c2:	f7fd f8c5 	bl	80a1650 <siscanf>
 80a44c6:	4540      	cmp	r0, r8
 80a44c8:	dc17      	bgt.n	80a44fa <_tzset_unlocked_r+0x11e>
 80a44ca:	6823      	ldr	r3, [r4, #0]
 80a44cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a44ce:	6063      	str	r3, [r4, #4]
 80a44d0:	4b78      	ldr	r3, [pc, #480]	; (80a46b4 <_tzset_unlocked_r+0x2d8>)
 80a44d2:	601a      	str	r2, [r3, #0]
 80a44d4:	4b79      	ldr	r3, [pc, #484]	; (80a46bc <_tzset_unlocked_r+0x2e0>)
 80a44d6:	f8c3 8000 	str.w	r8, [r3]
 80a44da:	e799      	b.n	80a4410 <_tzset_unlocked_r+0x34>
 80a44dc:	f7ff fd60 	bl	80a3fa0 <strcmp>
 80a44e0:	2800      	cmp	r0, #0
 80a44e2:	d19b      	bne.n	80a441c <_tzset_unlocked_r+0x40>
 80a44e4:	e794      	b.n	80a4410 <_tzset_unlocked_r+0x34>
 80a44e6:	4621      	mov	r1, r4
 80a44e8:	f7ff fd64 	bl	80a3fb4 <strcpy>
 80a44ec:	e7a3      	b.n	80a4436 <_tzset_unlocked_r+0x5a>
 80a44ee:	2b2b      	cmp	r3, #43	; 0x2b
 80a44f0:	f04f 0401 	mov.w	r4, #1
 80a44f4:	bf08      	it	eq
 80a44f6:	3701      	addeq	r7, #1
 80a44f8:	e7b2      	b.n	80a4460 <_tzset_unlocked_r+0x84>
 80a44fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a44fc:	f8c4 9004 	str.w	r9, [r4, #4]
 80a4500:	18fc      	adds	r4, r7, r3
 80a4502:	5cfb      	ldrb	r3, [r7, r3]
 80a4504:	2b2d      	cmp	r3, #45	; 0x2d
 80a4506:	f040 808c 	bne.w	80a4622 <_tzset_unlocked_r+0x246>
 80a450a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a450e:	3401      	adds	r4, #1
 80a4510:	2300      	movs	r3, #0
 80a4512:	4620      	mov	r0, r4
 80a4514:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a4518:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a451c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a4520:	930a      	str	r3, [sp, #40]	; 0x28
 80a4522:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a4526:	4633      	mov	r3, r6
 80a4528:	e9cd b600 	strd	fp, r6, [sp]
 80a452c:	4967      	ldr	r1, [pc, #412]	; (80a46cc <_tzset_unlocked_r+0x2f0>)
 80a452e:	aa07      	add	r2, sp, #28
 80a4530:	f7fd f88e 	bl	80a1650 <siscanf>
 80a4534:	2800      	cmp	r0, #0
 80a4536:	dc7a      	bgt.n	80a462e <_tzset_unlocked_r+0x252>
 80a4538:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a453a:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a453e:	652f      	str	r7, [r5, #80]	; 0x50
 80a4540:	f04f 0900 	mov.w	r9, #0
 80a4544:	462f      	mov	r7, r5
 80a4546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4548:	441c      	add	r4, r3
 80a454a:	7823      	ldrb	r3, [r4, #0]
 80a454c:	2b2c      	cmp	r3, #44	; 0x2c
 80a454e:	bf08      	it	eq
 80a4550:	3401      	addeq	r4, #1
 80a4552:	f894 8000 	ldrb.w	r8, [r4]
 80a4556:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a455a:	d17a      	bne.n	80a4652 <_tzset_unlocked_r+0x276>
 80a455c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a4560:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a4564:	ab09      	add	r3, sp, #36	; 0x24
 80a4566:	9300      	str	r3, [sp, #0]
 80a4568:	4620      	mov	r0, r4
 80a456a:	4633      	mov	r3, r6
 80a456c:	4958      	ldr	r1, [pc, #352]	; (80a46d0 <_tzset_unlocked_r+0x2f4>)
 80a456e:	9603      	str	r6, [sp, #12]
 80a4570:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a4574:	f7fd f86c 	bl	80a1650 <siscanf>
 80a4578:	2803      	cmp	r0, #3
 80a457a:	f47f af49 	bne.w	80a4410 <_tzset_unlocked_r+0x34>
 80a457e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a4582:	1e4b      	subs	r3, r1, #1
 80a4584:	2b0b      	cmp	r3, #11
 80a4586:	f63f af43 	bhi.w	80a4410 <_tzset_unlocked_r+0x34>
 80a458a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a458e:	1e53      	subs	r3, r2, #1
 80a4590:	2b04      	cmp	r3, #4
 80a4592:	f63f af3d 	bhi.w	80a4410 <_tzset_unlocked_r+0x34>
 80a4596:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a459a:	2b06      	cmp	r3, #6
 80a459c:	f63f af38 	bhi.w	80a4410 <_tzset_unlocked_r+0x34>
 80a45a0:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a45a4:	f887 8008 	strb.w	r8, [r7, #8]
 80a45a8:	617b      	str	r3, [r7, #20]
 80a45aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a45ac:	eb04 0803 	add.w	r8, r4, r3
 80a45b0:	2302      	movs	r3, #2
 80a45b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a45b6:	2300      	movs	r3, #0
 80a45b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a45bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a45c0:	930a      	str	r3, [sp, #40]	; 0x28
 80a45c2:	f898 3000 	ldrb.w	r3, [r8]
 80a45c6:	2b2f      	cmp	r3, #47	; 0x2f
 80a45c8:	d109      	bne.n	80a45de <_tzset_unlocked_r+0x202>
 80a45ca:	4633      	mov	r3, r6
 80a45cc:	4640      	mov	r0, r8
 80a45ce:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a45d2:	e9cd b600 	strd	fp, r6, [sp]
 80a45d6:	493f      	ldr	r1, [pc, #252]	; (80a46d4 <_tzset_unlocked_r+0x2f8>)
 80a45d8:	aa07      	add	r2, sp, #28
 80a45da:	f7fd f839 	bl	80a1650 <siscanf>
 80a45de:	213c      	movs	r1, #60	; 0x3c
 80a45e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a45e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a45e8:	3728      	adds	r7, #40	; 0x28
 80a45ea:	fb01 2203 	mla	r2, r1, r3, r2
 80a45ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a45f2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a45f6:	fb01 2303 	mla	r3, r1, r3, r2
 80a45fa:	f847 3c10 	str.w	r3, [r7, #-16]
 80a45fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a4600:	4444      	add	r4, r8
 80a4602:	f1b9 0f00 	cmp.w	r9, #0
 80a4606:	d021      	beq.n	80a464c <_tzset_unlocked_r+0x270>
 80a4608:	6868      	ldr	r0, [r5, #4]
 80a460a:	f7ff fe2d 	bl	80a4268 <__tzcalc_limits>
 80a460e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a4610:	4b28      	ldr	r3, [pc, #160]	; (80a46b4 <_tzset_unlocked_r+0x2d8>)
 80a4612:	601a      	str	r2, [r3, #0]
 80a4614:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a4616:	1a9b      	subs	r3, r3, r2
 80a4618:	bf18      	it	ne
 80a461a:	2301      	movne	r3, #1
 80a461c:	4a27      	ldr	r2, [pc, #156]	; (80a46bc <_tzset_unlocked_r+0x2e0>)
 80a461e:	6013      	str	r3, [r2, #0]
 80a4620:	e6f6      	b.n	80a4410 <_tzset_unlocked_r+0x34>
 80a4622:	2b2b      	cmp	r3, #43	; 0x2b
 80a4624:	f04f 0701 	mov.w	r7, #1
 80a4628:	bf08      	it	eq
 80a462a:	3401      	addeq	r4, #1
 80a462c:	e770      	b.n	80a4510 <_tzset_unlocked_r+0x134>
 80a462e:	213c      	movs	r1, #60	; 0x3c
 80a4630:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a4634:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a4638:	fb01 2203 	mla	r2, r1, r3, r2
 80a463c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a4640:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a4644:	fb01 2303 	mla	r3, r1, r3, r2
 80a4648:	435f      	muls	r7, r3
 80a464a:	e778      	b.n	80a453e <_tzset_unlocked_r+0x162>
 80a464c:	f04f 0901 	mov.w	r9, #1
 80a4650:	e77b      	b.n	80a454a <_tzset_unlocked_r+0x16e>
 80a4652:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a4656:	bf0a      	itet	eq
 80a4658:	4643      	moveq	r3, r8
 80a465a:	2344      	movne	r3, #68	; 0x44
 80a465c:	3401      	addeq	r4, #1
 80a465e:	220a      	movs	r2, #10
 80a4660:	4620      	mov	r0, r4
 80a4662:	a90b      	add	r1, sp, #44	; 0x2c
 80a4664:	9305      	str	r3, [sp, #20]
 80a4666:	f7ff fdf5 	bl	80a4254 <strtoul>
 80a466a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a466e:	9b05      	ldr	r3, [sp, #20]
 80a4670:	45a0      	cmp	r8, r4
 80a4672:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a4676:	d114      	bne.n	80a46a2 <_tzset_unlocked_r+0x2c6>
 80a4678:	234d      	movs	r3, #77	; 0x4d
 80a467a:	f1b9 0f00 	cmp.w	r9, #0
 80a467e:	d107      	bne.n	80a4690 <_tzset_unlocked_r+0x2b4>
 80a4680:	2103      	movs	r1, #3
 80a4682:	722b      	strb	r3, [r5, #8]
 80a4684:	2302      	movs	r3, #2
 80a4686:	f8c5 9014 	str.w	r9, [r5, #20]
 80a468a:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a468e:	e78f      	b.n	80a45b0 <_tzset_unlocked_r+0x1d4>
 80a4690:	220b      	movs	r2, #11
 80a4692:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a4696:	2301      	movs	r3, #1
 80a4698:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a469c:	2300      	movs	r3, #0
 80a469e:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a46a0:	e786      	b.n	80a45b0 <_tzset_unlocked_r+0x1d4>
 80a46a2:	b280      	uxth	r0, r0
 80a46a4:	723b      	strb	r3, [r7, #8]
 80a46a6:	6178      	str	r0, [r7, #20]
 80a46a8:	e782      	b.n	80a45b0 <_tzset_unlocked_r+0x1d4>
 80a46aa:	bf00      	nop
 80a46ac:	080a4f48 	.word	0x080a4f48
 80a46b0:	20000740 	.word	0x20000740
 80a46b4:	20000748 	.word	0x20000748
 80a46b8:	080a4f4b 	.word	0x080a4f4b
 80a46bc:	20000744 	.word	0x20000744
 80a46c0:	200000dc 	.word	0x200000dc
 80a46c4:	20000733 	.word	0x20000733
 80a46c8:	080a4f4f 	.word	0x080a4f4f
 80a46cc:	080a4f72 	.word	0x080a4f72
 80a46d0:	080a4f5e 	.word	0x080a4f5e
 80a46d4:	080a4f71 	.word	0x080a4f71
 80a46d8:	20000728 	.word	0x20000728

080a46dc <_findenv_r>:
 80a46dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a46e0:	4607      	mov	r7, r0
 80a46e2:	4689      	mov	r9, r1
 80a46e4:	4616      	mov	r6, r2
 80a46e6:	f000 f8f3 	bl	80a48d0 <__env_lock>
 80a46ea:	4b18      	ldr	r3, [pc, #96]	; (80a474c <_findenv_r+0x70>)
 80a46ec:	681c      	ldr	r4, [r3, #0]
 80a46ee:	469a      	mov	sl, r3
 80a46f0:	b134      	cbz	r4, 80a4700 <_findenv_r+0x24>
 80a46f2:	464b      	mov	r3, r9
 80a46f4:	4698      	mov	r8, r3
 80a46f6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a46fa:	b139      	cbz	r1, 80a470c <_findenv_r+0x30>
 80a46fc:	293d      	cmp	r1, #61	; 0x3d
 80a46fe:	d1f9      	bne.n	80a46f4 <_findenv_r+0x18>
 80a4700:	4638      	mov	r0, r7
 80a4702:	f000 f8eb 	bl	80a48dc <__env_unlock>
 80a4706:	2000      	movs	r0, #0
 80a4708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a470c:	eba8 0809 	sub.w	r8, r8, r9
 80a4710:	46a3      	mov	fp, r4
 80a4712:	f854 0b04 	ldr.w	r0, [r4], #4
 80a4716:	2800      	cmp	r0, #0
 80a4718:	d0f2      	beq.n	80a4700 <_findenv_r+0x24>
 80a471a:	4642      	mov	r2, r8
 80a471c:	4649      	mov	r1, r9
 80a471e:	f7ff fc74 	bl	80a400a <strncmp>
 80a4722:	2800      	cmp	r0, #0
 80a4724:	d1f4      	bne.n	80a4710 <_findenv_r+0x34>
 80a4726:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a472a:	eb03 0508 	add.w	r5, r3, r8
 80a472e:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a4732:	2b3d      	cmp	r3, #61	; 0x3d
 80a4734:	d1ec      	bne.n	80a4710 <_findenv_r+0x34>
 80a4736:	f8da 3000 	ldr.w	r3, [sl]
 80a473a:	4638      	mov	r0, r7
 80a473c:	ebab 0303 	sub.w	r3, fp, r3
 80a4740:	109b      	asrs	r3, r3, #2
 80a4742:	6033      	str	r3, [r6, #0]
 80a4744:	f000 f8ca 	bl	80a48dc <__env_unlock>
 80a4748:	1c68      	adds	r0, r5, #1
 80a474a:	e7dd      	b.n	80a4708 <_findenv_r+0x2c>
 80a474c:	20000140 	.word	0x20000140

080a4750 <_getenv_r>:
 80a4750:	b507      	push	{r0, r1, r2, lr}
 80a4752:	aa01      	add	r2, sp, #4
 80a4754:	f7ff ffc2 	bl	80a46dc <_findenv_r>
 80a4758:	b003      	add	sp, #12
 80a475a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4760 <__gettzinfo>:
 80a4760:	4800      	ldr	r0, [pc, #0]	; (80a4764 <__gettzinfo+0x4>)
 80a4762:	4770      	bx	lr
 80a4764:	200000e8 	.word	0x200000e8

080a4768 <gmtime_r>:
 80a4768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a476c:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a4770:	460c      	mov	r4, r1
 80a4772:	2300      	movs	r3, #0
 80a4774:	4630      	mov	r0, r6
 80a4776:	4639      	mov	r1, r7
 80a4778:	4a4f      	ldr	r2, [pc, #316]	; (80a48b8 <gmtime_r+0x150>)
 80a477a:	f000 f8b5 	bl	80a48e8 <__aeabi_ldivmod>
 80a477e:	4639      	mov	r1, r7
 80a4780:	4605      	mov	r5, r0
 80a4782:	2300      	movs	r3, #0
 80a4784:	4630      	mov	r0, r6
 80a4786:	4a4c      	ldr	r2, [pc, #304]	; (80a48b8 <gmtime_r+0x150>)
 80a4788:	f000 f8ae 	bl	80a48e8 <__aeabi_ldivmod>
 80a478c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a4790:	2a00      	cmp	r2, #0
 80a4792:	bfbc      	itt	lt
 80a4794:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a4798:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a479c:	fbb2 f3f1 	udiv	r3, r2, r1
 80a47a0:	fb01 2213 	mls	r2, r1, r3, r2
 80a47a4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a47a8:	60a3      	str	r3, [r4, #8]
 80a47aa:	fbb2 f3f1 	udiv	r3, r2, r1
 80a47ae:	fb01 2213 	mls	r2, r1, r3, r2
 80a47b2:	6022      	str	r2, [r4, #0]
 80a47b4:	f04f 0207 	mov.w	r2, #7
 80a47b8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a47bc:	bfac      	ite	ge
 80a47be:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a47c2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a47c6:	6063      	str	r3, [r4, #4]
 80a47c8:	1cc3      	adds	r3, r0, #3
 80a47ca:	fb93 f2f2 	sdiv	r2, r3, r2
 80a47ce:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a47d2:	1a9b      	subs	r3, r3, r2
 80a47d4:	bf48      	it	mi
 80a47d6:	3307      	addmi	r3, #7
 80a47d8:	2800      	cmp	r0, #0
 80a47da:	4938      	ldr	r1, [pc, #224]	; (80a48bc <gmtime_r+0x154>)
 80a47dc:	61a3      	str	r3, [r4, #24]
 80a47de:	bfbd      	ittte	lt
 80a47e0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a47e4:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a47e8:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a47ec:	fb90 f1f1 	sdivge	r1, r0, r1
 80a47f0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a47f4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a47f8:	4b31      	ldr	r3, [pc, #196]	; (80a48c0 <gmtime_r+0x158>)
 80a47fa:	f240 176d 	movw	r7, #365	; 0x16d
 80a47fe:	fb03 0001 	mla	r0, r3, r1, r0
 80a4802:	fbb0 f2f2 	udiv	r2, r0, r2
 80a4806:	fbb0 f3fc 	udiv	r3, r0, ip
 80a480a:	4402      	add	r2, r0
 80a480c:	1ad2      	subs	r2, r2, r3
 80a480e:	4b2d      	ldr	r3, [pc, #180]	; (80a48c4 <gmtime_r+0x15c>)
 80a4810:	2664      	movs	r6, #100	; 0x64
 80a4812:	fbb0 f3f3 	udiv	r3, r0, r3
 80a4816:	1ad3      	subs	r3, r2, r3
 80a4818:	fbb3 f5f7 	udiv	r5, r3, r7
 80a481c:	fbb3 f3fc 	udiv	r3, r3, ip
 80a4820:	fbb5 f2f6 	udiv	r2, r5, r6
 80a4824:	1ad3      	subs	r3, r2, r3
 80a4826:	4403      	add	r3, r0
 80a4828:	2099      	movs	r0, #153	; 0x99
 80a482a:	fb07 3315 	mls	r3, r7, r5, r3
 80a482e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a4832:	f10c 0c02 	add.w	ip, ip, #2
 80a4836:	fbbc f7f0 	udiv	r7, ip, r0
 80a483a:	f04f 0805 	mov.w	r8, #5
 80a483e:	4378      	muls	r0, r7
 80a4840:	3002      	adds	r0, #2
 80a4842:	fbb0 f0f8 	udiv	r0, r0, r8
 80a4846:	f103 0e01 	add.w	lr, r3, #1
 80a484a:	ebae 0000 	sub.w	r0, lr, r0
 80a484e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a4852:	45f4      	cmp	ip, lr
 80a4854:	bf94      	ite	ls
 80a4856:	f04f 0c02 	movls.w	ip, #2
 80a485a:	f06f 0c09 	mvnhi.w	ip, #9
 80a485e:	4467      	add	r7, ip
 80a4860:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a4864:	fb0c 5101 	mla	r1, ip, r1, r5
 80a4868:	2f01      	cmp	r7, #1
 80a486a:	bf98      	it	ls
 80a486c:	3101      	addls	r1, #1
 80a486e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a4872:	d30c      	bcc.n	80a488e <gmtime_r+0x126>
 80a4874:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a4878:	61e3      	str	r3, [r4, #28]
 80a487a:	2300      	movs	r3, #0
 80a487c:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a4880:	60e0      	str	r0, [r4, #12]
 80a4882:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a4886:	4620      	mov	r0, r4
 80a4888:	6223      	str	r3, [r4, #32]
 80a488a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a488e:	f015 0f03 	tst.w	r5, #3
 80a4892:	d102      	bne.n	80a489a <gmtime_r+0x132>
 80a4894:	fb06 5212 	mls	r2, r6, r2, r5
 80a4898:	b95a      	cbnz	r2, 80a48b2 <gmtime_r+0x14a>
 80a489a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a489e:	fbb5 f2f6 	udiv	r2, r5, r6
 80a48a2:	fb06 5212 	mls	r2, r6, r2, r5
 80a48a6:	fab2 f282 	clz	r2, r2
 80a48aa:	0952      	lsrs	r2, r2, #5
 80a48ac:	333b      	adds	r3, #59	; 0x3b
 80a48ae:	4413      	add	r3, r2
 80a48b0:	e7e2      	b.n	80a4878 <gmtime_r+0x110>
 80a48b2:	2201      	movs	r2, #1
 80a48b4:	e7fa      	b.n	80a48ac <gmtime_r+0x144>
 80a48b6:	bf00      	nop
 80a48b8:	00015180 	.word	0x00015180
 80a48bc:	00023ab1 	.word	0x00023ab1
 80a48c0:	fffdc54f 	.word	0xfffdc54f
 80a48c4:	00023ab0 	.word	0x00023ab0

080a48c8 <__retarget_lock_acquire>:
 80a48c8:	4770      	bx	lr

080a48ca <__retarget_lock_acquire_recursive>:
 80a48ca:	4770      	bx	lr

080a48cc <__retarget_lock_release>:
 80a48cc:	4770      	bx	lr

080a48ce <__retarget_lock_release_recursive>:
 80a48ce:	4770      	bx	lr

080a48d0 <__env_lock>:
 80a48d0:	4801      	ldr	r0, [pc, #4]	; (80a48d8 <__env_lock+0x8>)
 80a48d2:	f7ff bffa 	b.w	80a48ca <__retarget_lock_acquire_recursive>
 80a48d6:	bf00      	nop
 80a48d8:	20000756 	.word	0x20000756

080a48dc <__env_unlock>:
 80a48dc:	4801      	ldr	r0, [pc, #4]	; (80a48e4 <__env_unlock+0x8>)
 80a48de:	f7ff bff6 	b.w	80a48ce <__retarget_lock_release_recursive>
 80a48e2:	bf00      	nop
 80a48e4:	20000756 	.word	0x20000756

080a48e8 <__aeabi_ldivmod>:
 80a48e8:	b97b      	cbnz	r3, 80a490a <__aeabi_ldivmod+0x22>
 80a48ea:	b972      	cbnz	r2, 80a490a <__aeabi_ldivmod+0x22>
 80a48ec:	2900      	cmp	r1, #0
 80a48ee:	bfbe      	ittt	lt
 80a48f0:	2000      	movlt	r0, #0
 80a48f2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a48f6:	e006      	blt.n	80a4906 <__aeabi_ldivmod+0x1e>
 80a48f8:	bf08      	it	eq
 80a48fa:	2800      	cmpeq	r0, #0
 80a48fc:	bf1c      	itt	ne
 80a48fe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a4902:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a4906:	f7ff b9e5 	b.w	80a3cd4 <__aeabi_idiv0>
 80a490a:	f1ad 0c08 	sub.w	ip, sp, #8
 80a490e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a4912:	2900      	cmp	r1, #0
 80a4914:	db09      	blt.n	80a492a <__aeabi_ldivmod+0x42>
 80a4916:	2b00      	cmp	r3, #0
 80a4918:	db1a      	blt.n	80a4950 <__aeabi_ldivmod+0x68>
 80a491a:	f7ff f879 	bl	80a3a10 <__udivmoddi4>
 80a491e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4922:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4926:	b004      	add	sp, #16
 80a4928:	4770      	bx	lr
 80a492a:	4240      	negs	r0, r0
 80a492c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4930:	2b00      	cmp	r3, #0
 80a4932:	db1b      	blt.n	80a496c <__aeabi_ldivmod+0x84>
 80a4934:	f7ff f86c 	bl	80a3a10 <__udivmoddi4>
 80a4938:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a493c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4940:	b004      	add	sp, #16
 80a4942:	4240      	negs	r0, r0
 80a4944:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4948:	4252      	negs	r2, r2
 80a494a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a494e:	4770      	bx	lr
 80a4950:	4252      	negs	r2, r2
 80a4952:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4956:	f7ff f85b 	bl	80a3a10 <__udivmoddi4>
 80a495a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a495e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4962:	b004      	add	sp, #16
 80a4964:	4240      	negs	r0, r0
 80a4966:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a496a:	4770      	bx	lr
 80a496c:	4252      	negs	r2, r2
 80a496e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4972:	f7ff f84d 	bl	80a3a10 <__udivmoddi4>
 80a4976:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a497a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a497e:	b004      	add	sp, #16
 80a4980:	4252      	negs	r2, r2
 80a4982:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4986:	4770      	bx	lr

080a4988 <dynalib_user>:
 80a4988:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a4998:	0000 0000 6957 6946 5120 6175 696c 7974     ....WiFi Quality
 80a49a8:	203a 2e25 3230 2566 2025 7453 6572 676e     : %.02f%% Streng
 80a49b8:	6874 203a 2e25 3230 2566 0025 0031 6553     th: %.02f%%.1.Se
 80a49c8:	2074 6556 6272 736f 2065 6f4d 6564 3000     t Verbose Mode.0
 80a49d8:	4300 656c 7261 6465 5620 7265 6f62 6573     .Cleared Verbose
 80a49e8:	4d20 646f 0065 654c 2064 6e4f 5000 6d75      Mode.Led On.Pum
 80a49f8:	2070 6e4f 5000 6d75 2070 6f63 746e 6f72     p On.Pump contro
 80a4a08:	006c 7550 706d 4f20 6666 5200 6e75 696e     l.Pump Off.Runni
 80a4a18:	676e 4400 6961 796c 4320 656c 6e61 7075     ng.Daily Cleanup
 80a4a28:	4600 6f72 206d 7325 7420 206f 7325 5300     .From %s to %s.S
 80a4a38:	6174 6574 5420 6172 736e 7469 6f69 006e     tate Transition.
 80a4a48:	654c 2064 664f 0066 6f46 6e75 6174 6e69     Led Off.Fountain
 80a4a58:	4e20 746f 4520 616e 6c62 6465 5420 7275      Not Enabled Tur
 80a4a68:	656e 2064 7645 7265 7479 6968 676e 4f20     ned Everything O
 80a4a78:	6666 5400 7275 656e 2064 7665 7265 7479     ff.Turned everyt
 80a4a88:	6968 676e 6f20 6666 5400 7275 656e 2064     hing off.Turned 
 80a4a98:	6e6f 7420 6568 4c20 4445 0073 7554 6e72     on the LEDs.Turn
 80a4aa8:	6465 6f20 206e 6874 2065 7550 706d 5400     ed on the Pump.T
 80a4ab8:	7275 656e 2064 6e6f 7420 6568 4c20 6465     urned on the Led
 80a4ac8:	0073 7245 6f72 2072 7453 7461 2065 202d     s.Error State - 
 80a4ad8:	6552 6573 0074 7453 7461 0065 6f54 6b6f     Reset.State.Took
 80a4ae8:	6c20 6e6f 2067 6973 636e 2065 616c 7473      long since last
 80a4af8:	7720 6265 6f68 6b6f 7220 7365 6f70 736e      webhook respons
 80a4b08:	2065 202d 6552 6573 0074 7245 6f72 2072     e - Reset.Error 
 80a4b18:	7453 7461 2065 202d 6f54 206f 616d 796e     State - Too many
 80a4b28:	7220 7365 7465 0073 3225 312e 2066 5455      resets.%2.1f UT
 80a4b38:	0043 6954 656d 7a20 6e6f 2065 666f 7366     C.Time zone offs
 80a4b48:	7465 2520 0069 6954 656d 4400 5453 6f20     et %i.Time.DST o
 80a4b58:	6666 6573 2074 3225 312e 0066 7550 706d     ffset %2.1f.Pump
 80a4b68:	4f20 206e 6f48 7275 7320 7465 7420 206f      On Hour set to 
 80a4b78:	6925 4c00 6465 4f20 206e 6f48 7275 7320     %i.Led On Hour s
 80a4b88:	7465 7420 206f 6925 5700 6565 656b 646e     et to %i.Weekend
 80a4b98:	5020 776f 7265 4f20 6666 4820 756f 2072      Power Off Hour 
 80a4ba8:	6573 2074 6f74 2520 0069 6557 6b65 6164     set to %i.Weekda
 80a4bb8:	2079 6f50 6577 2072 664f 2066 6f48 7275     y Power Off Hour
 80a4bc8:	7320 7465 7420 206f 6925 5000 6d75 2070      set to %i.Pump 
 80a4bd8:	5750 204d 6176 756c 2065 6573 2074 6f74     PWM value set to
 80a4be8:	2520 0069 6f4e 2074 6e45 6261 656c 0064      %i.Not Enabled.
 80a4bf8:	6f46 6e75 6174 6e69 2520 0073 6953 6e67     Fountain %s.Sign
 80a4c08:	6c61 5200 7365 7465 6f43 6e75 0074 6552     al.ResetCount.Re
 80a4c18:	656c 7361 0065 656c 5064 776f 7265 7000     lease.ledPower.p
 80a4c28:	6d75 5070 776f 7265 4c00 6465 4f20 206e     umpPower.Led On 
 80a4c38:	6f48 7275 5000 6d75 2070 6e4f 4820 756f     Hour.Pump On Hou
 80a4c48:	0072 6f50 6577 2072 664f 2066 6f48 7275     r.Power Off Hour
 80a4c58:	5700 6565 656b 646e 4f20 6666 4820 756f     .Weekend Off Hou
 80a4c68:	0072 6557 6b65 6164 2079 664f 2066 6f48     r.Weekday Off Ho
 80a4c78:	7275 4600 756f 746e 6961 206e 6e45 6261     ur.Fountain Enab
 80a4c88:	656c 0064 6556 6272 736f 2d65 6f4d 6564     led.Verbose-Mode
 80a4c98:	5000 6d75 2d70 6f43 746e 6f72 006c 6553     .Pump-Control.Se
 80a4ca8:	2d74 6954 656d 6f7a 656e 5300 7465 442d     t-Timezone.Set-D
 80a4cb8:	5453 664f 7366 7465 5300 7465 502d 6d75     STOffset.Set-Pum
 80a4cc8:	4f70 006e 6553 2d74 654c 4f64 006e 6553     pOn.Set-LedOn.Se
 80a4cd8:	2d74 6557 6b65 6e65 4f64 6666 5300 7465     t-WeekendOff.Set
 80a4ce8:	572d 6565 646b 7961 664f 0066 6553 2d74     -WeekdayOff.Set-
 80a4cf8:	5750 764d 6c61 6575 4500 616e 6c62 4665     PWMvalue.EnableF
 80a4d08:	756f 746e 6961 006e                         ountain.

080a4d10 <_ZL13releaseNumber>:
 80a4d10:	2e30 3533 0000 0000                         0.35....

080a4d18 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4d20:	16cf 080a 16d5 080a 1725 080a 16e3 080a     ........%.......
 80a4d30:	16d1 080a                                   ....

080a4d34 <_ZTV7TwoWire>:
	...
 80a4d3c:	1c99 080a 1ce3 080a 1cbb 080a 1c9b 080a     ................
 80a4d4c:	1cc3 080a 1ccb 080a 1cd3 080a 1cdb 080a     ................

080a4d5c <_ZTV9IPAddress>:
	...
 80a4d64:	1d7d 080a 1d6d 080a 1d6f 080a 7061 0070     }...m...o...app.

080a4d74 <_ZTVN5spark12NetworkClassE>:
	...
 80a4d7c:	1e45 080a 1e4f 080a 1e59 080a 1e63 080a     E...O...Y...c...
 80a4d8c:	1e6d 080a 1e79 080a 1e85 080a 1e8d 080a     m...y...........
 80a4d9c:	1e95 080a 1ea1 080a 1ea9 080a 1eb3 080a     ................
 80a4dac:	1ebd 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a4dbc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a4dcc <_ZTV11USARTSerial>:
	...
 80a4dd4:	23fd 080a 2465 080a 2441 080a 1f21 080a     .#..e$..A$..!...
 80a4de4:	2411 080a 242d 080a 241f 080a 243b 080a     .$..-$...$..;$..
 80a4df4:	23ff 080a 2403 080a                         .#...$..

080a4dfc <_ZTV9USBSerial>:
	...
 80a4e04:	24f5 080a 255b 080a 2533 080a 1f21 080a     .$..[%..3%..!...
 80a4e14:	2525 080a 24f7 080a 2507 080a 2555 080a     %%...$...%..U%..
 80a4e24:	2517 080a 24f1 080a                         .%...$..

080a4e2c <_ZTVN5spark9WiFiClassE>:
	...
 80a4e34:	273f 080a 2735 080a 272b 080a 268f 080a     ?'..5'..+'...&..
 80a4e44:	271f 080a 2713 080a 1e85 080a 1e8d 080a     .'...'..........
 80a4e54:	2707 080a 26ff 080a 26f5 080a 26eb 080a     .'...&...&...&..
 80a4e64:	26a7 080a                                   .&..

080a4e68 <_ZTV10WiFiSignal>:
	...
 80a4e70:	2689 080a 2699 080a 268b 080a 2749 080a     .&...&...&..I'..
 80a4e80:	2779 080a 279d 080a 27cd 080a               y'...'...'..

080a4e8c <_ZSt7nothrow>:
 80a4e8c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80a4e9c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080a4ead <day_name.4782>:
 80a4ead:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a4ebd:	6972 6153                                    riSat

080a4ec2 <mon_name.4783>:
 80a4ec2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a4ed2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a4ee2:	4476 6365 0000                              vDec..

080a4ee8 <__month_lengths>:
 80a4ee8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a4ef8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a4f08:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a4f18:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a4f28:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a4f38:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a4f48:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a4f58:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a4f68:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a4f78:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a4f84 <_ctype_>:
 80a4f84:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a4f94:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a4fa4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a4fb4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a4fc4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a4fd4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a4fe4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a4ff4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a5004:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a5085 <link_const_variable_data_end>:
 80a5085:	00          	.byte	0x00
	...

080a5088 <link_constructors_location>:
 80a5088:	080a10dd 	.word	0x080a10dd
 80a508c:	080a1e35 	.word	0x080a1e35
 80a5090:	080a1f0d 	.word	0x080a1f0d
 80a5094:	080a1fb9 	.word	0x080a1fb9
 80a5098:	080a212d 	.word	0x080a212d
 80a509c:	080a23e9 	.word	0x080a23e9
 80a50a0:	080a2895 	.word	0x080a2895
 80a50a4:	080a2bdd 	.word	0x080a2bdd

080a50a8 <link_constructors_end>:
	...
